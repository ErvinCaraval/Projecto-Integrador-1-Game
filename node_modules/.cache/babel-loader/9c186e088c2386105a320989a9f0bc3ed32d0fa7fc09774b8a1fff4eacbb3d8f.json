{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Color, DoubleSide, FileLoader, Group, Loader, Mesh, MeshBasicMaterial, RawShaderMaterial, TextureLoader, Quaternion, Vector3 } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\nclass TiltLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n  parse(buffer) {\n    const group = new Group();\n    // https://docs.google.com/document/d/11ZsHozYn9FnWG7y3s3WAyKIACfbfwb4PbaS8cZ_xjvo/edit#\n\n    const zip = fflate.unzipSync(new Uint8Array(buffer.slice(16)));\n\n    /*\n    const thumbnail = zip[ 'thumbnail.png' ].buffer;\n    const img = document.createElement( 'img' );\n    img.src = URL.createObjectURL( new Blob( [ thumbnail ] ) );\n    document.body.appendChild( img );\n    */\n\n    const metadata = JSON.parse(fflate.strFromU8(zip['metadata.json']));\n\n    /*\n    const blob = new Blob( [ zip[ 'data.sketch' ].buffer ], { type: 'application/octet-stream' } );\n    window.open( URL.createObjectURL( blob ) );\n    */\n\n    const data = new DataView(zip['data.sketch'].buffer);\n    const num_strokes = data.getInt32(16, true);\n    const brushes = {};\n    let offset = 20;\n    for (let i = 0; i < num_strokes; i++) {\n      const brush_index = data.getInt32(offset, true);\n      const brush_color = [data.getFloat32(offset + 4, true), data.getFloat32(offset + 8, true), data.getFloat32(offset + 12, true), data.getFloat32(offset + 16, true)];\n      const brush_size = data.getFloat32(offset + 20, true);\n      const stroke_mask = data.getUint32(offset + 24, true);\n      const controlpoint_mask = data.getUint32(offset + 28, true);\n      let offset_stroke_mask = 0;\n      let offset_controlpoint_mask = 0;\n      for (let j = 0; j < 4; j++) {\n        // TOFIX: I don't understand these masks yet\n\n        const byte = 1 << j;\n        if ((stroke_mask & byte) > 0) offset_stroke_mask += 4;\n        if ((controlpoint_mask & byte) > 0) offset_controlpoint_mask += 4;\n      }\n\n      // console.log( { brush_index, brush_color, brush_size, stroke_mask, controlpoint_mask } );\n      // console.log( offset_stroke_mask, offset_controlpoint_mask );\n\n      offset = offset + 28 + offset_stroke_mask + 4; // TOFIX: This is wrong\n\n      const num_control_points = data.getInt32(offset, true);\n\n      // console.log( { num_control_points } );\n\n      const positions = new Float32Array(num_control_points * 3);\n      const quaternions = new Float32Array(num_control_points * 4);\n      offset = offset + 4;\n      for (let j = 0, k = 0; j < positions.length; j += 3, k += 4) {\n        positions[j + 0] = data.getFloat32(offset + 0, true);\n        positions[j + 1] = data.getFloat32(offset + 4, true);\n        positions[j + 2] = data.getFloat32(offset + 8, true);\n        quaternions[k + 0] = data.getFloat32(offset + 12, true);\n        quaternions[k + 1] = data.getFloat32(offset + 16, true);\n        quaternions[k + 2] = data.getFloat32(offset + 20, true);\n        quaternions[k + 3] = data.getFloat32(offset + 24, true);\n        offset = offset + 28 + offset_controlpoint_mask; // TOFIX: This is wrong\n      }\n      if (brush_index in brushes === false) {\n        brushes[brush_index] = [];\n      }\n      brushes[brush_index].push([positions, quaternions, brush_size, brush_color]);\n    }\n    for (const brush_index in brushes) {\n      const geometry = new StrokeGeometry(brushes[brush_index]);\n      const material = getMaterial(metadata.BrushIndex[brush_index]);\n      group.add(new Mesh(geometry, material));\n    }\n    return group;\n  }\n}\nclass StrokeGeometry extends BufferGeometry {\n  constructor(strokes) {\n    super();\n    const vertices = [];\n    const colors = [];\n    const uvs = [];\n    const position = new Vector3();\n    const prevPosition = new Vector3();\n    const quaternion = new Quaternion();\n    const prevQuaternion = new Quaternion();\n    const vector1 = new Vector3();\n    const vector2 = new Vector3();\n    const vector3 = new Vector3();\n    const vector4 = new Vector3();\n    const color = new Color();\n\n    // size = size / 2;\n\n    for (const k in strokes) {\n      const stroke = strokes[k];\n      const positions = stroke[0];\n      const quaternions = stroke[1];\n      const size = stroke[2];\n      const rgba = stroke[3];\n      const alpha = stroke[3][3];\n      color.fromArray(rgba).convertSRGBToLinear();\n      prevPosition.fromArray(positions, 0);\n      prevQuaternion.fromArray(quaternions, 0);\n      for (let i = 3, j = 4, l = positions.length; i < l; i += 3, j += 4) {\n        position.fromArray(positions, i);\n        quaternion.fromArray(quaternions, j);\n        vector1.set(-size, 0, 0);\n        vector1.applyQuaternion(quaternion);\n        vector1.add(position);\n        vector2.set(size, 0, 0);\n        vector2.applyQuaternion(quaternion);\n        vector2.add(position);\n        vector3.set(size, 0, 0);\n        vector3.applyQuaternion(prevQuaternion);\n        vector3.add(prevPosition);\n        vector4.set(-size, 0, 0);\n        vector4.applyQuaternion(prevQuaternion);\n        vector4.add(prevPosition);\n        vertices.push(vector1.x, vector1.y, -vector1.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        vertices.push(vector2.x, vector2.y, -vector2.z);\n        vertices.push(vector3.x, vector3.y, -vector3.z);\n        vertices.push(vector4.x, vector4.y, -vector4.z);\n        prevPosition.copy(position);\n        prevQuaternion.copy(quaternion);\n        colors.push(...color, alpha);\n        colors.push(...color, alpha);\n        colors.push(...color, alpha);\n        colors.push(...color, alpha);\n        colors.push(...color, alpha);\n        colors.push(...color, alpha);\n        const p1 = i / l;\n        const p2 = (i - 3) / l;\n        uvs.push(p1, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 0);\n        uvs.push(p1, 1);\n        uvs.push(p2, 1);\n        uvs.push(p2, 0);\n      }\n    }\n    this.setAttribute('position', new BufferAttribute(new Float32Array(vertices), 3));\n    this.setAttribute('color', new BufferAttribute(new Float32Array(colors), 4));\n    this.setAttribute('uv', new BufferAttribute(new Float32Array(uvs), 2));\n  }\n}\nconst BRUSH_LIST_ARRAY = {\n  '89d104cd-d012-426b-b5b3-bbaee63ac43c': 'Bubbles',\n  '700f3aa8-9a7c-2384-8b8a-ea028905dd8c': 'CelVinyl',\n  '0f0ff7b2-a677-45eb-a7d6-0cd7206f4816': 'ChromaticWave',\n  '1161af82-50cf-47db-9706-0c3576d43c43': 'CoarseBristles',\n  '79168f10-6961-464a-8be1-57ed364c5600': 'CoarseBristlesSingleSided',\n  '1caa6d7d-f015-3f54-3a4b-8b5354d39f81': 'Comet',\n  'c8313697-2563-47fc-832e-290f4c04b901': 'DiamondHull',\n  '4391aaaa-df73-4396-9e33-31e4e4930b27': 'Disco',\n  'd1d991f2-e7a0-4cf1-b328-f57e915e6260': 'DotMarker',\n  '6a1cf9f9-032c-45ec-9b1d-a6680bee30f7': 'Dots',\n  '0d3889f3-3ede-470c-8af4-f44813306126': 'DoubleTaperedFlat',\n  '0d3889f3-3ede-470c-8af4-de4813306126': 'DoubleTaperedMarker',\n  'd0262945-853c-4481-9cbd-88586bed93cb': 'DuctTape',\n  '3ca16e2f-bdcd-4da2-8631-dcef342f40f1': 'DuctTapeSingleSided',\n  'f6e85de3-6dcc-4e7f-87fd-cee8c3d25d51': 'Electricity',\n  '02ffb866-7fb2-4d15-b761-1012cefb1360': 'Embers',\n  'cb92b597-94ca-4255-b017-0e3f42f12f9e': 'Fire',\n  '2d35bcf0-e4d8-452c-97b1-3311be063130': 'Flat',\n  '55303bc4-c749-4a72-98d9-d23e68e76e18': 'FlatDeprecated',\n  '280c0a7a-aad8-416c-a7d2-df63d129ca70': 'FlatSingleSided',\n  'cf019139-d41c-4eb0-a1d0-5cf54b0a42f3': 'Highlighter',\n  '6a1cf9f9-032c-45ec-9b6e-a6680bee32e9': 'HyperGrid',\n  'dce872c2-7b49-4684-b59b-c45387949c5c': 'Hypercolor',\n  'e8ef32b1-baa8-460a-9c2c-9cf8506794f5': 'HypercolorSingleSided',\n  '2f212815-f4d3-c1a4-681a-feeaf9c6dc37': 'Icing',\n  'f5c336cf-5108-4b40-ade9-c687504385ab': 'Ink',\n  'c0012095-3ffd-4040-8ee1-fc180d346eaa': 'InkSingleSided',\n  '4a76a27a-44d8-4bfe-9a8c-713749a499b0': 'Leaves',\n  'ea19de07-d0c0-4484-9198-18489a3c1487': 'LeavesSingleSided',\n  '2241cd32-8ba2-48a5-9ee7-2caef7e9ed62': 'Light',\n  '4391aaaa-df81-4396-9e33-31e4e4930b27': 'LightWire',\n  'd381e0f5-3def-4a0d-8853-31e9200bcbda': 'Lofted',\n  '429ed64a-4e97-4466-84d3-145a861ef684': 'Marker',\n  '79348357-432d-4746-8e29-0e25c112e3aa': 'MatteHull',\n  'b2ffef01-eaaa-4ab5-aa64-95a2c4f5dbc6': 'NeonPulse',\n  'f72ec0e7-a844-4e38-82e3-140c44772699': 'OilPaint',\n  'c515dad7-4393-4681-81ad-162ef052241b': 'OilPaintSingleSided',\n  'f1114e2e-eb8d-4fde-915a-6e653b54e9f5': 'Paper',\n  '759f1ebd-20cd-4720-8d41-234e0da63716': 'PaperSingleSided',\n  'e0abbc80-0f80-e854-4970-8924a0863dcc': 'Petal',\n  'c33714d1-b2f9-412e-bd50-1884c9d46336': 'Plasma',\n  'ad1ad437-76e2-450d-a23a-e17f8310b960': 'Rainbow',\n  'faaa4d44-fcfb-4177-96be-753ac0421ba3': 'ShinyHull',\n  '70d79cca-b159-4f35-990c-f02193947fe8': 'Smoke',\n  'd902ed8b-d0d1-476c-a8de-878a79e3a34c': 'Snow',\n  'accb32f5-4509-454f-93f8-1df3fd31df1b': 'SoftHighlighter',\n  'cf7f0059-7aeb-53a4-2b67-c83d863a9ffa': 'Spikes',\n  '8dc4a70c-d558-4efd-a5ed-d4e860f40dc3': 'Splatter',\n  '7a1c8107-50c5-4b70-9a39-421576d6617e': 'SplatterSingleSided',\n  '0eb4db27-3f82-408d-b5a1-19ebd7d5b711': 'Stars',\n  '44bb800a-fbc3-4592-8426-94ecb05ddec3': 'Streamers',\n  '0077f88c-d93a-42f3-b59b-b31c50cdb414': 'Taffy',\n  'b468c1fb-f254-41ed-8ec9-57030bc5660c': 'TaperedFlat',\n  'c8ccb53d-ae13-45ef-8afb-b730d81394eb': 'TaperedFlatSingleSided',\n  'd90c6ad8-af0f-4b54-b422-e0f92abe1b3c': 'TaperedMarker',\n  '1a26b8c0-8a07-4f8a-9fac-d2ef36e0cad0': 'TaperedMarker_Flat',\n  '75b32cf0-fdd6-4d89-a64b-e2a00b247b0f': 'ThickPaint',\n  'fdf0326a-c0d1-4fed-b101-9db0ff6d071f': 'ThickPaintSingleSided',\n  '4391385a-df73-4396-9e33-31e4e4930b27': 'Toon',\n  'a8fea537-da7c-4d4b-817f-24f074725d6d': 'UnlitHull',\n  'd229d335-c334-495a-a801-660ac8a87360': 'VelvetInk',\n  '10201aa3-ebc2-42d8-84b7-2e63f6eeb8ab': 'Waveform',\n  'b67c0e81-ce6d-40a8-aeb0-ef036b081aa3': 'WetPaint',\n  'dea67637-cd1a-27e4-c9b1-52f4bbcb84e5': 'WetPaintSingleSided',\n  '5347acf0-a8e2-47b6-8346-30c70719d763': 'WigglyGraphite',\n  'e814fef1-97fd-7194-4a2f-50c2bb918be2': 'WigglyGraphiteSingleSided',\n  '4391385a-cf83-4396-9e33-31e4e4930b27': 'Wire'\n};\nconst common = {\n  'colors': {\n    'BloomColor': `\n\t\t\tvec3 BloomColor(vec3 color, float gain) {\n\t\t\t\t// Guarantee that there's at least a little bit of all 3 channels.\n\t\t\t\t// This makes fully-saturated strokes (which only have 2 non-zero\n\t\t\t\t// color channels) eventually clip to white rather than to a secondary.\n\t\t\t\tfloat cmin = length(color.rgb) * .05;\n\t\t\t\tcolor.rgb = max(color.rgb, vec3(cmin, cmin, cmin));\n\t\t\t\t// If we try to remove this pow() from .a, it brightens up\n\t\t\t\t// pressure-sensitive strokes; looks better as-is.\n\t\t\t\tcolor = pow(color, vec3(2.2));\n\t\t\t\tcolor.rgb *= 2. * exp(gain * 10.);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    'LinearToSrgb': `\n\t\t\tvec3 LinearToSrgb(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 linearColor = color.rgb;\n\t\t\t\tvec3 S1 = sqrt(linearColor);\n\t\t\t\tvec3 S2 = sqrt(S1);\n\t\t\t\tvec3 S3 = sqrt(S2);\n\t\t\t\tcolor.rgb = 0.662002687 * S1 + 0.684122060 * S2 - 0.323583601 * S3 - 0.0225411470 * linearColor;\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n    'hsv': `\n\t\t\t// uniform sampler2D lookupTex;\n\t\t\tvec4 lookup(vec4 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 lookup(vec3 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 hsv2rgb( vec3 hsv ) {\n\t\t\t\tvec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\t\t\t\treturn hsv.z * mix( vec3(1.0), rgb, hsv.y);\n\t\t\t}\n\n\t\t\tvec3 rgb2hsv( vec3 rgb ) {\n\t\t\t\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\t\tvec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n\t\t\t\tvec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n\t\t\t\tfloat d = q.x - min(q.w, q.y);\n\t\t\t\tfloat e = 1.0e-10;\n\n\t\t\t\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t\t}\n\t\t`,\n    'SrgbToLinear': `\n\t\t\tvec3 SrgbToLinear(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 sRGB = color.rgb;\n\t\t\t\tcolor.rgb = sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`\n  }\n};\nlet shaders = null;\nfunction getShaders() {\n  if (shaders === null) {\n    const loader = new TextureLoader().setPath('./textures/tiltbrush/');\n    shaders = {\n      'Light': {\n        uniforms: {\n          mainTex: {\n            value: loader.load('Light.webp')\n          },\n          alphaTest: {\n            value: 0.067\n          },\n          emission_gain: {\n            value: 0.45\n          },\n          alpha: {\n            value: 1\n          }\n        },\n        vertexShader: `\n\t\t\t\t\tprecision highp float;\n\t\t\t\t\tprecision highp int;\n\n\t\t\t\t\tattribute vec2 uv;\n\t\t\t\t\tattribute vec4 color;\n\t\t\t\t\tattribute vec3 position;\n\n\t\t\t\t\tuniform mat4 modelMatrix;\n\t\t\t\t\tuniform mat4 modelViewMatrix;\n\t\t\t\t\tuniform mat4 projectionMatrix;\n\t\t\t\t\tuniform mat4 viewMatrix;\n\t\t\t\t\tuniform mat3 normalMatrix;\n\t\t\t\t\tuniform vec3 cameraPosition;\n\n\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tvarying vec3 vColor;\n\n\t\t\t\t\t${common.colors.LinearToSrgb}\n\t\t\t\t\t${common.colors.hsv}\n\n\t\t\t\t\tvoid main() {\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t\tvColor = lookup(color.rgb);\n\n\t\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\t}\n\t\t\t\t`,\n        fragmentShader: `\n\t\t\t\t\tprecision highp float;\n\t\t\t\t\tprecision highp int;\n\n\t\t\t\t\tuniform float emission_gain;\n\n\t\t\t\t\tuniform sampler2D mainTex;\n\t\t\t\t\tuniform float alphaTest;\n\n\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tvarying vec3 vColor;\n\n\t\t\t\t\t${common.colors.BloomColor}\n\t\t\t\t\t${common.colors.SrgbToLinear}\n\n\t\t\t\t\tvoid main(){\n\t\t\t\t\t\tvec4 col = texture2D(mainTex, vUv);\n\t\t\t\t\t\tvec3 color = vColor;\n\t\t\t\t\t\tcolor = BloomColor(color, emission_gain);\n\t\t\t\t\t\tcolor = color * col.rgb;\n\t\t\t\t\t\tcolor = color * col.a;\n\t\t\t\t\t\tcolor = SrgbToLinear(color);\n\t\t\t\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t\t\t\t}\n\t\t\t\t`,\n        side: 2,\n        transparent: true,\n        depthFunc: 2,\n        depthWrite: true,\n        depthTest: false,\n        blending: 5,\n        blendDst: 201,\n        blendDstAlpha: 201,\n        blendEquation: 100,\n        blendEquationAlpha: 100,\n        blendSrc: 201,\n        blendSrcAlpha: 201\n      }\n    };\n  }\n  return shaders;\n}\nfunction getMaterial(GUID) {\n  const name = BRUSH_LIST_ARRAY[GUID];\n  switch (name) {\n    case 'Light':\n      return new RawShaderMaterial(getShaders().Light);\n    default:\n      return new MeshBasicMaterial({\n        vertexColors: true,\n        side: DoubleSide\n      });\n  }\n}\nexport { TiltLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Color","DoubleSide","FileLoader","Group","Loader","Mesh","MeshBasicMaterial","RawShaderMaterial","TextureLoader","Quaternion","Vector3","fflate","TiltLoader","load","url","onLoad","onProgress","onError","scope","loader","manager","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","group","zip","unzipSync","Uint8Array","slice","metadata","JSON","strFromU8","data","DataView","num_strokes","getInt32","brushes","offset","i","brush_index","brush_color","getFloat32","brush_size","stroke_mask","getUint32","controlpoint_mask","offset_stroke_mask","offset_controlpoint_mask","j","byte","num_control_points","positions","Float32Array","quaternions","k","length","push","geometry","StrokeGeometry","material","getMaterial","BrushIndex","add","constructor","strokes","vertices","colors","uvs","position","prevPosition","quaternion","prevQuaternion","vector1","vector2","vector3","vector4","color","stroke","size","rgba","alpha","fromArray","convertSRGBToLinear","l","set","applyQuaternion","x","y","z","copy","p1","p2","setAttribute","BRUSH_LIST_ARRAY","common","shaders","getShaders","uniforms","mainTex","value","alphaTest","emission_gain","vertexShader","LinearToSrgb","hsv","fragmentShader","BloomColor","SrgbToLinear","side","transparent","depthFunc","depthWrite","depthTest","blending","blendDst","blendDstAlpha","blendEquation","blendEquationAlpha","blendSrc","blendSrcAlpha","GUID","name","Light","vertexColors"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/loaders/TiltLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tDoubleSide,\n\tFileLoader,\n\tGroup,\n\tLoader,\n\tMesh,\n\tMeshBasicMaterial,\n\tRawShaderMaterial,\n\tTextureLoader,\n\tQuaternion,\n\tVector3\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\nclass TiltLoader extends Loader {\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( buffer ) {\n\n\t\tconst group = new Group();\n\t\t// https://docs.google.com/document/d/11ZsHozYn9FnWG7y3s3WAyKIACfbfwb4PbaS8cZ_xjvo/edit#\n\n\t\tconst zip = fflate.unzipSync( new Uint8Array( buffer.slice( 16 ) ) );\n\n\t\t/*\n\t\tconst thumbnail = zip[ 'thumbnail.png' ].buffer;\n\t\tconst img = document.createElement( 'img' );\n\t\timg.src = URL.createObjectURL( new Blob( [ thumbnail ] ) );\n\t\tdocument.body.appendChild( img );\n\t\t*/\n\n\t\tconst metadata = JSON.parse( fflate.strFromU8( zip[ 'metadata.json' ] ) );\n\n\t\t/*\n\t\tconst blob = new Blob( [ zip[ 'data.sketch' ].buffer ], { type: 'application/octet-stream' } );\n\t\twindow.open( URL.createObjectURL( blob ) );\n\t\t*/\n\n\t\tconst data = new DataView( zip[ 'data.sketch' ].buffer );\n\n\t\tconst num_strokes = data.getInt32( 16, true );\n\n\t\tconst brushes = {};\n\n\t\tlet offset = 20;\n\n\t\tfor ( let i = 0; i < num_strokes; i ++ ) {\n\n\t\t\tconst brush_index = data.getInt32( offset, true );\n\n\t\t\tconst brush_color = [\n\t\t\t\tdata.getFloat32( offset + 4, true ),\n\t\t\t\tdata.getFloat32( offset + 8, true ),\n\t\t\t\tdata.getFloat32( offset + 12, true ),\n\t\t\t\tdata.getFloat32( offset + 16, true )\n\t\t\t];\n\t\t\tconst brush_size = data.getFloat32( offset + 20, true );\n\t\t\tconst stroke_mask = data.getUint32( offset + 24, true );\n\t\t\tconst controlpoint_mask = data.getUint32( offset + 28, true );\n\n\t\t\tlet offset_stroke_mask = 0;\n\t\t\tlet offset_controlpoint_mask = 0;\n\n\t\t\tfor ( let j = 0; j < 4; j ++ ) {\n\n\t\t\t\t// TOFIX: I don't understand these masks yet\n\n\t\t\t\tconst byte = 1 << j;\n\t\t\t\tif ( ( stroke_mask & byte ) > 0 ) offset_stroke_mask += 4;\n\t\t\t\tif ( ( controlpoint_mask & byte ) > 0 ) offset_controlpoint_mask += 4;\n\n\t\t\t}\n\n\t\t\t// console.log( { brush_index, brush_color, brush_size, stroke_mask, controlpoint_mask } );\n\t\t\t// console.log( offset_stroke_mask, offset_controlpoint_mask );\n\n\t\t\toffset = offset + 28 + offset_stroke_mask + 4; // TOFIX: This is wrong\n\n\t\t\tconst num_control_points = data.getInt32( offset, true );\n\n\t\t\t// console.log( { num_control_points } );\n\n\t\t\tconst positions = new Float32Array( num_control_points * 3 );\n\t\t\tconst quaternions = new Float32Array( num_control_points * 4 );\n\n\t\t\toffset = offset + 4;\n\n\t\t\tfor ( let j = 0, k = 0; j < positions.length; j += 3, k += 4 ) {\n\n\t\t\t\tpositions[ j + 0 ] = data.getFloat32( offset + 0, true );\n\t\t\t\tpositions[ j + 1 ] = data.getFloat32( offset + 4, true );\n\t\t\t\tpositions[ j + 2 ] = data.getFloat32( offset + 8, true );\n\n\t\t\t\tquaternions[ k + 0 ] = data.getFloat32( offset + 12, true );\n\t\t\t\tquaternions[ k + 1 ] = data.getFloat32( offset + 16, true );\n\t\t\t\tquaternions[ k + 2 ] = data.getFloat32( offset + 20, true );\n\t\t\t\tquaternions[ k + 3 ] = data.getFloat32( offset + 24, true );\n\n\t\t\t\toffset = offset + 28 + offset_controlpoint_mask; // TOFIX: This is wrong\n\n\t\t\t}\n\n\t\t\tif ( brush_index in brushes === false ) {\n\n\t\t\t\tbrushes[ brush_index ] = [];\n\n\t\t\t}\n\n\t\t\tbrushes[ brush_index ].push( [ positions, quaternions, brush_size, brush_color ] );\n\n\t\t}\n\n\t\tfor ( const brush_index in brushes ) {\n\n\t\t\tconst geometry = new StrokeGeometry( brushes[ brush_index ] );\n\t\t\tconst material = getMaterial( metadata.BrushIndex[ brush_index ] );\n\n\t\t\tgroup.add( new Mesh( geometry, material ) );\n\n\t\t}\n\n\t\treturn group;\n\n\t}\n\n}\n\nclass StrokeGeometry extends BufferGeometry {\n\n\tconstructor( strokes ) {\n\n\t\tsuper();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\t\tconst uvs = [];\n\n\t\tconst position = new Vector3();\n\t\tconst prevPosition = new Vector3();\n\n\t\tconst quaternion = new Quaternion();\n\t\tconst prevQuaternion = new Quaternion();\n\n\t\tconst vector1 = new Vector3();\n\t\tconst vector2 = new Vector3();\n\t\tconst vector3 = new Vector3();\n\t\tconst vector4 = new Vector3();\n\n\t\tconst color = new Color();\n\n\t\t// size = size / 2;\n\n\t\tfor ( const k in strokes ) {\n\n\t\t\tconst stroke = strokes[ k ];\n\t\t\tconst positions = stroke[ 0 ];\n\t\t\tconst quaternions = stroke[ 1 ];\n\t\t\tconst size = stroke[ 2 ];\n\t\t\tconst rgba = stroke[ 3 ];\n\t\t\tconst alpha = stroke[ 3 ][ 3 ];\n\n\t\t\tcolor.fromArray( rgba ).convertSRGBToLinear();\n\n\t\t\tprevPosition.fromArray( positions, 0 );\n\t\t\tprevQuaternion.fromArray( quaternions, 0 );\n\n\t\t\tfor ( let i = 3, j = 4, l = positions.length; i < l; i += 3, j += 4 ) {\n\n\t\t\t\tposition.fromArray( positions, i );\n\t\t\t\tquaternion.fromArray( quaternions, j );\n\n\t\t\t\tvector1.set( - size, 0, 0 );\n\t\t\t\tvector1.applyQuaternion( quaternion );\n\t\t\t\tvector1.add( position );\n\n\t\t\t\tvector2.set( size, 0, 0 );\n\t\t\t\tvector2.applyQuaternion( quaternion );\n\t\t\t\tvector2.add( position );\n\n\t\t\t\tvector3.set( size, 0, 0 );\n\t\t\t\tvector3.applyQuaternion( prevQuaternion );\n\t\t\t\tvector3.add( prevPosition );\n\n\t\t\t\tvector4.set( - size, 0, 0 );\n\t\t\t\tvector4.applyQuaternion( prevQuaternion );\n\t\t\t\tvector4.add( prevPosition );\n\n\t\t\t\tvertices.push( vector1.x, vector1.y, - vector1.z );\n\t\t\t\tvertices.push( vector2.x, vector2.y, - vector2.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, - vector4.z );\n\n\t\t\t\tvertices.push( vector2.x, vector2.y, - vector2.z );\n\t\t\t\tvertices.push( vector3.x, vector3.y, - vector3.z );\n\t\t\t\tvertices.push( vector4.x, vector4.y, - vector4.z );\n\n\t\t\t\tprevPosition.copy( position );\n\t\t\t\tprevQuaternion.copy( quaternion );\n\n\t\t\t\tcolors.push( ...color, alpha );\n\t\t\t\tcolors.push( ...color, alpha );\n\t\t\t\tcolors.push( ...color, alpha );\n\n\t\t\t\tcolors.push( ...color, alpha );\n\t\t\t\tcolors.push( ...color, alpha );\n\t\t\t\tcolors.push( ...color, alpha );\n\n\t\t\t\tconst p1 = i / l;\n\t\t\t\tconst p2 = ( i - 3 ) / l;\n\n\t\t\t\tuvs.push( p1, 0 );\n\t\t\t\tuvs.push( p1, 1 );\n\t\t\t\tuvs.push( p2, 0 );\n\n\t\t\t\tuvs.push( p1, 1 );\n\t\t\t\tuvs.push( p2, 1 );\n\t\t\t\tuvs.push( p2, 0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new BufferAttribute( new Float32Array( vertices ), 3 ) );\n\t\tthis.setAttribute( 'color', new BufferAttribute( new Float32Array( colors ), 4 ) );\n\t\tthis.setAttribute( 'uv', new BufferAttribute( new Float32Array( uvs ), 2 ) );\n\n\t}\n\n}\n\nconst BRUSH_LIST_ARRAY = {\n\t'89d104cd-d012-426b-b5b3-bbaee63ac43c': 'Bubbles',\n\t'700f3aa8-9a7c-2384-8b8a-ea028905dd8c': 'CelVinyl',\n\t'0f0ff7b2-a677-45eb-a7d6-0cd7206f4816': 'ChromaticWave',\n\t'1161af82-50cf-47db-9706-0c3576d43c43': 'CoarseBristles',\n\t'79168f10-6961-464a-8be1-57ed364c5600': 'CoarseBristlesSingleSided',\n\t'1caa6d7d-f015-3f54-3a4b-8b5354d39f81': 'Comet',\n\t'c8313697-2563-47fc-832e-290f4c04b901': 'DiamondHull',\n\t'4391aaaa-df73-4396-9e33-31e4e4930b27': 'Disco',\n\t'd1d991f2-e7a0-4cf1-b328-f57e915e6260': 'DotMarker',\n\t'6a1cf9f9-032c-45ec-9b1d-a6680bee30f7': 'Dots',\n\t'0d3889f3-3ede-470c-8af4-f44813306126': 'DoubleTaperedFlat',\n\t'0d3889f3-3ede-470c-8af4-de4813306126': 'DoubleTaperedMarker',\n\t'd0262945-853c-4481-9cbd-88586bed93cb': 'DuctTape',\n\t'3ca16e2f-bdcd-4da2-8631-dcef342f40f1': 'DuctTapeSingleSided',\n\t'f6e85de3-6dcc-4e7f-87fd-cee8c3d25d51': 'Electricity',\n\t'02ffb866-7fb2-4d15-b761-1012cefb1360': 'Embers',\n\t'cb92b597-94ca-4255-b017-0e3f42f12f9e': 'Fire',\n\t'2d35bcf0-e4d8-452c-97b1-3311be063130': 'Flat',\n\t'55303bc4-c749-4a72-98d9-d23e68e76e18': 'FlatDeprecated',\n\t'280c0a7a-aad8-416c-a7d2-df63d129ca70': 'FlatSingleSided',\n\t'cf019139-d41c-4eb0-a1d0-5cf54b0a42f3': 'Highlighter',\n\t'6a1cf9f9-032c-45ec-9b6e-a6680bee32e9': 'HyperGrid',\n\t'dce872c2-7b49-4684-b59b-c45387949c5c': 'Hypercolor',\n\t'e8ef32b1-baa8-460a-9c2c-9cf8506794f5': 'HypercolorSingleSided',\n\t'2f212815-f4d3-c1a4-681a-feeaf9c6dc37': 'Icing',\n\t'f5c336cf-5108-4b40-ade9-c687504385ab': 'Ink',\n\t'c0012095-3ffd-4040-8ee1-fc180d346eaa': 'InkSingleSided',\n\t'4a76a27a-44d8-4bfe-9a8c-713749a499b0': 'Leaves',\n\t'ea19de07-d0c0-4484-9198-18489a3c1487': 'LeavesSingleSided',\n\t'2241cd32-8ba2-48a5-9ee7-2caef7e9ed62': 'Light',\n\t'4391aaaa-df81-4396-9e33-31e4e4930b27': 'LightWire',\n\t'd381e0f5-3def-4a0d-8853-31e9200bcbda': 'Lofted',\n\t'429ed64a-4e97-4466-84d3-145a861ef684': 'Marker',\n\t'79348357-432d-4746-8e29-0e25c112e3aa': 'MatteHull',\n\t'b2ffef01-eaaa-4ab5-aa64-95a2c4f5dbc6': 'NeonPulse',\n\t'f72ec0e7-a844-4e38-82e3-140c44772699': 'OilPaint',\n\t'c515dad7-4393-4681-81ad-162ef052241b': 'OilPaintSingleSided',\n\t'f1114e2e-eb8d-4fde-915a-6e653b54e9f5': 'Paper',\n\t'759f1ebd-20cd-4720-8d41-234e0da63716': 'PaperSingleSided',\n\t'e0abbc80-0f80-e854-4970-8924a0863dcc': 'Petal',\n\t'c33714d1-b2f9-412e-bd50-1884c9d46336': 'Plasma',\n\t'ad1ad437-76e2-450d-a23a-e17f8310b960': 'Rainbow',\n\t'faaa4d44-fcfb-4177-96be-753ac0421ba3': 'ShinyHull',\n\t'70d79cca-b159-4f35-990c-f02193947fe8': 'Smoke',\n\t'd902ed8b-d0d1-476c-a8de-878a79e3a34c': 'Snow',\n\t'accb32f5-4509-454f-93f8-1df3fd31df1b': 'SoftHighlighter',\n\t'cf7f0059-7aeb-53a4-2b67-c83d863a9ffa': 'Spikes',\n\t'8dc4a70c-d558-4efd-a5ed-d4e860f40dc3': 'Splatter',\n\t'7a1c8107-50c5-4b70-9a39-421576d6617e': 'SplatterSingleSided',\n\t'0eb4db27-3f82-408d-b5a1-19ebd7d5b711': 'Stars',\n\t'44bb800a-fbc3-4592-8426-94ecb05ddec3': 'Streamers',\n\t'0077f88c-d93a-42f3-b59b-b31c50cdb414': 'Taffy',\n\t'b468c1fb-f254-41ed-8ec9-57030bc5660c': 'TaperedFlat',\n\t'c8ccb53d-ae13-45ef-8afb-b730d81394eb': 'TaperedFlatSingleSided',\n\t'd90c6ad8-af0f-4b54-b422-e0f92abe1b3c': 'TaperedMarker',\n\t'1a26b8c0-8a07-4f8a-9fac-d2ef36e0cad0': 'TaperedMarker_Flat',\n\t'75b32cf0-fdd6-4d89-a64b-e2a00b247b0f': 'ThickPaint',\n\t'fdf0326a-c0d1-4fed-b101-9db0ff6d071f': 'ThickPaintSingleSided',\n\t'4391385a-df73-4396-9e33-31e4e4930b27': 'Toon',\n\t'a8fea537-da7c-4d4b-817f-24f074725d6d': 'UnlitHull',\n\t'd229d335-c334-495a-a801-660ac8a87360': 'VelvetInk',\n\t'10201aa3-ebc2-42d8-84b7-2e63f6eeb8ab': 'Waveform',\n\t'b67c0e81-ce6d-40a8-aeb0-ef036b081aa3': 'WetPaint',\n\t'dea67637-cd1a-27e4-c9b1-52f4bbcb84e5': 'WetPaintSingleSided',\n\t'5347acf0-a8e2-47b6-8346-30c70719d763': 'WigglyGraphite',\n\t'e814fef1-97fd-7194-4a2f-50c2bb918be2': 'WigglyGraphiteSingleSided',\n\t'4391385a-cf83-4396-9e33-31e4e4930b27': 'Wire'\n};\n\nconst common = {\n\n\t'colors': {\n\n\t\t'BloomColor': `\n\t\t\tvec3 BloomColor(vec3 color, float gain) {\n\t\t\t\t// Guarantee that there's at least a little bit of all 3 channels.\n\t\t\t\t// This makes fully-saturated strokes (which only have 2 non-zero\n\t\t\t\t// color channels) eventually clip to white rather than to a secondary.\n\t\t\t\tfloat cmin = length(color.rgb) * .05;\n\t\t\t\tcolor.rgb = max(color.rgb, vec3(cmin, cmin, cmin));\n\t\t\t\t// If we try to remove this pow() from .a, it brightens up\n\t\t\t\t// pressure-sensitive strokes; looks better as-is.\n\t\t\t\tcolor = pow(color, vec3(2.2));\n\t\t\t\tcolor.rgb *= 2. * exp(gain * 10.);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n\n\t\t'LinearToSrgb': `\n\t\t\tvec3 LinearToSrgb(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 linearColor = color.rgb;\n\t\t\t\tvec3 S1 = sqrt(linearColor);\n\t\t\t\tvec3 S2 = sqrt(S1);\n\t\t\t\tvec3 S3 = sqrt(S2);\n\t\t\t\tcolor.rgb = 0.662002687 * S1 + 0.684122060 * S2 - 0.323583601 * S3 - 0.0225411470 * linearColor;\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`,\n\n\t\t'hsv': `\n\t\t\t// uniform sampler2D lookupTex;\n\t\t\tvec4 lookup(vec4 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 lookup(vec3 textureColor) {\n\t\t\t\treturn textureColor;\n\t\t\t}\n\n\t\t\tvec3 hsv2rgb( vec3 hsv ) {\n\t\t\t\tvec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\t\t\t\treturn hsv.z * mix( vec3(1.0), rgb, hsv.y);\n\t\t\t}\n\n\t\t\tvec3 rgb2hsv( vec3 rgb ) {\n\t\t\t\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\t\t\t\tvec4 p = mix(vec4(rgb.bg, K.wz), vec4(rgb.gb, K.xy), step(rgb.b, rgb.g));\n\t\t\t\tvec4 q = mix(vec4(p.xyw, rgb.r), vec4(rgb.r, p.yzx), step(p.x, rgb.r));\n\n\t\t\t\tfloat d = q.x - min(q.w, q.y);\n\t\t\t\tfloat e = 1.0e-10;\n\n\t\t\t\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n\t\t\t}\n\t\t`,\n\n\t\t'SrgbToLinear': `\n\t\t\tvec3 SrgbToLinear(vec3 color) {\n\t\t\t\t// Approximation http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\n\t\t\t\tvec3 sRGB = color.rgb;\n\t\t\t\tcolor.rgb = sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n\t\t\t\treturn color;\n\t\t\t}\n\t\t`\n\n\t}\n\n};\n\nlet shaders = null;\n\nfunction getShaders() {\n\n\tif ( shaders === null ) {\n\n\t\tconst loader = new TextureLoader().setPath( './textures/tiltbrush/' );\n\n\t\tshaders = {\n\t\t\t'Light': {\n\t\t\t\tuniforms: {\n\t\t\t\t\tmainTex: { value: loader.load( 'Light.webp' ) },\n\t\t\t\t\talphaTest: { value: 0.067 },\n\t\t\t\t\temission_gain: { value: 0.45 },\n\t\t\t\t\talpha: { value: 1 },\n\t\t\t\t},\n\t\t\t\tvertexShader: `\n\t\t\t\t\tprecision highp float;\n\t\t\t\t\tprecision highp int;\n\n\t\t\t\t\tattribute vec2 uv;\n\t\t\t\t\tattribute vec4 color;\n\t\t\t\t\tattribute vec3 position;\n\n\t\t\t\t\tuniform mat4 modelMatrix;\n\t\t\t\t\tuniform mat4 modelViewMatrix;\n\t\t\t\t\tuniform mat4 projectionMatrix;\n\t\t\t\t\tuniform mat4 viewMatrix;\n\t\t\t\t\tuniform mat3 normalMatrix;\n\t\t\t\t\tuniform vec3 cameraPosition;\n\n\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tvarying vec3 vColor;\n\n\t\t\t\t\t${ common.colors.LinearToSrgb }\n\t\t\t\t\t${ common.colors.hsv }\n\n\t\t\t\t\tvoid main() {\n\n\t\t\t\t\t\tvUv = uv;\n\n\t\t\t\t\t\tvColor = lookup(color.rgb);\n\n\t\t\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tfragmentShader: `\n\t\t\t\t\tprecision highp float;\n\t\t\t\t\tprecision highp int;\n\n\t\t\t\t\tuniform float emission_gain;\n\n\t\t\t\t\tuniform sampler2D mainTex;\n\t\t\t\t\tuniform float alphaTest;\n\n\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tvarying vec3 vColor;\n\n\t\t\t\t\t${ common.colors.BloomColor }\n\t\t\t\t\t${ common.colors.SrgbToLinear }\n\n\t\t\t\t\tvoid main(){\n\t\t\t\t\t\tvec4 col = texture2D(mainTex, vUv);\n\t\t\t\t\t\tvec3 color = vColor;\n\t\t\t\t\t\tcolor = BloomColor(color, emission_gain);\n\t\t\t\t\t\tcolor = color * col.rgb;\n\t\t\t\t\t\tcolor = color * col.a;\n\t\t\t\t\t\tcolor = SrgbToLinear(color);\n\t\t\t\t\t\tgl_FragColor = vec4(color, 1.0);\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tside: 2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthFunc: 2,\n\t\t\t\tdepthWrite: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tblending: 5,\n\t\t\t\tblendDst: 201,\n\t\t\t\tblendDstAlpha: 201,\n\t\t\t\tblendEquation: 100,\n\t\t\t\tblendEquationAlpha: 100,\n\t\t\t\tblendSrc: 201,\n\t\t\t\tblendSrcAlpha: 201,\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\treturn shaders;\n\n}\n\nfunction getMaterial( GUID ) {\n\n\tconst name = BRUSH_LIST_ARRAY[ GUID ];\n\n\tswitch ( name ) {\n\n\t\tcase 'Light':\n\t\t\treturn new RawShaderMaterial( getShaders().Light );\n\n\t\tdefault:\n\t\t\treturn new MeshBasicMaterial( { vertexColors: true, side: DoubleSide } );\n\n\t}\n\n}\n\nexport { TiltLoader };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}