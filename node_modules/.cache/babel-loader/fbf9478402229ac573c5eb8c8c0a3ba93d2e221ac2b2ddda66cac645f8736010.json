{"ast":null,"code":"import { Mesh, ShaderMaterial, SphereGeometry } from 'three';\nclass LightProbeHelper extends Mesh {\n  constructor(lightProbe, size) {\n    const material = new ShaderMaterial({\n      type: 'LightProbeHelperMaterial',\n      uniforms: {\n        sh: {\n          value: lightProbe.sh.coefficients\n        },\n        // by reference\n\n        intensity: {\n          value: lightProbe.intensity\n        }\n      },\n      vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tvNormal = normalize( normalMatrix * normal );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['#define RECIPROCAL_PI 0.318309886', 'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {', '\t// matrix is assumed to be orthogonal', '\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );', '}', '// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf', 'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {', '\t// normal is assumed to have unit length', '\tfloat x = normal.x, y = normal.y, z = normal.z;', '\t// band 0', '\tvec3 result = shCoefficients[ 0 ] * 0.886227;', '\t// band 1', '\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;', '\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;', '\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;', '\t// band 2', '\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;', '\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;', '\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );', '\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;', '\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );', '\treturn result;', '}', 'uniform vec3 sh[ 9 ]; // sh coefficients', 'uniform float intensity; // light probe intensity', 'varying vec3 vNormal;', 'void main() {', '\tvec3 normal = normalize( vNormal );', '\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );', '\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );', '\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;', '\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );', '}'].join('\\n')\n    });\n    const geometry = new SphereGeometry(1, 32, 16);\n    super(geometry, material);\n    this.lightProbe = lightProbe;\n    this.size = size;\n    this.type = 'LightProbeHelper';\n    this.onBeforeRender();\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n  onBeforeRender() {\n    this.position.copy(this.lightProbe.position);\n    this.scale.set(1, 1, 1).multiplyScalar(this.size);\n    this.material.uniforms.intensity.value = this.lightProbe.intensity;\n  }\n}\nexport { LightProbeHelper };","map":{"version":3,"names":["Mesh","ShaderMaterial","SphereGeometry","LightProbeHelper","constructor","lightProbe","size","material","type","uniforms","sh","value","coefficients","intensity","vertexShader","join","fragmentShader","geometry","onBeforeRender","dispose","position","copy","scale","set","multiplyScalar"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/helpers/LightProbeHelper.js"],"sourcesContent":["import {\n\tMesh,\n\tShaderMaterial,\n\tSphereGeometry\n} from 'three';\n\nclass LightProbeHelper extends Mesh {\n\n\tconstructor( lightProbe, size ) {\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\ttype: 'LightProbeHelperMaterial',\n\n\t\t\tuniforms: {\n\n\t\t\t\tsh: { value: lightProbe.sh.coefficients }, // by reference\n\n\t\t\t\tintensity: { value: lightProbe.intensity }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\n\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}',\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\n\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\n\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\n\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\n\n\t\t\t\t'}',\n\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\n\n\t\t\t\t'\t// normal is assumed to have unit length',\n\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\n\n\t\t\t\t'\t// band 0',\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\n\n\t\t\t\t'\t// band 1',\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\n\n\t\t\t\t'\t// band 2',\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\n\n\t\t\t\t'\treturn result;',\n\n\t\t\t\t'}',\n\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\n\n\t\t\t\t'uniform float intensity; // light probe intensity',\n\n\t\t\t\t'varying vec3 vNormal;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\n\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\n\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\n\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\n\n\t\t\t\t'\tgl_FragColor = linearToOutputTexel( vec4( outgoingLight, 1.0 ) );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tconst geometry = new SphereGeometry( 1, 32, 16 );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.lightProbe = lightProbe;\n\t\tthis.size = size;\n\t\tthis.type = 'LightProbeHelper';\n\n\t\tthis.onBeforeRender();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tonBeforeRender() {\n\n\t\tthis.position.copy( this.lightProbe.position );\n\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\n\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\n\n\t}\n\n}\n\nexport { LightProbeHelper };\n"],"mappings":"AAAA,SACCA,IAAI,EACJC,cAAc,EACdC,cAAc,QACR,OAAO;AAEd,MAAMC,gBAAgB,SAASH,IAAI,CAAC;EAEnCI,WAAWA,CAAEC,UAAU,EAAEC,IAAI,EAAG;IAE/B,MAAMC,QAAQ,GAAG,IAAIN,cAAc,CAAE;MAEpCO,IAAI,EAAE,0BAA0B;MAEhCC,QAAQ,EAAE;QAETC,EAAE,EAAE;UAAEC,KAAK,EAAEN,UAAU,CAACK,EAAE,CAACE;QAAa,CAAC;QAAE;;QAE3CC,SAAS,EAAE;UAAEF,KAAK,EAAEN,UAAU,CAACQ;QAAU;MAE1C,CAAC;MAEDC,YAAY,EAAE,CAEb,uBAAuB,EAEvB,eAAe,EAEf,gDAAgD,EAEhD,4EAA4E,EAE5E,GAAG,CAEH,CAACC,IAAI,CAAE,IAAK,CAAC;MAEdC,cAAc,EAAE,CAEf,mCAAmC,EAEnC,oEAAoE,EAEpE,wCAAwC,EAExC,4DAA4D,EAE5D,GAAG,EAEH,mEAAmE,EACnE,yEAAyE,EAEzE,2CAA2C,EAE3C,kDAAkD,EAElD,YAAY,EACZ,gDAAgD,EAEhD,YAAY,EACZ,sDAAsD,EACtD,sDAAsD,EACtD,sDAAsD,EAEtD,YAAY,EACZ,0DAA0D,EAC1D,0DAA0D,EAC1D,mEAAmE,EACnE,0DAA0D,EAC1D,gEAAgE,EAEhE,iBAAiB,EAEjB,GAAG,EAEH,0CAA0C,EAE1C,mDAAmD,EAEnD,uBAAuB,EAEvB,eAAe,EAEf,sCAAsC,EAEtC,sEAAsE,EAEtE,0DAA0D,EAE1D,+DAA+D,EAE/D,oEAAoE,EAEpE,GAAG,CAEH,CAACD,IAAI,CAAE,IAAK;IAEd,CAAE,CAAC;IAEH,MAAME,QAAQ,GAAG,IAAIf,cAAc,CAAE,CAAC,EAAE,EAAE,EAAE,EAAG,CAAC;IAEhD,KAAK,CAAEe,QAAQ,EAAEV,QAAS,CAAC;IAE3B,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAG,kBAAkB;IAE9B,IAAI,CAACU,cAAc,CAAC,CAAC;EAEtB;EAEAC,OAAOA,CAAA,EAAG;IAET,IAAI,CAACF,QAAQ,CAACE,OAAO,CAAC,CAAC;IACvB,IAAI,CAACZ,QAAQ,CAACY,OAAO,CAAC,CAAC;EAExB;EAEAD,cAAcA,CAAA,EAAG;IAEhB,IAAI,CAACE,QAAQ,CAACC,IAAI,CAAE,IAAI,CAAChB,UAAU,CAACe,QAAS,CAAC;IAE9C,IAAI,CAACE,KAAK,CAACC,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC,CAACC,cAAc,CAAE,IAAI,CAAClB,IAAK,CAAC;IAErD,IAAI,CAACC,QAAQ,CAACE,QAAQ,CAACI,SAAS,CAACF,KAAK,GAAG,IAAI,CAACN,UAAU,CAACQ,SAAS;EAEnE;AAED;AAEA,SAASV,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}