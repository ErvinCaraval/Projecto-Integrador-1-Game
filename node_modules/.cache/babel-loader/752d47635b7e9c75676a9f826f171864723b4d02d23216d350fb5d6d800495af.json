{"ast":null,"code":"import { AddEquation, Color, CustomBlending, DataTexture, DepthTexture, DepthStencilFormat, DstAlphaFactor, DstColorFactor, HalfFloatType, MeshNormalMaterial, NearestFilter, NoBlending, RepeatWrapping, RGBAFormat, ShaderMaterial, UniformsUtils, UnsignedByteType, UnsignedInt248Type, WebGLRenderTarget, ZeroFactor } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { generateMagicSquareNoise, GTAOShader, GTAODepthShader, GTAOBlendShader } from '../shaders/GTAOShader.js';\nimport { generatePdSamplePointInitializer, PoissonDenoiseShader } from '../shaders/PoissonDenoiseShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nclass GTAOPass extends Pass {\n  constructor(scene, camera, width, height, parameters, aoParameters, pdParameters) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.camera = camera;\n    this.scene = scene;\n    this.output = 0;\n    this._renderGBuffer = true;\n    this._visibilityCache = new Map();\n    this.blendIntensity = 1.;\n    this.pdRings = 2.;\n    this.pdRadiusExponent = 2.;\n    this.pdSamples = 16;\n    this.gtaoNoiseTexture = generateMagicSquareNoise();\n    this.pdNoiseTexture = this.generateNoise();\n    this.gtaoRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      type: HalfFloatType\n    });\n    this.pdRenderTarget = this.gtaoRenderTarget.clone();\n    this.gtaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, GTAOShader.defines),\n      uniforms: UniformsUtils.clone(GTAOShader.uniforms),\n      vertexShader: GTAOShader.vertexShader,\n      fragmentShader: GTAOShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.gtaoMaterial.defines.PERSPECTIVE_CAMERA = this.camera.isPerspectiveCamera ? 1 : 0;\n    this.gtaoMaterial.uniforms.tNoise.value = this.gtaoNoiseTexture;\n    this.gtaoMaterial.uniforms.resolution.value.set(this.width, this.height);\n    this.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n    this.pdMaterial = new ShaderMaterial({\n      defines: Object.assign({}, PoissonDenoiseShader.defines),\n      uniforms: UniformsUtils.clone(PoissonDenoiseShader.uniforms),\n      vertexShader: PoissonDenoiseShader.vertexShader,\n      fragmentShader: PoissonDenoiseShader.fragmentShader,\n      depthTest: false,\n      depthWrite: false\n    });\n    this.pdMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n    this.pdMaterial.uniforms.tNoise.value = this.pdNoiseTexture;\n    this.pdMaterial.uniforms.resolution.value.set(this.width, this.height);\n    this.pdMaterial.uniforms.lumaPhi.value = 10;\n    this.pdMaterial.uniforms.depthPhi.value = 2;\n    this.pdMaterial.uniforms.normalPhi.value = 3;\n    this.pdMaterial.uniforms.radius.value = 8;\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, GTAODepthShader.defines),\n      uniforms: UniformsUtils.clone(GTAODepthShader.uniforms),\n      vertexShader: GTAODepthShader.vertexShader,\n      fragmentShader: GTAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.blendMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(GTAOBlendShader.uniforms),\n      vertexShader: GTAOBlendShader.vertexShader,\n      fragmentShader: GTAOBlendShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blending: CustomBlending,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n    this.setGBuffer(parameters ? parameters.depthTexture : undefined, parameters ? parameters.normalTexture : undefined);\n    if (aoParameters !== undefined) {\n      this.updateGtaoMaterial(aoParameters);\n    }\n    if (pdParameters !== undefined) {\n      this.updatePdMaterial(pdParameters);\n    }\n  }\n  dispose() {\n    this.gtaoNoiseTexture.dispose();\n    this.pdNoiseTexture.dispose();\n    this.normalRenderTarget.dispose();\n    this.gtaoRenderTarget.dispose();\n    this.pdRenderTarget.dispose();\n    this.normalMaterial.dispose();\n    this.pdMaterial.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  get gtaoMap() {\n    return this.pdRenderTarget.texture;\n  }\n  setGBuffer(depthTexture, normalTexture) {\n    if (depthTexture !== undefined) {\n      this.depthTexture = depthTexture;\n      this.normalTexture = normalTexture;\n      this._renderGBuffer = false;\n    } else {\n      this.depthTexture = new DepthTexture();\n      this.depthTexture.format = DepthStencilFormat;\n      this.depthTexture.type = UnsignedInt248Type;\n      this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n        minFilter: NearestFilter,\n        magFilter: NearestFilter,\n        type: HalfFloatType,\n        depthTexture: this.depthTexture\n      });\n      this.normalTexture = this.normalRenderTarget.texture;\n      this._renderGBuffer = true;\n    }\n    const normalVectorType = this.normalTexture ? 1 : 0;\n    const depthValueSource = this.depthTexture === this.normalTexture ? 'w' : 'x';\n    this.gtaoMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n    this.gtaoMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n    this.gtaoMaterial.uniforms.tNormal.value = this.normalTexture;\n    this.gtaoMaterial.uniforms.tDepth.value = this.depthTexture;\n    this.pdMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n    this.pdMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n    this.pdMaterial.uniforms.tNormal.value = this.normalTexture;\n    this.pdMaterial.uniforms.tDepth.value = this.depthTexture;\n    this.depthRenderMaterial.uniforms.tDepth.value = this.normalRenderTarget.depthTexture;\n  }\n  setSceneClipBox(box) {\n    if (box) {\n      this.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX !== 1;\n      this.gtaoMaterial.defines.SCENE_CLIP_BOX = 1;\n      this.gtaoMaterial.uniforms.sceneBoxMin.value.copy(box.min);\n      this.gtaoMaterial.uniforms.sceneBoxMax.value.copy(box.max);\n    } else {\n      this.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX === 0;\n      this.gtaoMaterial.defines.SCENE_CLIP_BOX = 0;\n    }\n  }\n  updateGtaoMaterial(parameters) {\n    if (parameters.radius !== undefined) {\n      this.gtaoMaterial.uniforms.radius.value = parameters.radius;\n    }\n    if (parameters.distanceExponent !== undefined) {\n      this.gtaoMaterial.uniforms.distanceExponent.value = parameters.distanceExponent;\n    }\n    if (parameters.thickness !== undefined) {\n      this.gtaoMaterial.uniforms.thickness.value = parameters.thickness;\n    }\n    if (parameters.distanceFallOff !== undefined) {\n      this.gtaoMaterial.uniforms.distanceFallOff.value = parameters.distanceFallOff;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n    if (parameters.scale !== undefined) {\n      this.gtaoMaterial.uniforms.scale.value = parameters.scale;\n    }\n    if (parameters.samples !== undefined && parameters.samples !== this.gtaoMaterial.defines.SAMPLES) {\n      this.gtaoMaterial.defines.SAMPLES = parameters.samples;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n    if (parameters.screenSpaceRadius !== undefined && (parameters.screenSpaceRadius ? 1 : 0) !== this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS) {\n      this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS = parameters.screenSpaceRadius ? 1 : 0;\n      this.gtaoMaterial.needsUpdate = true;\n    }\n  }\n  updatePdMaterial(parameters) {\n    let updateShader = false;\n    if (parameters.lumaPhi !== undefined) {\n      this.pdMaterial.uniforms.lumaPhi.value = parameters.lumaPhi;\n    }\n    if (parameters.depthPhi !== undefined) {\n      this.pdMaterial.uniforms.depthPhi.value = parameters.depthPhi;\n    }\n    if (parameters.normalPhi !== undefined) {\n      this.pdMaterial.uniforms.normalPhi.value = parameters.normalPhi;\n    }\n    if (parameters.radius !== undefined && parameters.radius !== this.radius) {\n      this.pdMaterial.uniforms.radius.value = parameters.radius;\n    }\n    if (parameters.radiusExponent !== undefined && parameters.radiusExponent !== this.pdRadiusExponent) {\n      this.pdRadiusExponent = parameters.radiusExponent;\n      updateShader = true;\n    }\n    if (parameters.rings !== undefined && parameters.rings !== this.pdRings) {\n      this.pdRings = parameters.rings;\n      updateShader = true;\n    }\n    if (parameters.samples !== undefined && parameters.samples !== this.pdSamples) {\n      this.pdSamples = parameters.samples;\n      updateShader = true;\n    }\n    if (updateShader) {\n      this.pdMaterial.defines.SAMPLES = this.pdSamples;\n      this.pdMaterial.defines.SAMPLE_VECTORS = generatePdSamplePointInitializer(this.pdSamples, this.pdRings, this.pdRadiusExponent);\n      this.pdMaterial.needsUpdate = true;\n    }\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */) {\n    // render normals and depth (honor only meshes, points and lines do not contribute to AO)\n\n    if (this._renderGBuffer) {\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this.restoreVisibility();\n    }\n\n    // render AO\n\n    this.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n    this.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n    this.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this.gtaoMaterial.uniforms.cameraWorldMatrix.value.copy(this.camera.matrixWorld);\n    this.renderPass(renderer, this.gtaoMaterial, this.gtaoRenderTarget, 0xffffff, 1.0);\n\n    // render poisson denoise\n\n    this.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this.renderPass(renderer, this.pdMaterial, this.pdRenderTarget, 0xffffff, 1.0);\n\n    // output result to screen\n\n    switch (this.output) {\n      case GTAOPass.OUTPUT.Off:\n        break;\n      case GTAOPass.OUTPUT.Diffuse:\n        this.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.AO:\n        this.copyMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Denoise:\n        this.copyMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Depth:\n        this.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n        this.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms.tDiffuse.value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case GTAOPass.OUTPUT.Default:\n        this.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        this.blendMaterial.uniforms.intensity.value = this.blendIntensity;\n        this.blendMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n        this.renderPass(renderer, this.blendMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.GTAOPass: Unknown output type.');\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    const originalClearAlpha = renderer.getClearAlpha();\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.gtaoRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.pdRenderTarget.setSize(width, height);\n    this.gtaoMaterial.uniforms.resolution.value.set(width, height);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix);\n    this.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n    this.pdMaterial.uniforms.resolution.value.set(width, height);\n    this.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy(this.camera.projectionMatrixInverse);\n  }\n  overrideVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      cache.set(object, object.visible);\n      if (object.isPoints || object.isLine) object.visible = false;\n    });\n  }\n  restoreVisibility() {\n    const scene = this.scene;\n    const cache = this._visibilityCache;\n    scene.traverse(function (object) {\n      const visible = cache.get(object);\n      object.visible = visible;\n    });\n    cache.clear();\n  }\n  generateNoise(size = 64) {\n    const simplex = new SimplexNoise();\n    const arraySize = size * size * 4;\n    const data = new Uint8Array(arraySize);\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const x = i;\n        const y = j;\n        data[(i * size + j) * 4] = (simplex.noise(x, y) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 1] = (simplex.noise(x + size, y) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 2] = (simplex.noise(x, y + size) * 0.5 + 0.5) * 255;\n        data[(i * size + j) * 4 + 3] = (simplex.noise(x + size, y + size) * 0.5 + 0.5) * 255;\n      }\n    }\n    const noiseTexture = new DataTexture(data, size, size, RGBAFormat, UnsignedByteType);\n    noiseTexture.wrapS = RepeatWrapping;\n    noiseTexture.wrapT = RepeatWrapping;\n    noiseTexture.needsUpdate = true;\n    return noiseTexture;\n  }\n}\nGTAOPass.OUTPUT = {\n  'Off': -1,\n  'Default': 0,\n  'Diffuse': 1,\n  'Depth': 2,\n  'Normal': 3,\n  'AO': 4,\n  'Denoise': 5\n};\nexport { GTAOPass };","map":{"version":3,"names":["AddEquation","Color","CustomBlending","DataTexture","DepthTexture","DepthStencilFormat","DstAlphaFactor","DstColorFactor","HalfFloatType","MeshNormalMaterial","NearestFilter","NoBlending","RepeatWrapping","RGBAFormat","ShaderMaterial","UniformsUtils","UnsignedByteType","UnsignedInt248Type","WebGLRenderTarget","ZeroFactor","Pass","FullScreenQuad","generateMagicSquareNoise","GTAOShader","GTAODepthShader","GTAOBlendShader","generatePdSamplePointInitializer","PoissonDenoiseShader","CopyShader","SimplexNoise","GTAOPass","constructor","scene","camera","width","height","parameters","aoParameters","pdParameters","undefined","clear","output","_renderGBuffer","_visibilityCache","Map","blendIntensity","pdRings","pdRadiusExponent","pdSamples","gtaoNoiseTexture","pdNoiseTexture","generateNoise","gtaoRenderTarget","type","pdRenderTarget","clone","gtaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","depthTest","depthWrite","PERSPECTIVE_CAMERA","isPerspectiveCamera","tNoise","value","resolution","set","cameraNear","near","cameraFar","far","normalMaterial","pdMaterial","tDiffuse","texture","lumaPhi","depthPhi","normalPhi","radius","depthRenderMaterial","copyMaterial","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","blendMaterial","fsQuad","originalClearColor","setGBuffer","depthTexture","normalTexture","updateGtaoMaterial","updatePdMaterial","dispose","normalRenderTarget","gtaoMap","format","minFilter","magFilter","normalVectorType","depthValueSource","NORMAL_VECTOR_TYPE","DEPTH_SWIZZLING","tNormal","tDepth","setSceneClipBox","box","needsUpdate","SCENE_CLIP_BOX","sceneBoxMin","copy","min","sceneBoxMax","max","distanceExponent","thickness","distanceFallOff","scale","samples","SAMPLES","screenSpaceRadius","SCREEN_SPACE_RADIUS","updateShader","radiusExponent","rings","SAMPLE_VECTORS","render","renderer","writeBuffer","readBuffer","overrideVisibility","renderOverride","restoreVisibility","cameraProjectionMatrix","projectionMatrix","cameraProjectionMatrixInverse","projectionMatrixInverse","cameraWorldMatrix","matrixWorld","renderPass","OUTPUT","Off","Diffuse","renderToScreen","AO","Denoise","Depth","Normal","Default","intensity","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setRenderTarget","setClearColor","setClearAlpha","material","overrideMaterial","setSize","cache","traverse","object","visible","isPoints","isLine","get","size","simplex","arraySize","data","Uint8Array","i","j","x","y","noise","noiseTexture","wrapS","wrapT"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/postprocessing/GTAOPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tCustomBlending,\n\tDataTexture,\n\tDepthTexture,\n\tDepthStencilFormat,\n\tDstAlphaFactor,\n\tDstColorFactor,\n\tHalfFloatType,\n\tMeshNormalMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tRepeatWrapping,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedByteType,\n\tUnsignedInt248Type,\n\tWebGLRenderTarget,\n\tZeroFactor\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { generateMagicSquareNoise, GTAOShader, GTAODepthShader, GTAOBlendShader } from '../shaders/GTAOShader.js';\nimport { generatePdSamplePointInitializer, PoissonDenoiseShader } from '../shaders/PoissonDenoiseShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\n\nclass GTAOPass extends Pass {\n\n\tconstructor( scene, camera, width, height, parameters, aoParameters, pdParameters ) {\n\n\t\tsuper();\n\n\t\tthis.width = ( width !== undefined ) ? width : 512;\n\t\tthis.height = ( height !== undefined ) ? height : 512;\n\t\tthis.clear = true;\n\t\tthis.camera = camera;\n\t\tthis.scene = scene;\n\t\tthis.output = 0;\n\t\tthis._renderGBuffer = true;\n\t\tthis._visibilityCache = new Map();\n\t\tthis.blendIntensity = 1.;\n\n\t\tthis.pdRings = 2.;\n\t\tthis.pdRadiusExponent = 2.;\n\t\tthis.pdSamples = 16;\n\n\t\tthis.gtaoNoiseTexture = generateMagicSquareNoise();\n\t\tthis.pdNoiseTexture = this.generateNoise();\n\n\t\tthis.gtaoRenderTarget = new WebGLRenderTarget( this.width, this.height, { type: HalfFloatType } );\n\t\tthis.pdRenderTarget = this.gtaoRenderTarget.clone();\n\n\t\tthis.gtaoMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAOShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAOShader.uniforms ),\n\t\t\tvertexShader: GTAOShader.vertexShader,\n\t\t\tfragmentShader: GTAOShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.gtaoMaterial.defines.PERSPECTIVE_CAMERA = this.camera.isPerspectiveCamera ? 1 : 0;\n\t\tthis.gtaoMaterial.uniforms.tNoise.value = this.gtaoNoiseTexture;\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\tthis.pdMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, PoissonDenoiseShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( PoissonDenoiseShader.uniforms ),\n\t\t\tvertexShader: PoissonDenoiseShader.vertexShader,\n\t\t\tfragmentShader: PoissonDenoiseShader.fragmentShader,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t} );\n\t\tthis.pdMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\tthis.pdMaterial.uniforms.tNoise.value = this.pdNoiseTexture;\n\t\tthis.pdMaterial.uniforms.resolution.value.set( this.width, this.height );\n\t\tthis.pdMaterial.uniforms.lumaPhi.value = 10;\n\t\tthis.pdMaterial.uniforms.depthPhi.value = 2;\n\t\tthis.pdMaterial.uniforms.normalPhi.value = 3;\n\t\tthis.pdMaterial.uniforms.radius.value = 8;\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, GTAODepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( GTAODepthShader.uniforms ),\n\t\t\tvertexShader: GTAODepthShader.vertexShader,\n\t\t\tfragmentShader: GTAODepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis.blendMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( GTAOBlendShader.uniforms ),\n\t\t\tvertexShader: GTAOBlendShader.vertexShader,\n\t\t\tfragmentShader: GTAOBlendShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblending: CustomBlending,\n\t\t\tblendSrc: DstColorFactor,\n\t\t\tblendDst: ZeroFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: DstAlphaFactor,\n\t\t\tblendDstAlpha: ZeroFactor,\n\t\t\tblendEquationAlpha: AddEquation\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new Color();\n\n\t\tthis.setGBuffer( parameters ? parameters.depthTexture : undefined, parameters ? parameters.normalTexture : undefined );\n\n\t\tif ( aoParameters !== undefined ) {\n\n\t\t\tthis.updateGtaoMaterial( aoParameters );\n\n\t\t}\n\n\t\tif ( pdParameters !== undefined ) {\n\n\t\t\tthis.updatePdMaterial( pdParameters );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.gtaoNoiseTexture.dispose();\n\t\tthis.pdNoiseTexture.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.gtaoRenderTarget.dispose();\n\t\tthis.pdRenderTarget.dispose();\n\t\tthis.normalMaterial.dispose();\n\t\tthis.pdMaterial.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tget gtaoMap() {\n\n\t\treturn this.pdRenderTarget.texture;\n\n\t}\n\n\tsetGBuffer( depthTexture, normalTexture ) {\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tthis.depthTexture = depthTexture;\n\t\t\tthis.normalTexture = normalTexture;\n\t\t\tthis._renderGBuffer = false;\n\n\t\t} else {\n\n\t\t\tthis.depthTexture = new DepthTexture();\n\t\t\tthis.depthTexture.format = DepthStencilFormat;\n\t\t\tthis.depthTexture.type = UnsignedInt248Type;\n\t\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\ttype: HalfFloatType,\n\t\t\t\tdepthTexture: this.depthTexture\n\t\t\t} );\n\t\t\tthis.normalTexture = this.normalRenderTarget.texture;\n\t\t\tthis._renderGBuffer = true;\n\n\t\t}\n\n\t\tconst normalVectorType = ( this.normalTexture ) ? 1 : 0;\n\t\tconst depthValueSource = ( this.depthTexture === this.normalTexture ) ? 'w' : 'x';\n\n\t\tthis.gtaoMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.gtaoMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.gtaoMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.gtaoMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.pdMaterial.defines.NORMAL_VECTOR_TYPE = normalVectorType;\n\t\tthis.pdMaterial.defines.DEPTH_SWIZZLING = depthValueSource;\n\t\tthis.pdMaterial.uniforms.tNormal.value = this.normalTexture;\n\t\tthis.pdMaterial.uniforms.tDepth.value = this.depthTexture;\n\n\t\tthis.depthRenderMaterial.uniforms.tDepth.value = this.normalRenderTarget.depthTexture;\n\n\t}\n\n\tsetSceneClipBox( box ) {\n\n\t\tif ( box ) {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX !== 1;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 1;\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMin.value.copy( box.min );\n\t\t\tthis.gtaoMaterial.uniforms.sceneBoxMax.value.copy( box.max );\n\n\t\t} else {\n\n\t\t\tthis.gtaoMaterial.needsUpdate = this.gtaoMaterial.defines.SCENE_CLIP_BOX === 0;\n\t\t\tthis.gtaoMaterial.defines.SCENE_CLIP_BOX = 0;\n\n\t\t}\n\n\t}\n\n\tupdateGtaoMaterial( parameters ) {\n\n\t\tif ( parameters.radius !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.distanceExponent !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceExponent.value = parameters.distanceExponent;\n\n\t\t}\n\n\t\tif ( parameters.thickness !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.thickness.value = parameters.thickness;\n\n\t\t}\n\n\t\tif ( parameters.distanceFallOff !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.distanceFallOff.value = parameters.distanceFallOff;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.scale !== undefined ) {\n\n\t\t\tthis.gtaoMaterial.uniforms.scale.value = parameters.scale;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.gtaoMaterial.defines.SAMPLES ) {\n\n\t\t\tthis.gtaoMaterial.defines.SAMPLES = parameters.samples;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( parameters.screenSpaceRadius !== undefined && ( parameters.screenSpaceRadius ? 1 : 0 ) !== this.gtaoMaterial.defines.SCREEN_SPACE_RADIUS ) {\n\n\t\t\tthis.gtaoMaterial.defines.SCREEN_SPACE_RADIUS = parameters.screenSpaceRadius ? 1 : 0;\n\t\t\tthis.gtaoMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tupdatePdMaterial( parameters ) {\n\n\t\tlet updateShader = false;\n\n\t\tif ( parameters.lumaPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.lumaPhi.value = parameters.lumaPhi;\n\n\t\t}\n\n\t\tif ( parameters.depthPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.depthPhi.value = parameters.depthPhi;\n\n\t\t}\n\n\t\tif ( parameters.normalPhi !== undefined ) {\n\n\t\t\tthis.pdMaterial.uniforms.normalPhi.value = parameters.normalPhi;\n\n\t\t}\n\n\t\tif ( parameters.radius !== undefined && parameters.radius !== this.radius ) {\n\n\t\t\tthis.pdMaterial.uniforms.radius.value = parameters.radius;\n\n\t\t}\n\n\t\tif ( parameters.radiusExponent !== undefined && parameters.radiusExponent !== this.pdRadiusExponent ) {\n\n\t\t\tthis.pdRadiusExponent = parameters.radiusExponent;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.rings !== undefined && parameters.rings !== this.pdRings ) {\n\n\t\t\tthis.pdRings = parameters.rings;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( parameters.samples !== undefined && parameters.samples !== this.pdSamples ) {\n\n\t\t\tthis.pdSamples = parameters.samples;\n\t\t\tupdateShader = true;\n\n\t\t}\n\n\t\tif ( updateShader ) {\n\n\t\t\tthis.pdMaterial.defines.SAMPLES = this.pdSamples;\n\t\t\tthis.pdMaterial.defines.SAMPLE_VECTORS = generatePdSamplePointInitializer( this.pdSamples, this.pdRings, this.pdRadiusExponent );\n\t\t\tthis.pdMaterial.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\t// render normals and depth (honor only meshes, points and lines do not contribute to AO)\n\n\t\tif ( this._renderGBuffer ) {\n\n\t\t\tthis.overrideVisibility();\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\t\tthis.restoreVisibility();\n\n\t\t}\n\n\t\t// render AO\n\n\t\tthis.gtaoMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\tthis.gtaoMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.gtaoMaterial.uniforms.cameraWorldMatrix.value.copy( this.camera.matrixWorld );\n\t\tthis.renderPass( renderer, this.gtaoMaterial, this.gtaoRenderTarget, 0xffffff, 1.0 );\n\n\t\t// render poisson denoise\n\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\t\tthis.renderPass( renderer, this.pdMaterial, this.pdRenderTarget, 0xffffff, 1.0 );\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase GTAOPass.OUTPUT.Off:\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Diffuse:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.AO:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.gtaoRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Denoise:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Depth:\n\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraNear.value = this.camera.near;\n\t\t\t\tthis.depthRenderMaterial.uniforms.cameraFar.value = this.camera.far;\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase GTAOPass.OUTPUT.Default:\n\n\t\t\t\tthis.copyMaterial.uniforms.tDiffuse.value = readBuffer.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tthis.blendMaterial.uniforms.intensity.value = this.blendIntensity;\n\t\t\t\tthis.blendMaterial.uniforms.tDiffuse.value = this.pdRenderTarget.texture;\n\t\t\t\tthis.renderPass( renderer, this.blendMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.GTAOPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\trenderer.getClearColor( this.originalClearColor );\n\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.gtaoRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.pdRenderTarget.setSize( width, height );\n\n\t\tthis.gtaoMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrix.value.copy( this.camera.projectionMatrix );\n\t\tthis.gtaoMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.pdMaterial.uniforms.resolution.value.set( width, height );\n\t\tthis.pdMaterial.uniforms.cameraProjectionMatrixInverse.value.copy( this.camera.projectionMatrixInverse );\n\n\t}\n\n\toverrideVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tcache.set( object, object.visible );\n\n\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\n\n\t\t} );\n\n\t}\n\n\trestoreVisibility() {\n\n\t\tconst scene = this.scene;\n\t\tconst cache = this._visibilityCache;\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst visible = cache.get( object );\n\t\t\tobject.visible = visible;\n\n\t\t} );\n\n\t\tcache.clear();\n\n\t}\n\n\tgenerateNoise( size = 64 ) {\n\n\t\tconst simplex = new SimplexNoise();\n\n\t\tconst arraySize = size * size * 4;\n\t\tconst data = new Uint8Array( arraySize );\n\n\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < size; j ++ ) {\n\n\t\t\t\tconst x = i;\n\t\t\t\tconst y = j;\n\n\t\t\t\tdata[ ( i * size + j ) * 4 ] = ( simplex.noise( x, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 1 ] = ( simplex.noise( x + size, y ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 2 ] = ( simplex.noise( x, y + size ) * 0.5 + 0.5 ) * 255;\n\t\t\t\tdata[ ( i * size + j ) * 4 + 3 ] = ( simplex.noise( x + size, y + size ) * 0.5 + 0.5 ) * 255;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst noiseTexture = new DataTexture( data, size, size, RGBAFormat, UnsignedByteType );\n\t\tnoiseTexture.wrapS = RepeatWrapping;\n\t\tnoiseTexture.wrapT = RepeatWrapping;\n\t\tnoiseTexture.needsUpdate = true;\n\n\t\treturn noiseTexture;\n\n\t}\n\n}\n\nGTAOPass.OUTPUT = {\n\t'Off': - 1,\n\t'Default': 0,\n\t'Diffuse': 1,\n\t'Depth': 2,\n\t'Normal': 3,\n\t'AO': 4,\n\t'Denoise': 5,\n};\n\nexport { GTAOPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}