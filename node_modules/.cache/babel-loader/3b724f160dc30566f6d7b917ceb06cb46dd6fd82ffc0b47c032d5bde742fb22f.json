{"ast":null,"code":"import { ShaderPass } from './ShaderPass.js';\nconst LUTShader = {\n  name: 'LUTShader',\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n  fragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`\n};\nclass LUTPass extends ShaderPass {\n  set lut(v) {\n    const material = this.material;\n    if (v !== this.lut) {\n      material.uniforms.lut3d.value = null;\n      material.uniforms.lut.value = null;\n      if (v) {\n        const is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\n          material.needsUpdate = true;\n        }\n        material.uniforms.lutSize.value = v.image.width;\n        if (v.isData3DTexture) {\n          material.uniforms.lut3d.value = v;\n        } else {\n          material.uniforms.lut.value = v;\n        }\n      }\n    }\n  }\n  get lut() {\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n  }\n  set intensity(v) {\n    this.material.uniforms.intensity.value = v;\n  }\n  get intensity() {\n    return this.material.uniforms.intensity.value;\n  }\n  constructor(options = {}) {\n    super(LUTShader);\n    this.lut = options.lut || null;\n    this.intensity = 'intensity' in options ? options.intensity : 1;\n  }\n}\nexport { LUTPass };","map":{"version":3,"names":["ShaderPass","LUTShader","name","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","v","material","is3dTextureDefine","isData3DTexture","needsUpdate","image","width","constructor","options"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n\n\tname: 'LUTShader',\n\n\tdefines: {\n\t\tUSE_3DTEXTURE: 1,\n\t},\n\n\tuniforms: {\n\t\tlut3d: { value: null },\n\n\t\tlut: { value: null },\n\t\tlutSize: { value: 0 },\n\n\t\ttDiffuse: { value: null },\n\t\tintensity: { value: 1.0 },\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`,\n\n};\n\nclass LUTPass extends ShaderPass {\n\n\tset lut( v ) {\n\n\t\tconst material = this.material;\n\t\tif ( v !== this.lut ) {\n\n\t\t\tmaterial.uniforms.lut3d.value = null;\n\t\t\tmaterial.uniforms.lut.value = null;\n\n\t\t\tif ( v ) {\n\n\t\t\t\tconst is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n\t\t\t\tif ( is3dTextureDefine !== material.defines.USE_3DTEXTURE ) {\n\n\t\t\t\t\tmaterial.defines.USE_3DTEXTURE = is3dTextureDefine;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.uniforms.lutSize.value = v.image.width;\n\t\t\t\tif ( v.isData3DTexture ) {\n\n\t\t\t\t\tmaterial.uniforms.lut3d.value = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.uniforms.lut.value = v;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tget lut() {\n\n\t\treturn this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n\n\t}\n\n\tset intensity( v ) {\n\n\t\tthis.material.uniforms.intensity.value = v;\n\n\t}\n\n\tget intensity() {\n\n\t\treturn this.material.uniforms.intensity.value;\n\n\t}\n\n\tconstructor( options = {} ) {\n\n\t\tsuper( LUTShader );\n\t\tthis.lut = options.lut || null;\n\t\tthis.intensity = 'intensity' in options ? options.intensity : 1;\n\n\t}\n\n}\n\nexport { LUTPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}