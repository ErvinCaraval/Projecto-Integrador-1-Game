{"ast":null,"code":"import { PerspectiveCamera, Quaternion, Vector3 } from 'three';\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nclass PeppersGhostEffect {\n  constructor(renderer) {\n    const scope = this;\n    scope.cameraDistance = 15;\n    scope.reflectFromAbove = false;\n\n    // Internals\n    let _halfWidth, _width, _height;\n    const _cameraF = new PerspectiveCamera(); //front\n    const _cameraB = new PerspectiveCamera(); //back\n    const _cameraL = new PerspectiveCamera(); //left\n    const _cameraR = new PerspectiveCamera(); //right\n\n    const _position = new Vector3();\n    const _quaternion = new Quaternion();\n    const _scale = new Vector3();\n\n    // Initialization\n    renderer.autoClear = false;\n    this.setSize = function (width, height) {\n      _halfWidth = width / 2;\n      if (width < height) {\n        _width = width / 3;\n        _height = width / 3;\n      } else {\n        _width = height / 3;\n        _height = height / 3;\n      }\n      renderer.setSize(width, height);\n    };\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      camera.matrixWorld.decompose(_position, _quaternion, _scale);\n\n      // front\n      _cameraF.position.copy(_position);\n      _cameraF.quaternion.copy(_quaternion);\n      _cameraF.translateZ(scope.cameraDistance);\n      _cameraF.lookAt(scene.position);\n\n      // back\n      _cameraB.position.copy(_position);\n      _cameraB.quaternion.copy(_quaternion);\n      _cameraB.translateZ(-scope.cameraDistance);\n      _cameraB.lookAt(scene.position);\n      _cameraB.rotation.z += 180 * (Math.PI / 180);\n\n      // left\n      _cameraL.position.copy(_position);\n      _cameraL.quaternion.copy(_quaternion);\n      _cameraL.translateX(-scope.cameraDistance);\n      _cameraL.lookAt(scene.position);\n      _cameraL.rotation.x += 90 * (Math.PI / 180);\n\n      // right\n      _cameraR.position.copy(_position);\n      _cameraR.quaternion.copy(_quaternion);\n      _cameraR.translateX(scope.cameraDistance);\n      _cameraR.lookAt(scene.position);\n      _cameraR.rotation.x += 90 * (Math.PI / 180);\n      renderer.clear();\n      renderer.setScissorTest(true);\n      renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraB);\n      } else {\n        renderer.render(scene, _cameraF);\n      }\n      renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraF);\n      } else {\n        renderer.render(scene, _cameraB);\n      }\n      renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraR);\n      } else {\n        renderer.render(scene, _cameraL);\n      }\n      renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n      renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n      if (scope.reflectFromAbove) {\n        renderer.render(scene, _cameraL);\n      } else {\n        renderer.render(scene, _cameraR);\n      }\n      renderer.setScissorTest(false);\n    };\n  }\n}\nexport { PeppersGhostEffect };","map":{"version":3,"names":["PerspectiveCamera","Quaternion","Vector3","PeppersGhostEffect","constructor","renderer","scope","cameraDistance","reflectFromAbove","_halfWidth","_width","_height","_cameraF","_cameraB","_cameraL","_cameraR","_position","_quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/effects/PeppersGhostEffect.js"],"sourcesContent":["import {\n\tPerspectiveCamera,\n\tQuaternion,\n\tVector3\n} from 'three';\n\n/**\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\n */\n\nclass PeppersGhostEffect {\n\n\tconstructor( renderer ) {\n\n\t\tconst scope = this;\n\n\t\tscope.cameraDistance = 15;\n\t\tscope.reflectFromAbove = false;\n\n\t\t// Internals\n\t\tlet _halfWidth, _width, _height;\n\n\t\tconst _cameraF = new PerspectiveCamera(); //front\n\t\tconst _cameraB = new PerspectiveCamera(); //back\n\t\tconst _cameraL = new PerspectiveCamera(); //left\n\t\tconst _cameraR = new PerspectiveCamera(); //right\n\n\t\tconst _position = new Vector3();\n\t\tconst _quaternion = new Quaternion();\n\t\tconst _scale = new Vector3();\n\n\t\t// Initialization\n\t\trenderer.autoClear = false;\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_halfWidth = width / 2;\n\t\t\tif ( width < height ) {\n\n\t\t\t\t_width = width / 3;\n\t\t\t\t_height = width / 3;\n\n\t\t\t} else {\n\n\t\t\t\t_width = height / 3;\n\t\t\t\t_height = height / 3;\n\n\t\t\t}\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\tcamera.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t\t// front\n\t\t\t_cameraF.position.copy( _position );\n\t\t\t_cameraF.quaternion.copy( _quaternion );\n\t\t\t_cameraF.translateZ( scope.cameraDistance );\n\t\t\t_cameraF.lookAt( scene.position );\n\n\t\t\t// back\n\t\t\t_cameraB.position.copy( _position );\n\t\t\t_cameraB.quaternion.copy( _quaternion );\n\t\t\t_cameraB.translateZ( - ( scope.cameraDistance ) );\n\t\t\t_cameraB.lookAt( scene.position );\n\t\t\t_cameraB.rotation.z += 180 * ( Math.PI / 180 );\n\n\t\t\t// left\n\t\t\t_cameraL.position.copy( _position );\n\t\t\t_cameraL.quaternion.copy( _quaternion );\n\t\t\t_cameraL.translateX( - ( scope.cameraDistance ) );\n\t\t\t_cameraL.lookAt( scene.position );\n\t\t\t_cameraL.rotation.x += 90 * ( Math.PI / 180 );\n\n\t\t\t// right\n\t\t\t_cameraR.position.copy( _position );\n\t\t\t_cameraR.quaternion.copy( _quaternion );\n\t\t\t_cameraR.translateX( scope.cameraDistance );\n\t\t\t_cameraR.lookAt( scene.position );\n\t\t\t_cameraR.rotation.x += 90 * ( Math.PI / 180 );\n\n\n\t\t\trenderer.clear();\n\t\t\trenderer.setScissorTest( true );\n\n\t\t\trenderer.setScissor( _halfWidth - ( _width / 2 ), ( _height * 2 ), _width, _height );\n\t\t\trenderer.setViewport( _halfWidth - ( _width / 2 ), ( _height * 2 ), _width, _height );\n\n\t\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\t\trenderer.render( scene, _cameraB );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( scene, _cameraF );\n\n\t\t\t}\n\n\t\t\trenderer.setScissor( _halfWidth - ( _width / 2 ), 0, _width, _height );\n\t\t\trenderer.setViewport( _halfWidth - ( _width / 2 ), 0, _width, _height );\n\n\t\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\t\trenderer.render( scene, _cameraF );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( scene, _cameraB );\n\n\t\t\t}\n\n\t\t\trenderer.setScissor( _halfWidth - ( _width / 2 ) - _width, _height, _width, _height );\n\t\t\trenderer.setViewport( _halfWidth - ( _width / 2 ) - _width, _height, _width, _height );\n\n\t\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\t\trenderer.render( scene, _cameraR );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( scene, _cameraL );\n\n\t\t\t}\n\n\t\t\trenderer.setScissor( _halfWidth + ( _width / 2 ), _height, _width, _height );\n\t\t\trenderer.setViewport( _halfWidth + ( _width / 2 ), _height, _width, _height );\n\n\t\t\tif ( scope.reflectFromAbove ) {\n\n\t\t\t\trenderer.render( scene, _cameraL );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( scene, _cameraR );\n\n\t\t\t}\n\n\t\t\trenderer.setScissorTest( false );\n\n\t\t};\n\n\t}\n\n}\n\nexport { PeppersGhostEffect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}