{"ast":null,"code":"import { Matrix4, Quaternion, Vector3 } from 'three';\nimport { MMDParser } from '../libs/mmdparser.module.js';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n  /* TODO: implement\n  // mesh -> pmd\n  this.parsePmd = function ( object ) {\n  \t};\n  */\n\n  /* TODO: implement\n  // mesh -> pmx\n  this.parsePmx = function ( object ) {\n  \t};\n  */\n\n  /* TODO: implement\n  // animation + skeleton -> vmd\n  this.parseVmd = function ( object ) {\n  \t};\n  */\n\n  /*\n   * skeleton -> vpd\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n   */\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\n    if (skin.isSkinnedMesh !== true) {\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n      return null;\n    }\n    function toStringsFromNumber(num) {\n      if (Math.abs(num) < 1e-6) num = 0;\n      let a = num.toString();\n      if (a.indexOf('.') === -1) {\n        a += '.';\n      }\n      a += '000000';\n      const index = a.indexOf('.');\n      const d = a.slice(0, index);\n      const p = a.slice(index + 1, index + 7);\n      return d + '.' + p;\n    }\n    function toStringsFromArray(array) {\n      const a = [];\n      for (let i = 0, il = array.length; i < il; i++) {\n        a.push(toStringsFromNumber(array[i]));\n      }\n      return a.join(',');\n    }\n    skin.updateMatrixWorld(true);\n    const bones = skin.skeleton.bones;\n    const bones2 = getBindBones(skin);\n    const position = new Vector3();\n    const quaternion = new Quaternion();\n    const quaternion2 = new Quaternion();\n    const matrix = new Matrix4();\n    const array = [];\n    array.push('Vocaloid Pose Data file');\n    array.push('');\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n    array.push(bones.length + ';');\n    array.push('');\n    for (let i = 0, il = bones.length; i < il; i++) {\n      const bone = bones[i];\n      const bone2 = bones2[i];\n\n      /*\n       * use the bone matrix saved before solving IK.\n       * see CCDIKSolver for the detail.\n       */\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n        matrix.fromArray(bone.userData.ik.originalMatrix);\n      } else {\n        matrix.copy(bone.matrix);\n      }\n      position.setFromMatrixPosition(matrix);\n      quaternion.setFromRotationMatrix(matrix);\n      const pArray = position.sub(bone2.position).toArray();\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray();\n\n      // right to left\n      pArray[2] = -pArray[2];\n      qArray[0] = -qArray[0];\n      qArray[1] = -qArray[1];\n      array.push('Bone' + i + '{' + bone.name);\n      array.push('  ' + toStringsFromArray(pArray) + ';');\n      array.push('  ' + toStringsFromArray(qArray) + ';');\n      array.push('}');\n      array.push('');\n    }\n    array.push('');\n    const lines = array.join('\\n');\n    return outputShiftJis === true ? unicodeToShiftjis(lines) : lines;\n  }\n}\n\n// Unicode to Shift_JIS table\nlet u2sTable;\nfunction unicodeToShiftjis(str) {\n  if (u2sTable === undefined) {\n    const encoder = new MMDParser.CharsetEncoder();\n    const table = encoder.s2uTable;\n    u2sTable = {};\n    const keys = Object.keys(table);\n    for (let i = 0, il = keys.length; i < il; i++) {\n      let key = keys[i];\n      const value = table[key];\n      key = parseInt(key);\n      u2sTable[value] = key;\n    }\n  }\n  const array = [];\n  for (let i = 0, il = str.length; i < il; i++) {\n    const code = str.charCodeAt(i);\n    const value = u2sTable[code];\n    if (value === undefined) {\n      throw new Error('cannot convert charcode 0x' + code.toString(16));\n    } else if (value > 0xff) {\n      array.push(value >> 8 & 0xff);\n      array.push(value & 0xff);\n    } else {\n      array.push(value & 0xff);\n    }\n  }\n  return new Uint8Array(array);\n}\nfunction getBindBones(skin) {\n  // any more efficient ways?\n  const poseSkin = skin.clone();\n  poseSkin.pose();\n  return poseSkin.skeleton.bones;\n}\nexport { MMDExporter };","map":{"version":3,"names":["Matrix4","Quaternion","Vector3","MMDParser","MMDExporter","parseVpd","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","name","replace","bone","bone2","userData","ik","undefined","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","u2sTable","str","encoder","CharsetEncoder","table","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Error","Uint8Array","poseSkin","clone","pose"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/exporters/MMDExporter.js"],"sourcesContent":["import {\n\tMatrix4,\n\tQuaternion,\n\tVector3\n} from 'three';\nimport { MMDParser } from '../libs/mmdparser.module.js';\n\n/**\n * Dependencies\n *  - mmd-parser https://github.com/takahirox/mmd-parser\n */\n\nclass MMDExporter {\n\n\t/* TODO: implement\n\t// mesh -> pmd\n\tthis.parsePmd = function ( object ) {\n\n\t};\n\t*/\n\n\t/* TODO: implement\n\t// mesh -> pmx\n\tthis.parsePmx = function ( object ) {\n\n\t};\n\t*/\n\n\t/* TODO: implement\n\t// animation + skeleton -> vmd\n\tthis.parseVmd = function ( object ) {\n\n\t};\n\t*/\n\n\t/*\n\t * skeleton -> vpd\n\t * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\n\t */\n\tparseVpd( skin, outputShiftJis, useOriginalBones ) {\n\n\t\tif ( skin.isSkinnedMesh !== true ) {\n\n\t\t\tconsole.warn( 'THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction toStringsFromNumber( num ) {\n\n\t\t\tif ( Math.abs( num ) < 1e-6 ) num = 0;\n\n\t\t\tlet a = num.toString();\n\n\t\t\tif ( a.indexOf( '.' ) === - 1 ) {\n\n\t\t\t\ta += '.';\n\n\t\t\t}\n\n\t\t\ta += '000000';\n\n\t\t\tconst index = a.indexOf( '.' );\n\n\t\t\tconst d = a.slice( 0, index );\n\t\t\tconst p = a.slice( index + 1, index + 7 );\n\n\t\t\treturn d + '.' + p;\n\n\t\t}\n\n\t\tfunction toStringsFromArray( array ) {\n\n\t\t\tconst a = [];\n\n\t\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t\ta.push( toStringsFromNumber( array[ i ] ) );\n\n\t\t\t}\n\n\t\t\treturn a.join( ',' );\n\n\t\t}\n\n\t\tskin.updateMatrixWorld( true );\n\n\t\tconst bones = skin.skeleton.bones;\n\t\tconst bones2 = getBindBones( skin );\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst quaternion2 = new Quaternion();\n\t\tconst matrix = new Matrix4();\n\n\t\tconst array = [];\n\t\tarray.push( 'Vocaloid Pose Data file' );\n\t\tarray.push( '' );\n\t\tarray.push( ( skin.name !== '' ? skin.name.replace( /\\s/g, '_' ) : 'skin' ) + '.osm;' );\n\t\tarray.push( bones.length + ';' );\n\t\tarray.push( '' );\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tconst bone2 = bones2[ i ];\n\n\t\t\t/*\n\t\t\t * use the bone matrix saved before solving IK.\n\t\t\t * see CCDIKSolver for the detail.\n\t\t\t */\n\t\t\tif ( useOriginalBones === true &&\n\t\t\t\tbone.userData.ik !== undefined &&\n\t\t\t\tbone.userData.ik.originalMatrix !== undefined ) {\n\n\t\t\t\tmatrix.fromArray( bone.userData.ik.originalMatrix );\n\n\t\t\t} else {\n\n\t\t\t\tmatrix.copy( bone.matrix );\n\n\t\t\t}\n\n\t\t\tposition.setFromMatrixPosition( matrix );\n\t\t\tquaternion.setFromRotationMatrix( matrix );\n\n\t\t\tconst pArray = position.sub( bone2.position ).toArray();\n\t\t\tconst qArray = quaternion2.copy( bone2.quaternion ).conjugate().multiply( quaternion ).toArray();\n\n\t\t\t// right to left\n\t\t\tpArray[ 2 ] = - pArray[ 2 ];\n\t\t\tqArray[ 0 ] = - qArray[ 0 ];\n\t\t\tqArray[ 1 ] = - qArray[ 1 ];\n\n\t\t\tarray.push( 'Bone' + i + '{' + bone.name );\n\t\t\tarray.push( '  ' + toStringsFromArray( pArray ) + ';' );\n\t\t\tarray.push( '  ' + toStringsFromArray( qArray ) + ';' );\n\t\t\tarray.push( '}' );\n\t\t\tarray.push( '' );\n\n\t\t}\n\n\t\tarray.push( '' );\n\n\t\tconst lines = array.join( '\\n' );\n\n\t\treturn ( outputShiftJis === true ) ? unicodeToShiftjis( lines ) : lines;\n\n\t}\n\n}\n\n// Unicode to Shift_JIS table\nlet u2sTable;\n\nfunction unicodeToShiftjis( str ) {\n\n\tif ( u2sTable === undefined ) {\n\n\t\tconst encoder = new MMDParser.CharsetEncoder();\n\t\tconst table = encoder.s2uTable;\n\t\tu2sTable = {};\n\n\t\tconst keys = Object.keys( table );\n\n\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\tlet key = keys[ i ];\n\n\t\t\tconst value = table[ key ];\n\t\t\tkey = parseInt( key );\n\n\t\t\tu2sTable[ value ] = key;\n\n\t\t}\n\n\t}\n\n\tconst array = [];\n\n\tfor ( let i = 0, il = str.length; i < il; i ++ ) {\n\n\t\tconst code = str.charCodeAt( i );\n\n\t\tconst value = u2sTable[ code ];\n\n\t\tif ( value === undefined ) {\n\n\t\t\tthrow new Error( 'cannot convert charcode 0x' + code.toString( 16 ) );\n\n\t\t} else if ( value > 0xff ) {\n\n\t\t\tarray.push( ( value >> 8 ) & 0xff );\n\t\t\tarray.push( value & 0xff );\n\n\t\t} else {\n\n\t\t\tarray.push( value & 0xff );\n\n\t\t}\n\n\t}\n\n\treturn new Uint8Array( array );\n\n}\n\nfunction getBindBones( skin ) {\n\n\t// any more efficient ways?\n\tconst poseSkin = skin.clone();\n\tposeSkin.pose();\n\treturn poseSkin.skeleton.bones;\n\n}\n\nexport { MMDExporter };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}