{"ast":null,"code":"import { Curve, Vector3 } from 'three';\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n  klein: function (v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n    let x, z;\n    if (u < Math.PI) {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z = -8 * Math.sin(u) - 2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x = 3 * Math.cos(u) * (1 + Math.sin(u)) + 2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n    target.set(x, y, z);\n  },\n  plane: function (width, height) {\n    return function (u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * height;\n      target.set(x, y, z);\n    };\n  },\n  mobius: function (u, t, target) {\n    // flat mobius strip\n    // http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n    u = u - 0.5;\n    const v = 2 * Math.PI * t;\n    const a = 2;\n    const x = Math.cos(v) * (a + u * Math.cos(v / 2));\n    const y = Math.sin(v) * (a + u * Math.cos(v / 2));\n    const z = u * Math.sin(v / 2);\n    target.set(x, y, z);\n  },\n  mobius3d: function (u, t, target) {\n    // volumetric mobius strip\n\n    u *= Math.PI;\n    t *= 2 * Math.PI;\n    u = u * 2;\n    const phi = u / 2;\n    const major = 2.25,\n      a = 0.125,\n      b = 0.65;\n    let x = a * Math.cos(t) * Math.cos(phi) - b * Math.sin(t) * Math.sin(phi);\n    const z = a * Math.cos(t) * Math.sin(phi) + b * Math.sin(t) * Math.cos(phi);\n    const y = (major + x) * Math.sin(u);\n    x = (major + x) * Math.cos(u);\n    target.set(x, y, z);\n  }\n};\n\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n  constructor(path, segments = 64, radius = 1, segmentsRadius = 8, closed = false) {\n    const numpoints = segments + 1;\n    const frames = path.computeFrenetFrames(segments, closed),\n      tangents = frames.tangents,\n      normals = frames.normals,\n      binormals = frames.binormals;\n    const position = new Vector3();\n    function ParametricTube(u, v, target) {\n      v *= 2 * Math.PI;\n      const i = Math.floor(u * (numpoints - 1));\n      path.getPointAt(u, position);\n      const normal = normals[i];\n      const binormal = binormals[i];\n      const cx = -radius * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n      const cy = radius * Math.sin(v);\n      position.x += cx * normal.x + cy * binormal.x;\n      position.y += cx * normal.y + cy * binormal.y;\n      position.z += cx * normal.z + cy * binormal.z;\n      target.copy(position);\n    }\n    super(ParametricTube, segments, segmentsRadius);\n\n    // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n    this.path = path;\n    this.segments = segments;\n    this.radius = radius;\n    this.segmentsRadius = segmentsRadius;\n    this.closed = closed;\n  }\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for TorusKnotGeometry\n  *\n  *********************************************/\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n  constructor(radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3) {\n    class TorusKnotCurve extends Curve {\n      getPoint(t, optionalTarget = new Vector3()) {\n        const point = optionalTarget;\n        t *= Math.PI * 2;\n        const r = 0.5;\n        const x = (1 + r * Math.cos(q * t)) * Math.cos(p * t);\n        const y = (1 + r * Math.cos(q * t)) * Math.sin(p * t);\n        const z = r * Math.sin(q * t);\n        return point.set(x, y, z).multiplyScalar(radius);\n      }\n    }\n    const segments = segmentsT;\n    const radiusSegments = segmentsR;\n    const extrudePath = new TorusKnotCurve();\n    super(extrudePath, segments, tube, radiusSegments, true, false);\n    this.radius = radius;\n    this.tube = tube;\n    this.segmentsT = segmentsT;\n    this.segmentsR = segmentsR;\n    this.p = p;\n    this.q = q;\n  }\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for SphereGeometry\n  *\n  *********************************************/\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n  constructor(size, u, v) {\n    function sphere(u, v, target) {\n      u *= Math.PI;\n      v *= 2 * Math.PI;\n      const x = size * Math.sin(u) * Math.cos(v);\n      const y = size * Math.sin(u) * Math.sin(v);\n      const z = size * Math.cos(u);\n      target.set(x, y, z);\n    }\n    super(sphere, u, v);\n  }\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for PlaneGeometry\n  *\n  *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n  constructor(width, depth, segmentsWidth, segmentsDepth) {\n    function plane(u, v, target) {\n      const x = u * width;\n      const y = 0;\n      const z = v * depth;\n      target.set(x, y, z);\n    }\n    super(plane, segmentsWidth, segmentsDepth);\n  }\n};\nexport { ParametricGeometries };","map":{"version":3,"names":["Curve","Vector3","ParametricGeometry","ParametricGeometries","klein","v","u","target","Math","PI","x","z","cos","sin","y","set","plane","width","height","mobius","t","a","mobius3d","phi","major","b","TubeGeometry","constructor","path","segments","radius","segmentsRadius","closed","numpoints","frames","computeFrenetFrames","tangents","normals","binormals","position","ParametricTube","i","floor","getPointAt","normal","binormal","cx","cy","copy","TorusKnotGeometry","tube","segmentsT","segmentsR","p","q","TorusKnotCurve","getPoint","optionalTarget","point","r","multiplyScalar","radiusSegments","extrudePath","SphereGeometry","size","sphere","PlaneGeometry","depth","segmentsWidth","segmentsDepth"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/geometries/ParametricGeometries.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3\n} from 'three';\n\nimport { ParametricGeometry } from './ParametricGeometry.js';\n\n/**\n * Experimenting of primitive geometry creation using Surface Parametric equations\n */\n\nconst ParametricGeometries = {\n\n\tklein: function ( v, u, target ) {\n\n\t\tu *= Math.PI;\n\t\tv *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tlet x, z;\n\t\tif ( u < Math.PI ) {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( u ) * Math.cos( v );\n\t\t\tz = - 8 * Math.sin( u ) - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( u ) * Math.cos( v );\n\n\t\t} else {\n\n\t\t\tx = 3 * Math.cos( u ) * ( 1 + Math.sin( u ) ) + ( 2 * ( 1 - Math.cos( u ) / 2 ) ) * Math.cos( v + Math.PI );\n\t\t\tz = - 8 * Math.sin( u );\n\n\t\t}\n\n\t\tconst y = - 2 * ( 1 - Math.cos( u ) / 2 ) * Math.sin( v );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tplane: function ( width, height ) {\n\n\t\treturn function ( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * height;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t};\n\n\t},\n\n\tmobius: function ( u, t, target ) {\n\n\t\t// flat mobius strip\n\t\t// http://www.wolframalpha.com/input/?i=M%C3%B6bius+strip+parametric+equations&lk=1&a=ClashPrefs_*Surface.MoebiusStrip.SurfaceProperty.ParametricEquations-\n\t\tu = u - 0.5;\n\t\tconst v = 2 * Math.PI * t;\n\n\t\tconst a = 2;\n\n\t\tconst x = Math.cos( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst y = Math.sin( v ) * ( a + u * Math.cos( v / 2 ) );\n\t\tconst z = u * Math.sin( v / 2 );\n\n\t\ttarget.set( x, y, z );\n\n\t},\n\n\tmobius3d: function ( u, t, target ) {\n\n\t\t// volumetric mobius strip\n\n\t\tu *= Math.PI;\n\t\tt *= 2 * Math.PI;\n\n\t\tu = u * 2;\n\t\tconst phi = u / 2;\n\t\tconst major = 2.25, a = 0.125, b = 0.65;\n\n\t\tlet x = a * Math.cos( t ) * Math.cos( phi ) - b * Math.sin( t ) * Math.sin( phi );\n\t\tconst z = a * Math.cos( t ) * Math.sin( phi ) + b * Math.sin( t ) * Math.cos( phi );\n\t\tconst y = ( major + x ) * Math.sin( u );\n\t\tx = ( major + x ) * Math.cos( u );\n\n\t\ttarget.set( x, y, z );\n\n\t}\n\n};\n\n\n/*********************************************\n *\n * Parametric Replacement for TubeGeometry\n *\n *********************************************/\n\nParametricGeometries.TubeGeometry = class TubeGeometry extends ParametricGeometry {\n\n\tconstructor( path, segments = 64, radius = 1, segmentsRadius = 8, closed = false ) {\n\n\t\tconst numpoints = segments + 1;\n\n\t\tconst frames = path.computeFrenetFrames( segments, closed ),\n\t\t\ttangents = frames.tangents,\n\t\t\tnormals = frames.normals,\n\t\t\tbinormals = frames.binormals;\n\n\t\tconst position = new Vector3();\n\n\t\tfunction ParametricTube( u, v, target ) {\n\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tconst i = Math.floor( u * ( numpoints - 1 ) );\n\n\t\t\tpath.getPointAt( u, position );\n\n\t\t\tconst normal = normals[ i ];\n\t\t\tconst binormal = binormals[ i ];\n\n\t\t\tconst cx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\n\t\t\tconst cy = radius * Math.sin( v );\n\n\t\t\tposition.x += cx * normal.x + cy * binormal.x;\n\t\t\tposition.y += cx * normal.y + cy * binormal.y;\n\t\t\tposition.z += cx * normal.z + cy * binormal.z;\n\n\t\t\ttarget.copy( position );\n\n\t\t}\n\n\t\tsuper( ParametricTube, segments, segmentsRadius );\n\n\t\t// proxy internals\n\n\t\tthis.tangents = tangents;\n\t\tthis.normals = normals;\n\t\tthis.binormals = binormals;\n\n\t\tthis.path = path;\n\t\tthis.segments = segments;\n\t\tthis.radius = radius;\n\t\tthis.segmentsRadius = segmentsRadius;\n\t\tthis.closed = closed;\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for TorusKnotGeometry\n  *\n  *********************************************/\nParametricGeometries.TorusKnotGeometry = class TorusKnotGeometry extends ParametricGeometries.TubeGeometry {\n\n\tconstructor( radius = 200, tube = 40, segmentsT = 64, segmentsR = 8, p = 2, q = 3 ) {\n\n\t\tclass TorusKnotCurve extends Curve {\n\n\t\t\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\t\t\tconst point = optionalTarget;\n\n\t\t\t\tt *= Math.PI * 2;\n\n\t\t\t\tconst r = 0.5;\n\n\t\t\t\tconst x = ( 1 + r * Math.cos( q * t ) ) * Math.cos( p * t );\n\t\t\t\tconst y = ( 1 + r * Math.cos( q * t ) ) * Math.sin( p * t );\n\t\t\t\tconst z = r * Math.sin( q * t );\n\n\t\t\t\treturn point.set( x, y, z ).multiplyScalar( radius );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst segments = segmentsT;\n\t\tconst radiusSegments = segmentsR;\n\t\tconst extrudePath = new TorusKnotCurve();\n\n\t\tsuper( extrudePath, segments, tube, radiusSegments, true, false );\n\n\t\tthis.radius = radius;\n\t\tthis.tube = tube;\n\t\tthis.segmentsT = segmentsT;\n\t\tthis.segmentsR = segmentsR;\n\t\tthis.p = p;\n\t\tthis.q = q;\n\n\t}\n\n};\n\n/*********************************************\n  *\n  * Parametric Replacement for SphereGeometry\n  *\n  *********************************************/\nParametricGeometries.SphereGeometry = class SphereGeometry extends ParametricGeometry {\n\n\tconstructor( size, u, v ) {\n\n\t\tfunction sphere( u, v, target ) {\n\n\t\t\tu *= Math.PI;\n\t\t\tv *= 2 * Math.PI;\n\n\t\t\tconst x = size * Math.sin( u ) * Math.cos( v );\n\t\t\tconst y = size * Math.sin( u ) * Math.sin( v );\n\t\t\tconst z = size * Math.cos( u );\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( sphere, u, v );\n\n\t}\n\n};\n\n\n/*********************************************\n  *\n  * Parametric Replacement for PlaneGeometry\n  *\n  *********************************************/\n\nParametricGeometries.PlaneGeometry = class PlaneGeometry extends ParametricGeometry {\n\n\tconstructor( width, depth, segmentsWidth, segmentsDepth ) {\n\n\t\tfunction plane( u, v, target ) {\n\n\t\t\tconst x = u * width;\n\t\t\tconst y = 0;\n\t\t\tconst z = v * depth;\n\n\t\t\ttarget.set( x, y, z );\n\n\t\t}\n\n\t\tsuper( plane, segmentsWidth, segmentsDepth );\n\n\t}\n\n};\n\nexport { ParametricGeometries };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}