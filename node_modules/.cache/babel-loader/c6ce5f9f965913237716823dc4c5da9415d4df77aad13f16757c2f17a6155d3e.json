{"ast":null,"code":"import { WebGLRenderTarget, MeshNormalMaterial, ShaderMaterial, Vector2, Vector4, DepthTexture, NearestFilter, HalfFloatType } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nclass RenderPixelatedPass extends Pass {\n  constructor(pixelSize, scene, camera, options = {}) {\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.pixelatedMaterial = this.createPixelatedMaterial();\n    this.normalMaterial = new MeshNormalMaterial();\n    this.fsQuad = new FullScreenQuad(this.pixelatedMaterial);\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = options.normalEdgeStrength || 0.3;\n    this.depthEdgeStrength = options.depthEdgeStrength || 0.4;\n    this.beautyRenderTarget = new WebGLRenderTarget();\n    this.beautyRenderTarget.texture.minFilter = NearestFilter;\n    this.beautyRenderTarget.texture.magFilter = NearestFilter;\n    this.beautyRenderTarget.texture.type = HalfFloatType;\n    this.beautyRenderTarget.depthTexture = new DepthTexture();\n    this.normalRenderTarget = new WebGLRenderTarget();\n    this.normalRenderTarget.texture.minFilter = NearestFilter;\n    this.normalRenderTarget.texture.magFilter = NearestFilter;\n    this.normalRenderTarget.texture.type = HalfFloatType;\n  }\n  dispose() {\n    this.beautyRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.pixelatedMaterial.dispose();\n    this.normalMaterial.dispose();\n    this.fsQuad.dispose();\n  }\n  setSize(width, height) {\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    this.beautyRenderTarget.setSize(x, y);\n    this.normalRenderTarget.setSize(x, y);\n    this.fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.beautyRenderTarget.texture;\n    uniforms.tDepth.value = this.beautyRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n    this.fsQuad.render(renderer);\n  }\n  createPixelatedMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n      fragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0)\n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0;\n\t\t\t\t\tif (normalEdgeStrength > 0.0)\n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t`\n    });\n  }\n}\nexport { RenderPixelatedPass };","map":{"version":3,"names":["WebGLRenderTarget","MeshNormalMaterial","ShaderMaterial","Vector2","Vector4","DepthTexture","NearestFilter","HalfFloatType","Pass","FullScreenQuad","RenderPixelatedPass","constructor","pixelSize","scene","camera","options","resolution","renderResolution","pixelatedMaterial","createPixelatedMaterial","normalMaterial","fsQuad","normalEdgeStrength","depthEdgeStrength","beautyRenderTarget","texture","minFilter","magFilter","type","depthTexture","normalRenderTarget","dispose","setSize","width","height","set","x","y","material","uniforms","value","setPixelSize","render","renderer","writeBuffer","setRenderTarget","overrideMaterial_old","overrideMaterial","tDiffuse","tDepth","tNormal","renderToScreen","clear","vertexShader","fragmentShader"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import {\n\tWebGLRenderTarget,\n\tMeshNormalMaterial,\n\tShaderMaterial,\n\tVector2,\n\tVector4,\n\tDepthTexture,\n\tNearestFilter,\n\tHalfFloatType\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass RenderPixelatedPass extends Pass {\n\n\tconstructor( pixelSize, scene, camera, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.pixelSize = pixelSize;\n\t\tthis.resolution = new Vector2();\n\t\tthis.renderResolution = new Vector2();\n\n\t\tthis.pixelatedMaterial = this.createPixelatedMaterial();\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\n\t\tthis.fsQuad = new FullScreenQuad( this.pixelatedMaterial );\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.normalEdgeStrength = options.normalEdgeStrength || 0.3;\n\t\tthis.depthEdgeStrength = options.depthEdgeStrength || 0.4;\n\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget();\n\t\tthis.beautyRenderTarget.texture.minFilter = NearestFilter;\n\t\tthis.beautyRenderTarget.texture.magFilter = NearestFilter;\n\t\tthis.beautyRenderTarget.texture.type = HalfFloatType;\n\t\tthis.beautyRenderTarget.depthTexture = new DepthTexture();\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget();\n\t\tthis.normalRenderTarget.texture.minFilter = NearestFilter;\n\t\tthis.normalRenderTarget.texture.magFilter = NearestFilter;\n\t\tthis.normalRenderTarget.texture.type = HalfFloatType;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\n\t\tthis.pixelatedMaterial.dispose();\n\t\tthis.normalMaterial.dispose();\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.resolution.set( width, height );\n\t\tthis.renderResolution.set( ( width / this.pixelSize ) | 0, ( height / this.pixelSize ) | 0 );\n\t\tconst { x, y } = this.renderResolution;\n\t\tthis.beautyRenderTarget.setSize( x, y );\n\t\tthis.normalRenderTarget.setSize( x, y );\n\t\tthis.fsQuad.material.uniforms.resolution.value.set( x, y, 1 / x, 1 / y );\n\n\t}\n\n\tsetPixelSize( pixelSize ) {\n\n\t\tthis.pixelSize = pixelSize;\n\t\tthis.setSize( this.resolution.x, this.resolution.y );\n\n\t}\n\n\trender( renderer, writeBuffer ) {\n\n\t\tconst uniforms = this.fsQuad.material.uniforms;\n\t\tuniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n\t\tuniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tconst overrideMaterial_old = this.scene.overrideMaterial;\n\t\trenderer.setRenderTarget( this.normalRenderTarget );\n\t\tthis.scene.overrideMaterial = this.normalMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = overrideMaterial_old;\n\n\t\tuniforms.tDiffuse.value = this.beautyRenderTarget.texture;\n\t\tuniforms.tDepth.value = this.beautyRenderTarget.depthTexture;\n\t\tuniforms.tNormal.value = this.normalRenderTarget.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n\tcreatePixelatedMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\t\t\tuniforms: {\n\t\t\t\ttDiffuse: { value: null },\n\t\t\t\ttDepth: { value: null },\n\t\t\t\ttNormal: { value: null },\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector4(\n\t\t\t\t\t\tthis.renderResolution.x,\n\t\t\t\t\t\tthis.renderResolution.y,\n\t\t\t\t\t\t1 / this.renderResolution.x,\n\t\t\t\t\t\t1 / this.renderResolution.y,\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\tnormalEdgeStrength: { value: 0 },\n\t\t\t\tdepthEdgeStrength: { value: 0 }\n\t\t\t},\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0)\n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0;\n\t\t\t\t\tif (normalEdgeStrength > 0.0)\n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t`\n\t\t} );\n\n\t}\n\n}\n\nexport { RenderPixelatedPass };\n"],"mappings":"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,EAAE,IAAIpC,OAAO,CACjB,IAAI,CAACa,gBAAgB,CAACmB,CAAC,EACvB,IAAI,CAACnB,gBAAgB,CAACoB,CAAC,EACvB,CAAC,GAAG,IAAI,CAACpB,gBAAgB,CAACmB,CAAC,EAC3B,CAAC,GAAG,IAAI,CAACnB,gBAAgB,CAACoB,CAC3B;QACD,CAAC;QACDf,kBAAkB,EAAE;UAAEkB,KAAK,EAAE;QAAE,CAAC;QAChCjB,iBAAiB,EAAE;UAAEiB,KAAK,EAAE;QAAE;MAC/B,CAAC;MACDa,YAAY,EAAE,UAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;MACDC,cAAc,EAAE,UAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACE,CAAE,CAAC;EAEJ;AAED;AAEA,SAAS5C,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}