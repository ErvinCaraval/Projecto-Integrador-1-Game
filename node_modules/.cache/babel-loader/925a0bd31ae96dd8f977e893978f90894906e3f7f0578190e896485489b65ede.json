{"ast":null,"code":"import { ClampToEdgeWrapping, DoubleSide, LinearFilter, Mesh, MeshBasicMaterial, PlaneGeometry, Texture, SRGBColorSpace } from 'three';\n\n/**\n * This class has been made to hold a slice of a volume data\n * @class\n * @param   {Volume} volume    The associated volume\n * @param   {number}       [index=0] The index of the slice\n * @param   {string}       [axis='z']      For now only 'x', 'y' or 'z' but later it will change to a normal vector\n * @see Volume\n */\nclass VolumeSlice {\n  constructor(volume, index, axis) {\n    const slice = this;\n    /**\n     * @member {Volume} volume The associated volume\n     */\n    this.volume = volume;\n    /**\n     * @member {Number} index The index of the slice, if changed, will automatically call updateGeometry at the next repaint\n     */\n    index = index || 0;\n    Object.defineProperty(this, 'index', {\n      get: function () {\n        return index;\n      },\n      set: function (value) {\n        index = value;\n        slice.geometryNeedsUpdate = true;\n        return index;\n      }\n    });\n    /**\n     * @member {String} axis The normal axis\n     */\n    this.axis = axis || 'z';\n\n    /**\n     * @member {HTMLCanvasElement} canvas The final canvas used for the texture\n     */\n    /**\n     * @member {CanvasRenderingContext2D} ctx Context of the canvas\n     */\n    this.canvas = document.createElement('canvas');\n    /**\n     * @member {HTMLCanvasElement} canvasBuffer The intermediary canvas used to paint the data\n     */\n    /**\n     * @member {CanvasRenderingContext2D} ctxBuffer Context of the canvas buffer\n     */\n    this.canvasBuffer = document.createElement('canvas');\n    this.updateGeometry();\n    const canvasMap = new Texture(this.canvas);\n    canvasMap.minFilter = LinearFilter;\n    canvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n    canvasMap.colorSpace = SRGBColorSpace;\n    const material = new MeshBasicMaterial({\n      map: canvasMap,\n      side: DoubleSide,\n      transparent: true\n    });\n    /**\n     * @member {Mesh} mesh The mesh ready to get used in the scene\n     */\n    this.mesh = new Mesh(this.geometry, material);\n    this.mesh.matrixAutoUpdate = false;\n    /**\n     * @member {Boolean} geometryNeedsUpdate If set to true, updateGeometry will be triggered at the next repaint\n     */\n    this.geometryNeedsUpdate = true;\n    this.repaint();\n\n    /**\n     * @member {Number} iLength Width of slice in the original coordinate system, corresponds to the width of the buffer canvas\n     */\n\n    /**\n     * @member {Number} jLength Height of slice in the original coordinate system, corresponds to the height of the buffer canvas\n     */\n\n    /**\n     * @member {Function} sliceAccess Function that allow the slice to access right data\n     * @see Volume.extractPerpendicularPlane\n     * @param {Number} i The first coordinate\n     * @param {Number} j The second coordinate\n     * @returns {Number} the index corresponding to the voxel in volume.data of the given position in the slice\n     */\n  }\n\n  /**\n   * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n   * @memberof VolumeSlice\n   */\n  repaint() {\n    if (this.geometryNeedsUpdate) {\n      this.updateGeometry();\n    }\n    const iLength = this.iLength,\n      jLength = this.jLength,\n      sliceAccess = this.sliceAccess,\n      volume = this.volume,\n      canvas = this.canvasBuffer,\n      ctx = this.ctxBuffer;\n\n    // get the imageData and pixel array from the canvas\n    const imgData = ctx.getImageData(0, 0, iLength, jLength);\n    const data = imgData.data;\n    const volumeData = volume.data;\n    const upperThreshold = volume.upperThreshold;\n    const lowerThreshold = volume.lowerThreshold;\n    const windowLow = volume.windowLow;\n    const windowHigh = volume.windowHigh;\n\n    // manipulate some pixel elements\n    let pixelCount = 0;\n    if (volume.dataType === 'label') {\n      //this part is currently useless but will be used when colortables will be handled\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let label = volumeData[sliceAccess(i, j)];\n          label = label >= this.colorMap.length ? label % this.colorMap.length + 1 : label;\n          const color = this.colorMap[label];\n          data[4 * pixelCount] = color >> 24 & 0xff;\n          data[4 * pixelCount + 1] = color >> 16 & 0xff;\n          data[4 * pixelCount + 2] = color >> 8 & 0xff;\n          data[4 * pixelCount + 3] = color & 0xff;\n          pixelCount++;\n        }\n      }\n    } else {\n      for (let j = 0; j < jLength; j++) {\n        for (let i = 0; i < iLength; i++) {\n          let value = volumeData[sliceAccess(i, j)];\n          let alpha = 0xff;\n          //apply threshold\n          alpha = upperThreshold >= value ? lowerThreshold <= value ? alpha : 0 : 0;\n          //apply window level\n          value = Math.floor(255 * (value - windowLow) / (windowHigh - windowLow));\n          value = value > 255 ? 255 : value < 0 ? 0 : value | 0;\n          data[4 * pixelCount] = value;\n          data[4 * pixelCount + 1] = value;\n          data[4 * pixelCount + 2] = value;\n          data[4 * pixelCount + 3] = alpha;\n          pixelCount++;\n        }\n      }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    this.ctx.drawImage(canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height);\n    this.mesh.material.map.needsUpdate = true;\n  }\n\n  /**\n   * @member {Function} Refresh the geometry according to axis and index\n   * @see Volume.extractPerpendicularPlane\n   * @memberof VolumeSlice\n   */\n  updateGeometry() {\n    const extracted = this.volume.extractPerpendicularPlane(this.axis, this.index);\n    this.sliceAccess = extracted.sliceAccess;\n    this.jLength = extracted.jLength;\n    this.iLength = extracted.iLength;\n    this.matrix = extracted.matrix;\n    this.canvas.width = extracted.planeWidth;\n    this.canvas.height = extracted.planeHeight;\n    this.canvasBuffer.width = this.iLength;\n    this.canvasBuffer.height = this.jLength;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctxBuffer = this.canvasBuffer.getContext('2d');\n    if (this.geometry) this.geometry.dispose(); // dispose existing geometry\n\n    this.geometry = new PlaneGeometry(extracted.planeWidth, extracted.planeHeight);\n    if (this.mesh) {\n      this.mesh.geometry = this.geometry;\n      //reset mesh matrix\n      this.mesh.matrix.identity();\n      this.mesh.applyMatrix4(this.matrix);\n    }\n    this.geometryNeedsUpdate = false;\n  }\n}\nexport { VolumeSlice };","map":{"version":3,"names":["ClampToEdgeWrapping","DoubleSide","LinearFilter","Mesh","MeshBasicMaterial","PlaneGeometry","Texture","SRGBColorSpace","VolumeSlice","constructor","volume","index","axis","slice","Object","defineProperty","get","set","value","geometryNeedsUpdate","canvas","document","createElement","canvasBuffer","updateGeometry","canvasMap","minFilter","wrapS","wrapT","colorSpace","material","map","side","transparent","mesh","geometry","matrixAutoUpdate","repaint","iLength","jLength","sliceAccess","ctx","ctxBuffer","imgData","getImageData","data","volumeData","upperThreshold","lowerThreshold","windowLow","windowHigh","pixelCount","dataType","j","i","label","colorMap","length","color","alpha","Math","floor","putImageData","drawImage","width","height","needsUpdate","extracted","extractPerpendicularPlane","matrix","planeWidth","planeHeight","getContext","dispose","identity","applyMatrix4"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/misc/VolumeSlice.js"],"sourcesContent":["import {\n\tClampToEdgeWrapping,\n\tDoubleSide,\n\tLinearFilter,\n\tMesh,\n\tMeshBasicMaterial,\n\tPlaneGeometry,\n\tTexture,\n\tSRGBColorSpace\n} from 'three';\n\n/**\n * This class has been made to hold a slice of a volume data\n * @class\n * @param   {Volume} volume    The associated volume\n * @param   {number}       [index=0] The index of the slice\n * @param   {string}       [axis='z']      For now only 'x', 'y' or 'z' but later it will change to a normal vector\n * @see Volume\n */\nclass VolumeSlice {\n\n\tconstructor( volume, index, axis ) {\n\n\t\tconst slice = this;\n\t\t/**\n\t\t * @member {Volume} volume The associated volume\n\t\t */\n\t\tthis.volume = volume;\n\t\t/**\n\t\t * @member {Number} index The index of the slice, if changed, will automatically call updateGeometry at the next repaint\n\t\t */\n\t\tindex = index || 0;\n\t\tObject.defineProperty( this, 'index', {\n\t\t\tget: function () {\n\n\t\t\t\treturn index;\n\n\t\t\t},\n\t\t\tset: function ( value ) {\n\n\t\t\t\tindex = value;\n\t\t\t\tslice.geometryNeedsUpdate = true;\n\t\t\t\treturn index;\n\n\t\t\t}\n\t\t} );\n\t\t/**\n\t\t * @member {String} axis The normal axis\n\t\t */\n\t\tthis.axis = axis || 'z';\n\n\t\t/**\n\t\t * @member {HTMLCanvasElement} canvas The final canvas used for the texture\n\t\t */\n\t\t/**\n\t\t * @member {CanvasRenderingContext2D} ctx Context of the canvas\n\t\t */\n\t\tthis.canvas = document.createElement( 'canvas' );\n\t\t/**\n\t\t * @member {HTMLCanvasElement} canvasBuffer The intermediary canvas used to paint the data\n\t\t */\n\t\t/**\n\t\t * @member {CanvasRenderingContext2D} ctxBuffer Context of the canvas buffer\n\t\t */\n\t\tthis.canvasBuffer = document.createElement( 'canvas' );\n\t\tthis.updateGeometry();\n\n\n\t\tconst canvasMap = new Texture( this.canvas );\n\t\tcanvasMap.minFilter = LinearFilter;\n\t\tcanvasMap.wrapS = canvasMap.wrapT = ClampToEdgeWrapping;\n\t\tcanvasMap.colorSpace = SRGBColorSpace;\n\t\tconst material = new MeshBasicMaterial( { map: canvasMap, side: DoubleSide, transparent: true } );\n\t\t/**\n\t\t * @member {Mesh} mesh The mesh ready to get used in the scene\n\t\t */\n\t\tthis.mesh = new Mesh( this.geometry, material );\n\t\tthis.mesh.matrixAutoUpdate = false;\n\t\t/**\n\t\t * @member {Boolean} geometryNeedsUpdate If set to true, updateGeometry will be triggered at the next repaint\n\t\t */\n\t\tthis.geometryNeedsUpdate = true;\n\t\tthis.repaint();\n\n\t\t/**\n\t\t * @member {Number} iLength Width of slice in the original coordinate system, corresponds to the width of the buffer canvas\n\t\t */\n\n\t\t/**\n\t\t * @member {Number} jLength Height of slice in the original coordinate system, corresponds to the height of the buffer canvas\n\t\t */\n\n\t\t/**\n\t\t * @member {Function} sliceAccess Function that allow the slice to access right data\n\t\t * @see Volume.extractPerpendicularPlane\n\t\t * @param {Number} i The first coordinate\n\t\t * @param {Number} j The second coordinate\n\t\t * @returns {Number} the index corresponding to the voxel in volume.data of the given position in the slice\n\t\t */\n\n\n\t}\n\n\t/**\n\t * @member {Function} repaint Refresh the texture and the geometry if geometryNeedsUpdate is set to true\n\t * @memberof VolumeSlice\n\t */\n\trepaint() {\n\n\t\tif ( this.geometryNeedsUpdate ) {\n\n\t\t\tthis.updateGeometry();\n\n\t\t}\n\n\t\tconst iLength = this.iLength,\n\t\t\tjLength = this.jLength,\n\t\t\tsliceAccess = this.sliceAccess,\n\t\t\tvolume = this.volume,\n\t\t\tcanvas = this.canvasBuffer,\n\t\t\tctx = this.ctxBuffer;\n\n\n\t\t// get the imageData and pixel array from the canvas\n\t\tconst imgData = ctx.getImageData( 0, 0, iLength, jLength );\n\t\tconst data = imgData.data;\n\t\tconst volumeData = volume.data;\n\t\tconst upperThreshold = volume.upperThreshold;\n\t\tconst lowerThreshold = volume.lowerThreshold;\n\t\tconst windowLow = volume.windowLow;\n\t\tconst windowHigh = volume.windowHigh;\n\n\t\t// manipulate some pixel elements\n\t\tlet pixelCount = 0;\n\n\t\tif ( volume.dataType === 'label' ) {\n\n\t\t\t//this part is currently useless but will be used when colortables will be handled\n\t\t\tfor ( let j = 0; j < jLength; j ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < iLength; i ++ ) {\n\n\t\t\t\t\tlet label = volumeData[ sliceAccess( i, j ) ];\n\t\t\t\t\tlabel = label >= this.colorMap.length ? ( label % this.colorMap.length ) + 1 : label;\n\t\t\t\t\tconst color = this.colorMap[ label ];\n\t\t\t\t\tdata[ 4 * pixelCount ] = ( color >> 24 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 1 ] = ( color >> 16 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 2 ] = ( color >> 8 ) & 0xff;\n\t\t\t\t\tdata[ 4 * pixelCount + 3 ] = color & 0xff;\n\t\t\t\t\tpixelCount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tfor ( let j = 0; j < jLength; j ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < iLength; i ++ ) {\n\n\t\t\t\t\tlet value = volumeData[ sliceAccess( i, j ) ];\n\t\t\t\t\tlet alpha = 0xff;\n\t\t\t\t\t//apply threshold\n\t\t\t\t\talpha = upperThreshold >= value ? ( lowerThreshold <= value ? alpha : 0 ) : 0;\n\t\t\t\t\t//apply window level\n\t\t\t\t\tvalue = Math.floor( 255 * ( value - windowLow ) / ( windowHigh - windowLow ) );\n\t\t\t\t\tvalue = value > 255 ? 255 : ( value < 0 ? 0 : value | 0 );\n\n\t\t\t\t\tdata[ 4 * pixelCount ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 1 ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 2 ] = value;\n\t\t\t\t\tdata[ 4 * pixelCount + 3 ] = alpha;\n\t\t\t\t\tpixelCount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tctx.putImageData( imgData, 0, 0 );\n\t\tthis.ctx.drawImage( canvas, 0, 0, iLength, jLength, 0, 0, this.canvas.width, this.canvas.height );\n\n\n\t\tthis.mesh.material.map.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * @member {Function} Refresh the geometry according to axis and index\n\t * @see Volume.extractPerpendicularPlane\n\t * @memberof VolumeSlice\n\t */\n\tupdateGeometry() {\n\n\t\tconst extracted = this.volume.extractPerpendicularPlane( this.axis, this.index );\n\t\tthis.sliceAccess = extracted.sliceAccess;\n\t\tthis.jLength = extracted.jLength;\n\t\tthis.iLength = extracted.iLength;\n\t\tthis.matrix = extracted.matrix;\n\n\t\tthis.canvas.width = extracted.planeWidth;\n\t\tthis.canvas.height = extracted.planeHeight;\n\t\tthis.canvasBuffer.width = this.iLength;\n\t\tthis.canvasBuffer.height = this.jLength;\n\t\tthis.ctx = this.canvas.getContext( '2d' );\n\t\tthis.ctxBuffer = this.canvasBuffer.getContext( '2d' );\n\n\t\tif ( this.geometry ) this.geometry.dispose(); // dispose existing geometry\n\n\t\tthis.geometry = new PlaneGeometry( extracted.planeWidth, extracted.planeHeight );\n\n\t\tif ( this.mesh ) {\n\n\t\t\tthis.mesh.geometry = this.geometry;\n\t\t\t//reset mesh matrix\n\t\t\tthis.mesh.matrix.identity();\n\t\t\tthis.mesh.applyMatrix4( this.matrix );\n\n\t\t}\n\n\t\tthis.geometryNeedsUpdate = false;\n\n\t}\n\n}\n\nexport { VolumeSlice };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}