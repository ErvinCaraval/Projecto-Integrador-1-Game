{"ast":null,"code":"import { Bone, BoxGeometry, CapsuleGeometry, Color, Euler, Matrix4, Mesh, MeshBasicMaterial, Object3D, Quaternion, SphereGeometry, Vector3 } from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nclass MMDPhysics {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  constructor(mesh, rigidBodyParams, constraintParams = [], params = {}) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n\n  /**\n   * Advances Physics calculation and updates bones.\n   *\n   * @param {Number} delta - time in second\n   * @return {MMDPhysics}\n   */\n  update(delta) {\n    const manager = this.manager;\n    const mesh = this.mesh;\n\n    // rigid bodies and constrains are for\n    // mesh's world scale (1, 1, 1).\n    // Convert to (1, 1, 1) if it isn't.\n\n    let isNonDefaultScale = false;\n    const position = manager.allocThreeVector3();\n    const quaternion = manager.allocThreeQuaternion();\n    const scale = manager.allocThreeVector3();\n    mesh.matrixWorld.decompose(position, quaternion, scale);\n    if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n      isNonDefaultScale = true;\n    }\n    let parent;\n    if (isNonDefaultScale) {\n      parent = mesh.parent;\n      if (parent !== null) mesh.parent = null;\n      scale.copy(this.mesh.scale);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n    }\n\n    // calculate physics and update bones\n\n    this._updateRigidBodies();\n    this._stepSimulation(delta);\n    this._updateBones();\n\n    // restore mesh if converted above\n\n    if (isNonDefaultScale) {\n      if (parent !== null) mesh.parent = parent;\n      mesh.scale.copy(scale);\n    }\n    manager.freeThreeVector3(scale);\n    manager.freeThreeQuaternion(quaternion);\n    manager.freeThreeVector3(position);\n    return this;\n  }\n\n  /**\n   * Resets rigid bodies transorm to current bone's.\n   *\n   * @return {MMDPhysics}\n   */\n  reset() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].reset();\n    }\n    return this;\n  }\n\n  /**\n   * Warm ups Rigid bodies. Calculates cycles steps.\n   *\n   * @param {Integer} cycles\n   * @return {MMDPhysics}\n   */\n  warmup(cycles) {\n    for (let i = 0; i < cycles; i++) {\n      this.update(1 / 60);\n    }\n    return this;\n  }\n\n  /**\n   * Sets gravity.\n   *\n   * @param {Vector3} gravity\n   * @return {MMDPhysicsHelper}\n   */\n  setGravity(gravity) {\n    this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n    this.gravity.copy(gravity);\n    return this;\n  }\n\n  /**\n   * Creates MMDPhysicsHelper\n   *\n   * @return {MMDPhysicsHelper}\n   */\n  createHelper() {\n    return new MMDPhysicsHelper(this.mesh, this);\n  }\n\n  // private methods\n\n  _init(mesh, rigidBodyParams, constraintParams) {\n    const manager = this.manager;\n\n    // rigid body/constraint parameters are for\n    // mesh's default world transform as position(0, 0, 0),\n    // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n    const parent = mesh.parent;\n    if (parent !== null) mesh.parent = null;\n    const currentPosition = manager.allocThreeVector3();\n    const currentQuaternion = manager.allocThreeQuaternion();\n    const currentScale = manager.allocThreeVector3();\n    currentPosition.copy(mesh.position);\n    currentQuaternion.copy(mesh.quaternion);\n    currentScale.copy(mesh.scale);\n    mesh.position.set(0, 0, 0);\n    mesh.quaternion.set(0, 0, 0, 1);\n    mesh.scale.set(1, 1, 1);\n    mesh.updateMatrixWorld(true);\n    if (this.world === null) {\n      this.world = this._createWorld();\n      this.setGravity(this.gravity);\n    }\n    this._initRigidBodies(rigidBodyParams);\n    this._initConstraints(constraintParams);\n    if (parent !== null) mesh.parent = parent;\n    mesh.position.copy(currentPosition);\n    mesh.quaternion.copy(currentQuaternion);\n    mesh.scale.copy(currentScale);\n    mesh.updateMatrixWorld(true);\n    this.reset();\n    manager.freeThreeVector3(currentPosition);\n    manager.freeThreeQuaternion(currentQuaternion);\n    manager.freeThreeVector3(currentScale);\n  }\n  _createWorld() {\n    const config = new Ammo.btDefaultCollisionConfiguration();\n    const dispatcher = new Ammo.btCollisionDispatcher(config);\n    const cache = new Ammo.btDbvtBroadphase();\n    const solver = new Ammo.btSequentialImpulseConstraintSolver();\n    const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n    return world;\n  }\n  _initRigidBodies(rigidBodies) {\n    for (let i = 0, il = rigidBodies.length; i < il; i++) {\n      this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n    }\n  }\n  _initConstraints(constraints) {\n    for (let i = 0, il = constraints.length; i < il; i++) {\n      const params = constraints[i];\n      const bodyA = this.bodies[params.rigidBodyIndex1];\n      const bodyB = this.bodies[params.rigidBodyIndex2];\n      this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n    }\n  }\n  _stepSimulation(delta) {\n    const unitStep = this.unitStep;\n    let stepTime = delta;\n    let maxStepNum = (delta / unitStep | 0) + 1;\n    if (stepTime < unitStep) {\n      stepTime = unitStep;\n      maxStepNum = 1;\n    }\n    if (maxStepNum > this.maxStepNum) {\n      maxStepNum = this.maxStepNum;\n    }\n    this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n  }\n  _updateRigidBodies() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateFromBone();\n    }\n  }\n  _updateBones() {\n    for (let i = 0, il = this.bodies.length; i < il; i++) {\n      this.bodies[i].updateBone();\n    }\n  }\n}\n\n/**\n * This manager's responsibilies are\n *\n * 1. manage Ammo.js and Three.js object resources and\n *    improve the performance and the memory consumption by\n *    reusing objects.\n *\n * 2. provide simple Ammo object operations.\n */\nclass ResourceManager {\n  constructor() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = [];\n\n    // for Ammo.js\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n  allocThreeVector3() {\n    return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n  }\n  freeThreeVector3(v) {\n    this.threeVector3s.push(v);\n  }\n  allocThreeMatrix4() {\n    return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n  }\n  freeThreeMatrix4(m) {\n    this.threeMatrix4s.push(m);\n  }\n  allocThreeQuaternion() {\n    return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n  }\n  freeThreeQuaternion(q) {\n    this.threeQuaternions.push(q);\n  }\n  allocThreeEuler() {\n    return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n  }\n  freeThreeEuler(e) {\n    this.threeEulers.push(e);\n  }\n  allocTransform() {\n    return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n  }\n  freeTransform(t) {\n    this.transforms.push(t);\n  }\n  allocQuaternion() {\n    return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n  }\n  freeQuaternion(q) {\n    this.quaternions.push(q);\n  }\n  allocVector3() {\n    return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n  }\n  freeVector3(v) {\n    this.vector3s.push(v);\n  }\n  setIdentity(t) {\n    t.setIdentity();\n  }\n  getBasis(t) {\n    var q = this.allocQuaternion();\n    t.getBasis().getRotation(q);\n    return q;\n  }\n  getBasisAsMatrix3(t) {\n    var q = this.getBasis(t);\n    var m = this.quaternionToMatrix3(q);\n    this.freeQuaternion(q);\n    return m;\n  }\n  getOrigin(t) {\n    return t.getOrigin();\n  }\n  setOrigin(t, v) {\n    t.getOrigin().setValue(v.x(), v.y(), v.z());\n  }\n  copyOrigin(t1, t2) {\n    var o = t2.getOrigin();\n    this.setOrigin(t1, o);\n  }\n  setBasis(t, q) {\n    t.setRotation(q);\n  }\n  setBasisFromMatrix3(t, m) {\n    var q = this.matrix3ToQuaternion(m);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  setOriginFromArray3(t, a) {\n    t.getOrigin().setValue(a[0], a[1], a[2]);\n  }\n  setOriginFromThreeVector3(t, v) {\n    t.getOrigin().setValue(v.x, v.y, v.z);\n  }\n  setBasisFromArray3(t, a) {\n    var thQ = this.allocThreeQuaternion();\n    var thE = this.allocThreeEuler();\n    thE.set(a[0], a[1], a[2]);\n    this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n    this.freeThreeEuler(thE);\n    this.freeThreeQuaternion(thQ);\n  }\n  setBasisFromThreeQuaternion(t, a) {\n    var q = this.allocQuaternion();\n    q.setX(a.x);\n    q.setY(a.y);\n    q.setZ(a.z);\n    q.setW(a.w);\n    this.setBasis(t, q);\n    this.freeQuaternion(q);\n  }\n  multiplyTransforms(t1, t2) {\n    var t = this.allocTransform();\n    this.setIdentity(t);\n    var m1 = this.getBasisAsMatrix3(t1);\n    var m2 = this.getBasisAsMatrix3(t2);\n    var o1 = this.getOrigin(t1);\n    var o2 = this.getOrigin(t2);\n    var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n    var v2 = this.addVector3(v1, o1);\n    this.setOrigin(t, v2);\n    var m3 = this.multiplyMatrices3(m1, m2);\n    this.setBasisFromMatrix3(t, m3);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t;\n  }\n  inverseTransform(t) {\n    var t2 = this.allocTransform();\n    var m1 = this.getBasisAsMatrix3(t);\n    var o = this.getOrigin(t);\n    var m2 = this.transposeMatrix3(m1);\n    var v1 = this.negativeVector3(o);\n    var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n    this.setOrigin(t2, v2);\n    this.setBasisFromMatrix3(t2, m2);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return t2;\n  }\n  multiplyMatrices3(m1, m2) {\n    var m3 = [];\n    var v10 = this.rowOfMatrix3(m1, 0);\n    var v11 = this.rowOfMatrix3(m1, 1);\n    var v12 = this.rowOfMatrix3(m1, 2);\n    var v20 = this.columnOfMatrix3(m2, 0);\n    var v21 = this.columnOfMatrix3(m2, 1);\n    var v22 = this.columnOfMatrix3(m2, 2);\n    m3[0] = this.dotVectors3(v10, v20);\n    m3[1] = this.dotVectors3(v10, v21);\n    m3[2] = this.dotVectors3(v10, v22);\n    m3[3] = this.dotVectors3(v11, v20);\n    m3[4] = this.dotVectors3(v11, v21);\n    m3[5] = this.dotVectors3(v11, v22);\n    m3[6] = this.dotVectors3(v12, v20);\n    m3[7] = this.dotVectors3(v12, v21);\n    m3[8] = this.dotVectors3(v12, v22);\n    this.freeVector3(v10);\n    this.freeVector3(v11);\n    this.freeVector3(v12);\n    this.freeVector3(v20);\n    this.freeVector3(v21);\n    this.freeVector3(v22);\n    return m3;\n  }\n  addVector3(v1, v2) {\n    var v = this.allocVector3();\n    v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n    return v;\n  }\n  dotVectors3(v1, v2) {\n    return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n  }\n  rowOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n    return v;\n  }\n  columnOfMatrix3(m, i) {\n    var v = this.allocVector3();\n    v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n    return v;\n  }\n  negativeVector3(v) {\n    var v2 = this.allocVector3();\n    v2.setValue(-v.x(), -v.y(), -v.z());\n    return v2;\n  }\n  multiplyMatrix3ByVector3(m, v) {\n    var v4 = this.allocVector3();\n    var v0 = this.rowOfMatrix3(m, 0);\n    var v1 = this.rowOfMatrix3(m, 1);\n    var v2 = this.rowOfMatrix3(m, 2);\n    var x = this.dotVectors3(v0, v);\n    var y = this.dotVectors3(v1, v);\n    var z = this.dotVectors3(v2, v);\n    v4.setValue(x, y, z);\n    this.freeVector3(v0);\n    this.freeVector3(v1);\n    this.freeVector3(v2);\n    return v4;\n  }\n  transposeMatrix3(m) {\n    var m2 = [];\n    m2[0] = m[0];\n    m2[1] = m[3];\n    m2[2] = m[6];\n    m2[3] = m[1];\n    m2[4] = m[4];\n    m2[5] = m[7];\n    m2[6] = m[2];\n    m2[7] = m[5];\n    m2[8] = m[8];\n    return m2;\n  }\n  quaternionToMatrix3(q) {\n    var m = [];\n    var x = q.x();\n    var y = q.y();\n    var z = q.z();\n    var w = q.w();\n    var xx = x * x;\n    var yy = y * y;\n    var zz = z * z;\n    var xy = x * y;\n    var yz = y * z;\n    var zx = z * x;\n    var xw = x * w;\n    var yw = y * w;\n    var zw = z * w;\n    m[0] = 1 - 2 * (yy + zz);\n    m[1] = 2 * (xy - zw);\n    m[2] = 2 * (zx + yw);\n    m[3] = 2 * (xy + zw);\n    m[4] = 1 - 2 * (zz + xx);\n    m[5] = 2 * (yz - xw);\n    m[6] = 2 * (zx - yw);\n    m[7] = 2 * (yz + xw);\n    m[8] = 1 - 2 * (xx + yy);\n    return m;\n  }\n  matrix3ToQuaternion(m) {\n    var t = m[0] + m[4] + m[8];\n    var s, x, y, z, w;\n    if (t > 0) {\n      s = Math.sqrt(t + 1.0) * 2;\n      w = 0.25 * s;\n      x = (m[7] - m[5]) / s;\n      y = (m[2] - m[6]) / s;\n      z = (m[3] - m[1]) / s;\n    } else if (m[0] > m[4] && m[0] > m[8]) {\n      s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n      w = (m[7] - m[5]) / s;\n      x = 0.25 * s;\n      y = (m[1] + m[3]) / s;\n      z = (m[2] + m[6]) / s;\n    } else if (m[4] > m[8]) {\n      s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n      w = (m[2] - m[6]) / s;\n      x = (m[1] + m[3]) / s;\n      y = 0.25 * s;\n      z = (m[5] + m[7]) / s;\n    } else {\n      s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n      w = (m[3] - m[1]) / s;\n      x = (m[2] + m[6]) / s;\n      y = (m[5] + m[7]) / s;\n      z = 0.25 * s;\n    }\n    var q = this.allocQuaternion();\n    q.setX(x);\n    q.setY(y);\n    q.setZ(z);\n    q.setW(w);\n    return q;\n  }\n}\n\n/**\n * @param {THREE.SkinnedMesh} mesh\n * @param {Ammo.btDiscreteDynamicsWorld} world\n * @param {Object} params\n * @param {ResourceManager} manager\n */\nclass RigidBody {\n  constructor(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n    this._init();\n  }\n\n  /**\n   * Resets rigid body transform to the current bone's.\n   *\n   * @return {RigidBody}\n   */\n  reset() {\n    this._setTransformFromBone();\n    return this;\n  }\n\n  /**\n   * Updates rigid body's transform from the current bone.\n   *\n   * @return {RidigBody}\n   */\n  updateFromBone() {\n    if (this.params.boneIndex !== -1 && this.params.type === 0) {\n      this._setTransformFromBone();\n    }\n    return this;\n  }\n\n  /**\n   * Updates bone from the current ridid body's transform.\n   *\n   * @return {RidigBody}\n   */\n  updateBone() {\n    if (this.params.type === 0 || this.params.boneIndex === -1) {\n      return this;\n    }\n    this._updateBoneRotation();\n    if (this.params.type === 1) {\n      this._updateBonePosition();\n    }\n    this.bone.updateMatrixWorld(true);\n    if (this.params.type === 2) {\n      this._setPositionFromBone();\n    }\n    return this;\n  }\n\n  // private methods\n\n  _init() {\n    function generateShape(p) {\n      switch (p.shapeType) {\n        case 0:\n          return new Ammo.btSphereShape(p.width);\n        case 1:\n          return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n        case 2:\n          return new Ammo.btCapsuleShape(p.width, p.height);\n        default:\n          throw new Error('unknown shape type ' + p.shapeType);\n      }\n    }\n    const manager = this.manager;\n    const params = this.params;\n    const bones = this.mesh.skeleton.bones;\n    const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n    const shape = generateShape(params);\n    const weight = params.type === 0 ? 0 : params.weight;\n    const localInertia = manager.allocVector3();\n    localInertia.setValue(0, 0, 0);\n    if (weight !== 0) {\n      shape.calculateLocalInertia(weight, localInertia);\n    }\n    const boneOffsetForm = manager.allocTransform();\n    manager.setIdentity(boneOffsetForm);\n    manager.setOriginFromArray3(boneOffsetForm, params.position);\n    manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n    const vector = manager.allocThreeVector3();\n    const boneForm = manager.allocTransform();\n    manager.setIdentity(boneForm);\n    manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n    const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n    const state = new Ammo.btDefaultMotionState(form);\n    const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n    info.set_m_friction(params.friction);\n    info.set_m_restitution(params.restitution);\n    const body = new Ammo.btRigidBody(info);\n    if (params.type === 0) {\n      body.setCollisionFlags(body.getCollisionFlags() | 2);\n\n      /*\n       * It'd be better to comment out this line though in general I should call this method\n       * because I'm not sure why but physics will be more like MMD's\n       * if I comment out.\n       */\n      body.setActivationState(4);\n    }\n    body.setDamping(params.positionDamping, params.rotationDamping);\n    body.setSleepingThresholds(0, 0);\n    this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n    this.body = body;\n    this.bone = bone;\n    this.boneOffsetForm = boneOffsetForm;\n    this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n    manager.freeVector3(localInertia);\n    manager.freeTransform(form);\n    manager.freeTransform(boneForm);\n    manager.freeThreeVector3(vector);\n  }\n  _getBoneTransform() {\n    const manager = this.manager;\n    const p = manager.allocThreeVector3();\n    const q = manager.allocThreeQuaternion();\n    const s = manager.allocThreeVector3();\n    this.bone.matrixWorld.decompose(p, q, s);\n    const tr = manager.allocTransform();\n    manager.setOriginFromThreeVector3(tr, p);\n    manager.setBasisFromThreeQuaternion(tr, q);\n    const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n    manager.freeTransform(tr);\n    manager.freeThreeVector3(s);\n    manager.freeThreeQuaternion(q);\n    manager.freeThreeVector3(p);\n    return form;\n  }\n  _getWorldTransformForBone() {\n    const manager = this.manager;\n    const tr = this.body.getCenterOfMassTransform();\n    return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n  }\n  _setTransformFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( form );\n    this.body.setCenterOfMassTransform(form);\n    this.body.getMotionState().setWorldTransform(form);\n    manager.freeTransform(form);\n  }\n  _setPositionFromBone() {\n    const manager = this.manager;\n    const form = this._getBoneTransform();\n    const tr = manager.allocTransform();\n    this.body.getMotionState().getWorldTransform(tr);\n    manager.copyOrigin(tr, form);\n\n    // TODO: check the most appropriate way to set\n    //this.body.setWorldTransform( tr );\n    this.body.setCenterOfMassTransform(tr);\n    this.body.getMotionState().setWorldTransform(tr);\n    manager.freeTransform(tr);\n    manager.freeTransform(form);\n  }\n  _updateBoneRotation() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const q = manager.getBasis(tr);\n    const thQ = manager.allocThreeQuaternion();\n    const thQ2 = manager.allocThreeQuaternion();\n    const thQ3 = manager.allocThreeQuaternion();\n    thQ.set(q.x(), q.y(), q.z(), q.w());\n    thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n    thQ2.conjugate();\n    thQ2.multiply(thQ);\n\n    //this.bone.quaternion.multiply( thQ2 );\n\n    thQ3.setFromRotationMatrix(this.bone.matrix);\n\n    // Renormalizing quaternion here because repeatedly transforming\n    // quaternion continuously accumulates floating point error and\n    // can end up being overflow. See #15335\n    this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n    manager.freeThreeQuaternion(thQ);\n    manager.freeThreeQuaternion(thQ2);\n    manager.freeThreeQuaternion(thQ3);\n    manager.freeQuaternion(q);\n    manager.freeTransform(tr);\n  }\n  _updateBonePosition() {\n    const manager = this.manager;\n    const tr = this._getWorldTransformForBone();\n    const thV = manager.allocThreeVector3();\n    const o = manager.getOrigin(tr);\n    thV.set(o.x(), o.y(), o.z());\n    if (this.bone.parent) {\n      this.bone.parent.worldToLocal(thV);\n    }\n    this.bone.position.copy(thV);\n    manager.freeThreeVector3(thV);\n    manager.freeTransform(tr);\n  }\n}\n\n//\n\nclass Constraint {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n  constructor(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n    this._init();\n  }\n\n  // private method\n\n  _init() {\n    const manager = this.manager;\n    const params = this.params;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const form = manager.allocTransform();\n    manager.setIdentity(form);\n    manager.setOriginFromArray3(form, params.position);\n    manager.setBasisFromArray3(form, params.rotation);\n    const formA = manager.allocTransform();\n    const formB = manager.allocTransform();\n    bodyA.body.getMotionState().getWorldTransform(formA);\n    bodyB.body.getMotionState().getWorldTransform(formB);\n    const formInverseA = manager.inverseTransform(formA);\n    const formInverseB = manager.inverseTransform(formB);\n    const formA2 = manager.multiplyTransforms(formInverseA, form);\n    const formB2 = manager.multiplyTransforms(formInverseB, form);\n    const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n    const lll = manager.allocVector3();\n    const lul = manager.allocVector3();\n    const all = manager.allocVector3();\n    const aul = manager.allocVector3();\n    lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n    lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n    all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n    aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n    constraint.setLinearLowerLimit(lll);\n    constraint.setLinearUpperLimit(lul);\n    constraint.setAngularLowerLimit(all);\n    constraint.setAngularUpperLimit(aul);\n    for (let i = 0; i < 3; i++) {\n      if (params.springPosition[i] !== 0) {\n        constraint.enableSpring(i, true);\n        constraint.setStiffness(i, params.springPosition[i]);\n      }\n    }\n    for (let i = 0; i < 3; i++) {\n      if (params.springRotation[i] !== 0) {\n        constraint.enableSpring(i + 3, true);\n        constraint.setStiffness(i + 3, params.springRotation[i]);\n      }\n    }\n\n    /*\n     * Currently(10/31/2016) official ammo.js doesn't support\n     * btGeneric6DofSpringConstraint.setParam method.\n     * You need custom ammo.js (add the method into idl) if you wanna use.\n     * By setting this parameter, physics will be more like MMD's\n     */\n    if (constraint.setParam !== undefined) {\n      for (let i = 0; i < 6; i++) {\n        constraint.setParam(2, 0.475, i);\n      }\n    }\n    this.world.addConstraint(constraint, true);\n    this.constraint = constraint;\n    manager.freeTransform(form);\n    manager.freeTransform(formA);\n    manager.freeTransform(formB);\n    manager.freeTransform(formInverseA);\n    manager.freeTransform(formInverseB);\n    manager.freeTransform(formA2);\n    manager.freeTransform(formB2);\n    manager.freeVector3(lll);\n    manager.freeVector3(lul);\n    manager.freeVector3(all);\n    manager.freeVector3(aul);\n  }\n}\n\n//\n\nconst _position = new Vector3();\nconst _quaternion = new Quaternion();\nconst _scale = new Vector3();\nconst _matrixWorldInv = new Matrix4();\nclass MMDPhysicsHelper extends Object3D {\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n  constructor(mesh, physics) {\n    super();\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this._init();\n  }\n\n  /**\n   * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n   */\n  dispose() {\n    const materials = this.materials;\n    const children = this.children;\n    for (let i = 0; i < materials.length; i++) {\n      materials[i].dispose();\n    }\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.isMesh) child.geometry.dispose();\n    }\n  }\n\n  /**\n   * Updates Rigid Bodies visualization.\n   */\n  updateMatrixWorld(force) {\n    var mesh = this.root;\n    if (this.visible) {\n      var bodies = this.physics.bodies;\n      _matrixWorldInv.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1)).invert();\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var body = bodies[i].body;\n        var child = this.children[i];\n        var tr = body.getCenterOfMassTransform();\n        var origin = tr.getOrigin();\n        var rotation = tr.getRotation();\n        child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(_matrixWorldInv);\n        child.quaternion.setFromRotationMatrix(_matrixWorldInv).multiply(_quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n      }\n    }\n    this.matrix.copy(mesh.matrixWorld).decompose(_position, _quaternion, _scale).compose(_position, _quaternion, _scale.set(1, 1, 1));\n    super.updateMatrixWorld(force);\n  }\n\n  // private method\n\n  _init() {\n    var bodies = this.physics.bodies;\n    function createGeometry(param) {\n      switch (param.shapeType) {\n        case 0:\n          return new SphereGeometry(param.width, 16, 8);\n        case 1:\n          return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n        case 2:\n          return new CapsuleGeometry(param.width, param.height, 8, 16);\n        default:\n          return null;\n      }\n    }\n    for (var i = 0, il = bodies.length; i < il; i++) {\n      var param = bodies[i].params;\n      this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n    }\n  }\n}\nexport { MMDPhysics };","map":{"version":3,"names":["Bone","BoxGeometry","CapsuleGeometry","Color","Euler","Matrix4","Mesh","MeshBasicMaterial","Object3D","Quaternion","SphereGeometry","Vector3","MMDPhysics","constructor","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","manager","ResourceManager","unitStep","undefined","maxStepNum","gravity","copy","world","bodies","constraints","_init","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","_position","_quaternion","_scale","_matrixWorldInv","physics","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","dispose","children","child","isMesh","geometry","force","visible","compose","invert","origin","applyMatrix4","createGeometry","param","add"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/animation/MMDPhysics.js"],"sourcesContent":["import {\n\tBone,\n\tBoxGeometry,\n\tCapsuleGeometry,\n\tColor,\n\tEuler,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tQuaternion,\n\tSphereGeometry,\n\tVector3\n} from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nclass MMDPhysics {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Array<Object>} rigidBodyParams\n\t * @param {Array<Object>} (optional) constraintParams\n\t * @param {Object} params - (optional)\n\t * @param {Number} params.unitStep - Default is 1 / 65.\n\t * @param {Integer} params.maxStepNum - Default is 3.\n\t * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n\t */\n\tconstructor( mesh, rigidBodyParams, constraintParams = [], params = {} ) {\n\n\t\tif ( typeof Ammo === 'undefined' ) {\n\n\t\t\tthrow new Error( 'THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js' );\n\n\t\t}\n\n\t\tthis.manager = new ResourceManager();\n\n\t\tthis.mesh = mesh;\n\n\t\t/*\n\t\t * I don't know why but 1/60 unitStep easily breaks models\n\t\t * so I set it 1/65 so far.\n\t\t * Don't set too small unitStep because\n\t\t * the smaller unitStep can make the performance worse.\n\t\t */\n\t\tthis.unitStep = ( params.unitStep !== undefined ) ? params.unitStep : 1 / 65;\n\t\tthis.maxStepNum = ( params.maxStepNum !== undefined ) ? params.maxStepNum : 3;\n\t\tthis.gravity = new Vector3( 0, - 9.8 * 10, 0 );\n\n\t\tif ( params.gravity !== undefined ) this.gravity.copy( params.gravity );\n\n\t\tthis.world = params.world !== undefined ? params.world : null; // experimental\n\n\t\tthis.bodies = [];\n\t\tthis.constraints = [];\n\n\t\tthis._init( mesh, rigidBodyParams, constraintParams );\n\n\t}\n\n\t/**\n\t * Advances Physics calculation and updates bones.\n\t *\n\t * @param {Number} delta - time in second\n\t * @return {MMDPhysics}\n\t */\n\tupdate( delta ) {\n\n\t\tconst manager = this.manager;\n\t\tconst mesh = this.mesh;\n\n\t\t// rigid bodies and constrains are for\n\t\t// mesh's world scale (1, 1, 1).\n\t\t// Convert to (1, 1, 1) if it isn't.\n\n\t\tlet isNonDefaultScale = false;\n\n\t\tconst position = manager.allocThreeVector3();\n\t\tconst quaternion = manager.allocThreeQuaternion();\n\t\tconst scale = manager.allocThreeVector3();\n\n\t\tmesh.matrixWorld.decompose( position, quaternion, scale );\n\n\t\tif ( scale.x !== 1 || scale.y !== 1 || scale.z !== 1 ) {\n\n\t\t\tisNonDefaultScale = true;\n\n\t\t}\n\n\t\tlet parent;\n\n\t\tif ( isNonDefaultScale ) {\n\n\t\t\tparent = mesh.parent;\n\n\t\t\tif ( parent !== null ) mesh.parent = null;\n\n\t\t\tscale.copy( this.mesh.scale );\n\n\t\t\tmesh.scale.set( 1, 1, 1 );\n\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t}\n\n\t\t// calculate physics and update bones\n\n\t\tthis._updateRigidBodies();\n\t\tthis._stepSimulation( delta );\n\t\tthis._updateBones();\n\n\t\t// restore mesh if converted above\n\n\t\tif ( isNonDefaultScale ) {\n\n\t\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\t\tmesh.scale.copy( scale );\n\n\t\t}\n\n\t\tmanager.freeThreeVector3( scale );\n\t\tmanager.freeThreeQuaternion( quaternion );\n\t\tmanager.freeThreeVector3( position );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Resets rigid bodies transorm to current bone's.\n\t *\n\t * @return {MMDPhysics}\n\t */\n\treset() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].reset();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Warm ups Rigid bodies. Calculates cycles steps.\n\t *\n\t * @param {Integer} cycles\n\t * @return {MMDPhysics}\n\t */\n\twarmup( cycles ) {\n\n\t\tfor ( let i = 0; i < cycles; i ++ ) {\n\n\t\t\tthis.update( 1 / 60 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets gravity.\n\t *\n\t * @param {Vector3} gravity\n\t * @return {MMDPhysicsHelper}\n\t */\n\tsetGravity( gravity ) {\n\n\t\tthis.world.setGravity( new Ammo.btVector3( gravity.x, gravity.y, gravity.z ) );\n\t\tthis.gravity.copy( gravity );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates MMDPhysicsHelper\n\t *\n\t * @return {MMDPhysicsHelper}\n\t */\n\tcreateHelper() {\n\n\t\treturn new MMDPhysicsHelper( this.mesh, this );\n\n\t}\n\n\t// private methods\n\n\t_init( mesh, rigidBodyParams, constraintParams ) {\n\n\t\tconst manager = this.manager;\n\n\t\t// rigid body/constraint parameters are for\n\t\t// mesh's default world transform as position(0, 0, 0),\n\t\t// quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n\t\tconst parent = mesh.parent;\n\n\t\tif ( parent !== null ) mesh.parent = null;\n\n\t\tconst currentPosition = manager.allocThreeVector3();\n\t\tconst currentQuaternion = manager.allocThreeQuaternion();\n\t\tconst currentScale = manager.allocThreeVector3();\n\n\t\tcurrentPosition.copy( mesh.position );\n\t\tcurrentQuaternion.copy( mesh.quaternion );\n\t\tcurrentScale.copy( mesh.scale );\n\n\t\tmesh.position.set( 0, 0, 0 );\n\t\tmesh.quaternion.set( 0, 0, 0, 1 );\n\t\tmesh.scale.set( 1, 1, 1 );\n\n\t\tmesh.updateMatrixWorld( true );\n\n\t\tif ( this.world === null ) {\n\n\t\t\tthis.world = this._createWorld();\n\t\t\tthis.setGravity( this.gravity );\n\n\t\t}\n\n\t\tthis._initRigidBodies( rigidBodyParams );\n\t\tthis._initConstraints( constraintParams );\n\n\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\tmesh.position.copy( currentPosition );\n\t\tmesh.quaternion.copy( currentQuaternion );\n\t\tmesh.scale.copy( currentScale );\n\n\t\tmesh.updateMatrixWorld( true );\n\n\t\tthis.reset();\n\n\t\tmanager.freeThreeVector3( currentPosition );\n\t\tmanager.freeThreeQuaternion( currentQuaternion );\n\t\tmanager.freeThreeVector3( currentScale );\n\n\t}\n\n\t_createWorld() {\n\n\t\tconst config = new Ammo.btDefaultCollisionConfiguration();\n\t\tconst dispatcher = new Ammo.btCollisionDispatcher( config );\n\t\tconst cache = new Ammo.btDbvtBroadphase();\n\t\tconst solver = new Ammo.btSequentialImpulseConstraintSolver();\n\t\tconst world = new Ammo.btDiscreteDynamicsWorld( dispatcher, cache, solver, config );\n\t\treturn world;\n\n\t}\n\n\t_initRigidBodies( rigidBodies ) {\n\n\t\tfor ( let i = 0, il = rigidBodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies.push( new RigidBody(\n\t\t\t\tthis.mesh, this.world, rigidBodies[ i ], this.manager ) );\n\n\t\t}\n\n\t}\n\n\t_initConstraints( constraints ) {\n\n\t\tfor ( let i = 0, il = constraints.length; i < il; i ++ ) {\n\n\t\t\tconst params = constraints[ i ];\n\t\t\tconst bodyA = this.bodies[ params.rigidBodyIndex1 ];\n\t\t\tconst bodyB = this.bodies[ params.rigidBodyIndex2 ];\n\t\t\tthis.constraints.push( new Constraint( this.mesh, this.world, bodyA, bodyB, params, this.manager ) );\n\n\t\t}\n\n\t}\n\n\t_stepSimulation( delta ) {\n\n\t\tconst unitStep = this.unitStep;\n\t\tlet stepTime = delta;\n\t\tlet maxStepNum = ( ( delta / unitStep ) | 0 ) + 1;\n\n\t\tif ( stepTime < unitStep ) {\n\n\t\t\tstepTime = unitStep;\n\t\t\tmaxStepNum = 1;\n\n\t\t}\n\n\t\tif ( maxStepNum > this.maxStepNum ) {\n\n\t\t\tmaxStepNum = this.maxStepNum;\n\n\t\t}\n\n\t\tthis.world.stepSimulation( stepTime, maxStepNum, unitStep );\n\n\t}\n\n\t_updateRigidBodies() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].updateFromBone();\n\n\t\t}\n\n\t}\n\n\t_updateBones() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].updateBone();\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This manager's responsibilies are\n *\n * 1. manage Ammo.js and Three.js object resources and\n *    improve the performance and the memory consumption by\n *    reusing objects.\n *\n * 2. provide simple Ammo object operations.\n */\nclass ResourceManager {\n\n\tconstructor() {\n\n\t\t// for Three.js\n\t\tthis.threeVector3s = [];\n\t\tthis.threeMatrix4s = [];\n\t\tthis.threeQuaternions = [];\n\t\tthis.threeEulers = [];\n\n\t\t// for Ammo.js\n\t\tthis.transforms = [];\n\t\tthis.quaternions = [];\n\t\tthis.vector3s = [];\n\n\t}\n\n\tallocThreeVector3() {\n\n\t\treturn ( this.threeVector3s.length > 0 )\n\t\t\t? this.threeVector3s.pop()\n\t\t\t: new Vector3();\n\n\t}\n\n\tfreeThreeVector3( v ) {\n\n\t\tthis.threeVector3s.push( v );\n\n\t}\n\n\tallocThreeMatrix4() {\n\n\t\treturn ( this.threeMatrix4s.length > 0 )\n\t\t\t? this.threeMatrix4s.pop()\n\t\t\t: new Matrix4();\n\n\t}\n\n\tfreeThreeMatrix4( m ) {\n\n\t\tthis.threeMatrix4s.push( m );\n\n\t}\n\n\tallocThreeQuaternion() {\n\n\t\treturn ( this.threeQuaternions.length > 0 )\n\t\t\t? this.threeQuaternions.pop()\n\t\t\t: new Quaternion();\n\n\t}\n\n\tfreeThreeQuaternion( q ) {\n\n\t\tthis.threeQuaternions.push( q );\n\n\t}\n\n\tallocThreeEuler() {\n\n\t\treturn ( this.threeEulers.length > 0 )\n\t\t\t? this.threeEulers.pop()\n\t\t\t: new Euler();\n\n\t}\n\n\tfreeThreeEuler( e ) {\n\n\t\tthis.threeEulers.push( e );\n\n\t}\n\n\tallocTransform() {\n\n\t\treturn ( this.transforms.length > 0 )\n\t\t\t? this.transforms.pop()\n\t\t\t: new Ammo.btTransform();\n\n\t}\n\n\tfreeTransform( t ) {\n\n\t\tthis.transforms.push( t );\n\n\t}\n\n\tallocQuaternion() {\n\n\t\treturn ( this.quaternions.length > 0 )\n\t\t\t? this.quaternions.pop()\n\t\t\t: new Ammo.btQuaternion();\n\n\t}\n\n\tfreeQuaternion( q ) {\n\n\t\tthis.quaternions.push( q );\n\n\t}\n\n\tallocVector3() {\n\n\t\treturn ( this.vector3s.length > 0 )\n\t\t\t? this.vector3s.pop()\n\t\t\t: new Ammo.btVector3();\n\n\t}\n\n\tfreeVector3( v ) {\n\n\t\tthis.vector3s.push( v );\n\n\t}\n\n\tsetIdentity( t ) {\n\n\t\tt.setIdentity();\n\n\t}\n\n\tgetBasis( t ) {\n\n\t\tvar q = this.allocQuaternion();\n\t\tt.getBasis().getRotation( q );\n\t\treturn q;\n\n\t}\n\n\tgetBasisAsMatrix3( t ) {\n\n\t\tvar q = this.getBasis( t );\n\t\tvar m = this.quaternionToMatrix3( q );\n\t\tthis.freeQuaternion( q );\n\t\treturn m;\n\n\t}\n\n\tgetOrigin( t ) {\n\n\t\treturn t.getOrigin();\n\n\t}\n\n\tsetOrigin( t, v ) {\n\n\t\tt.getOrigin().setValue( v.x(), v.y(), v.z() );\n\n\t}\n\n\tcopyOrigin( t1, t2 ) {\n\n\t\tvar o = t2.getOrigin();\n\t\tthis.setOrigin( t1, o );\n\n\t}\n\n\tsetBasis( t, q ) {\n\n\t\tt.setRotation( q );\n\n\t}\n\n\tsetBasisFromMatrix3( t, m ) {\n\n\t\tvar q = this.matrix3ToQuaternion( m );\n\t\tthis.setBasis( t, q );\n\t\tthis.freeQuaternion( q );\n\n\t}\n\n\tsetOriginFromArray3( t, a ) {\n\n\t\tt.getOrigin().setValue( a[ 0 ], a[ 1 ], a[ 2 ] );\n\n\t}\n\n\tsetOriginFromThreeVector3( t, v ) {\n\n\t\tt.getOrigin().setValue( v.x, v.y, v.z );\n\n\t}\n\n\tsetBasisFromArray3( t, a ) {\n\n\t\tvar thQ = this.allocThreeQuaternion();\n\t\tvar thE = this.allocThreeEuler();\n\t\tthE.set( a[ 0 ], a[ 1 ], a[ 2 ] );\n\t\tthis.setBasisFromThreeQuaternion( t, thQ.setFromEuler( thE ) );\n\n\t\tthis.freeThreeEuler( thE );\n\t\tthis.freeThreeQuaternion( thQ );\n\n\t}\n\n\tsetBasisFromThreeQuaternion( t, a ) {\n\n\t\tvar q = this.allocQuaternion();\n\n\t\tq.setX( a.x );\n\t\tq.setY( a.y );\n\t\tq.setZ( a.z );\n\t\tq.setW( a.w );\n\t\tthis.setBasis( t, q );\n\n\t\tthis.freeQuaternion( q );\n\n\t}\n\n\tmultiplyTransforms( t1, t2 ) {\n\n\t\tvar t = this.allocTransform();\n\t\tthis.setIdentity( t );\n\n\t\tvar m1 = this.getBasisAsMatrix3( t1 );\n\t\tvar m2 = this.getBasisAsMatrix3( t2 );\n\n\t\tvar o1 = this.getOrigin( t1 );\n\t\tvar o2 = this.getOrigin( t2 );\n\n\t\tvar v1 = this.multiplyMatrix3ByVector3( m1, o2 );\n\t\tvar v2 = this.addVector3( v1, o1 );\n\t\tthis.setOrigin( t, v2 );\n\n\t\tvar m3 = this.multiplyMatrices3( m1, m2 );\n\t\tthis.setBasisFromMatrix3( t, m3 );\n\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn t;\n\n\t}\n\n\tinverseTransform( t ) {\n\n\t\tvar t2 = this.allocTransform();\n\n\t\tvar m1 = this.getBasisAsMatrix3( t );\n\t\tvar o = this.getOrigin( t );\n\n\t\tvar m2 = this.transposeMatrix3( m1 );\n\t\tvar v1 = this.negativeVector3( o );\n\t\tvar v2 = this.multiplyMatrix3ByVector3( m2, v1 );\n\n\t\tthis.setOrigin( t2, v2 );\n\t\tthis.setBasisFromMatrix3( t2, m2 );\n\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn t2;\n\n\t}\n\n\tmultiplyMatrices3( m1, m2 ) {\n\n\t\tvar m3 = [];\n\n\t\tvar v10 = this.rowOfMatrix3( m1, 0 );\n\t\tvar v11 = this.rowOfMatrix3( m1, 1 );\n\t\tvar v12 = this.rowOfMatrix3( m1, 2 );\n\n\t\tvar v20 = this.columnOfMatrix3( m2, 0 );\n\t\tvar v21 = this.columnOfMatrix3( m2, 1 );\n\t\tvar v22 = this.columnOfMatrix3( m2, 2 );\n\n\t\tm3[ 0 ] = this.dotVectors3( v10, v20 );\n\t\tm3[ 1 ] = this.dotVectors3( v10, v21 );\n\t\tm3[ 2 ] = this.dotVectors3( v10, v22 );\n\t\tm3[ 3 ] = this.dotVectors3( v11, v20 );\n\t\tm3[ 4 ] = this.dotVectors3( v11, v21 );\n\t\tm3[ 5 ] = this.dotVectors3( v11, v22 );\n\t\tm3[ 6 ] = this.dotVectors3( v12, v20 );\n\t\tm3[ 7 ] = this.dotVectors3( v12, v21 );\n\t\tm3[ 8 ] = this.dotVectors3( v12, v22 );\n\n\t\tthis.freeVector3( v10 );\n\t\tthis.freeVector3( v11 );\n\t\tthis.freeVector3( v12 );\n\t\tthis.freeVector3( v20 );\n\t\tthis.freeVector3( v21 );\n\t\tthis.freeVector3( v22 );\n\n\t\treturn m3;\n\n\t}\n\n\taddVector3( v1, v2 ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z() );\n\t\treturn v;\n\n\t}\n\n\tdotVectors3( v1, v2 ) {\n\n\t\treturn v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n\n\t}\n\n\trowOfMatrix3( m, i ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( m[ i * 3 + 0 ], m[ i * 3 + 1 ], m[ i * 3 + 2 ] );\n\t\treturn v;\n\n\t}\n\n\tcolumnOfMatrix3( m, i ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( m[ i + 0 ], m[ i + 3 ], m[ i + 6 ] );\n\t\treturn v;\n\n\t}\n\n\tnegativeVector3( v ) {\n\n\t\tvar v2 = this.allocVector3();\n\t\tv2.setValue( - v.x(), - v.y(), - v.z() );\n\t\treturn v2;\n\n\t}\n\n\tmultiplyMatrix3ByVector3( m, v ) {\n\n\t\tvar v4 = this.allocVector3();\n\n\t\tvar v0 = this.rowOfMatrix3( m, 0 );\n\t\tvar v1 = this.rowOfMatrix3( m, 1 );\n\t\tvar v2 = this.rowOfMatrix3( m, 2 );\n\t\tvar x = this.dotVectors3( v0, v );\n\t\tvar y = this.dotVectors3( v1, v );\n\t\tvar z = this.dotVectors3( v2, v );\n\n\t\tv4.setValue( x, y, z );\n\n\t\tthis.freeVector3( v0 );\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn v4;\n\n\t}\n\n\ttransposeMatrix3( m ) {\n\n\t\tvar m2 = [];\n\t\tm2[ 0 ] = m[ 0 ];\n\t\tm2[ 1 ] = m[ 3 ];\n\t\tm2[ 2 ] = m[ 6 ];\n\t\tm2[ 3 ] = m[ 1 ];\n\t\tm2[ 4 ] = m[ 4 ];\n\t\tm2[ 5 ] = m[ 7 ];\n\t\tm2[ 6 ] = m[ 2 ];\n\t\tm2[ 7 ] = m[ 5 ];\n\t\tm2[ 8 ] = m[ 8 ];\n\t\treturn m2;\n\n\t}\n\n\tquaternionToMatrix3( q ) {\n\n\t\tvar m = [];\n\n\t\tvar x = q.x();\n\t\tvar y = q.y();\n\t\tvar z = q.z();\n\t\tvar w = q.w();\n\n\t\tvar xx = x * x;\n\t\tvar yy = y * y;\n\t\tvar zz = z * z;\n\n\t\tvar xy = x * y;\n\t\tvar yz = y * z;\n\t\tvar zx = z * x;\n\n\t\tvar xw = x * w;\n\t\tvar yw = y * w;\n\t\tvar zw = z * w;\n\n\t\tm[ 0 ] = 1 - 2 * ( yy + zz );\n\t\tm[ 1 ] = 2 * ( xy - zw );\n\t\tm[ 2 ] = 2 * ( zx + yw );\n\t\tm[ 3 ] = 2 * ( xy + zw );\n\t\tm[ 4 ] = 1 - 2 * ( zz + xx );\n\t\tm[ 5 ] = 2 * ( yz - xw );\n\t\tm[ 6 ] = 2 * ( zx - yw );\n\t\tm[ 7 ] = 2 * ( yz + xw );\n\t\tm[ 8 ] = 1 - 2 * ( xx + yy );\n\n\t\treturn m;\n\n\t}\n\n\tmatrix3ToQuaternion( m ) {\n\n\t\tvar t = m[ 0 ] + m[ 4 ] + m[ 8 ];\n\t\tvar s, x, y, z, w;\n\n\t\tif ( t > 0 ) {\n\n\t\t\ts = Math.sqrt( t + 1.0 ) * 2;\n\t\t\tw = 0.25 * s;\n\t\t\tx = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\ty = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\tz = ( m[ 3 ] - m[ 1 ] ) / s;\n\n\t\t} else if ( ( m[ 0 ] > m[ 4 ] ) && ( m[ 0 ] > m[ 8 ] ) ) {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 0 ] - m[ 4 ] - m[ 8 ] ) * 2;\n\t\t\tw = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\tx = 0.25 * s;\n\t\t\ty = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\tz = ( m[ 2 ] + m[ 6 ] ) / s;\n\n\t\t} else if ( m[ 4 ] > m[ 8 ] ) {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 4 ] - m[ 0 ] - m[ 8 ] ) * 2;\n\t\t\tw = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\tx = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\ty = 0.25 * s;\n\t\t\tz = ( m[ 5 ] + m[ 7 ] ) / s;\n\n\t\t} else {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 8 ] - m[ 0 ] - m[ 4 ] ) * 2;\n\t\t\tw = ( m[ 3 ] - m[ 1 ] ) / s;\n\t\t\tx = ( m[ 2 ] + m[ 6 ] ) / s;\n\t\t\ty = ( m[ 5 ] + m[ 7 ] ) / s;\n\t\t\tz = 0.25 * s;\n\n\t\t}\n\n\t\tvar q = this.allocQuaternion();\n\t\tq.setX( x );\n\t\tq.setY( y );\n\t\tq.setZ( z );\n\t\tq.setW( w );\n\t\treturn q;\n\n\t}\n\n}\n\n/**\n * @param {THREE.SkinnedMesh} mesh\n * @param {Ammo.btDiscreteDynamicsWorld} world\n * @param {Object} params\n * @param {ResourceManager} manager\n */\nclass RigidBody {\n\n\tconstructor( mesh, world, params, manager ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.world = world;\n\t\tthis.params = params;\n\t\tthis.manager = manager;\n\n\t\tthis.body = null;\n\t\tthis.bone = null;\n\t\tthis.boneOffsetForm = null;\n\t\tthis.boneOffsetFormInverse = null;\n\n\t\tthis._init();\n\n\t}\n\n\t/**\n\t * Resets rigid body transform to the current bone's.\n\t *\n\t * @return {RigidBody}\n\t */\n\treset() {\n\n\t\tthis._setTransformFromBone();\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates rigid body's transform from the current bone.\n\t *\n\t * @return {RidigBody}\n\t */\n\tupdateFromBone() {\n\n\t\tif ( this.params.boneIndex !== - 1 && this.params.type === 0 ) {\n\n\t\t\tthis._setTransformFromBone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates bone from the current ridid body's transform.\n\t *\n\t * @return {RidigBody}\n\t */\n\tupdateBone() {\n\n\t\tif ( this.params.type === 0 || this.params.boneIndex === - 1 ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis._updateBoneRotation();\n\n\t\tif ( this.params.type === 1 ) {\n\n\t\t\tthis._updateBonePosition();\n\n\t\t}\n\n\t\tthis.bone.updateMatrixWorld( true );\n\n\t\tif ( this.params.type === 2 ) {\n\n\t\t\tthis._setPositionFromBone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private methods\n\n\t_init() {\n\n\t\tfunction generateShape( p ) {\n\n\t\t\tswitch ( p.shapeType ) {\n\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new Ammo.btSphereShape( p.width );\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new Ammo.btBoxShape( new Ammo.btVector3( p.width, p.height, p.depth ) );\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn new Ammo.btCapsuleShape( p.width, p.height );\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unknown shape type ' + p.shapeType );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst manager = this.manager;\n\t\tconst params = this.params;\n\t\tconst bones = this.mesh.skeleton.bones;\n\t\tconst bone = ( params.boneIndex === - 1 )\n\t\t\t? new Bone()\n\t\t\t: bones[ params.boneIndex ];\n\n\t\tconst shape = generateShape( params );\n\t\tconst weight = ( params.type === 0 ) ? 0 : params.weight;\n\t\tconst localInertia = manager.allocVector3();\n\t\tlocalInertia.setValue( 0, 0, 0 );\n\n\t\tif ( weight !== 0 ) {\n\n\t\t\tshape.calculateLocalInertia( weight, localInertia );\n\n\t\t}\n\n\t\tconst boneOffsetForm = manager.allocTransform();\n\t\tmanager.setIdentity( boneOffsetForm );\n\t\tmanager.setOriginFromArray3( boneOffsetForm, params.position );\n\t\tmanager.setBasisFromArray3( boneOffsetForm, params.rotation );\n\n\t\tconst vector = manager.allocThreeVector3();\n\t\tconst boneForm = manager.allocTransform();\n\t\tmanager.setIdentity( boneForm );\n\t\tmanager.setOriginFromThreeVector3( boneForm, bone.getWorldPosition( vector ) );\n\n\t\tconst form = manager.multiplyTransforms( boneForm, boneOffsetForm );\n\t\tconst state = new Ammo.btDefaultMotionState( form );\n\n\t\tconst info = new Ammo.btRigidBodyConstructionInfo( weight, state, shape, localInertia );\n\t\tinfo.set_m_friction( params.friction );\n\t\tinfo.set_m_restitution( params.restitution );\n\n\t\tconst body = new Ammo.btRigidBody( info );\n\n\t\tif ( params.type === 0 ) {\n\n\t\t\tbody.setCollisionFlags( body.getCollisionFlags() | 2 );\n\n\t\t\t/*\n\t\t\t * It'd be better to comment out this line though in general I should call this method\n\t\t\t * because I'm not sure why but physics will be more like MMD's\n\t\t\t * if I comment out.\n\t\t\t */\n\t\t\tbody.setActivationState( 4 );\n\n\t\t}\n\n\t\tbody.setDamping( params.positionDamping, params.rotationDamping );\n\t\tbody.setSleepingThresholds( 0, 0 );\n\n\t\tthis.world.addRigidBody( body, 1 << params.groupIndex, params.groupTarget );\n\n\t\tthis.body = body;\n\t\tthis.bone = bone;\n\t\tthis.boneOffsetForm = boneOffsetForm;\n\t\tthis.boneOffsetFormInverse = manager.inverseTransform( boneOffsetForm );\n\n\t\tmanager.freeVector3( localInertia );\n\t\tmanager.freeTransform( form );\n\t\tmanager.freeTransform( boneForm );\n\t\tmanager.freeThreeVector3( vector );\n\n\t}\n\n\t_getBoneTransform() {\n\n\t\tconst manager = this.manager;\n\t\tconst p = manager.allocThreeVector3();\n\t\tconst q = manager.allocThreeQuaternion();\n\t\tconst s = manager.allocThreeVector3();\n\n\t\tthis.bone.matrixWorld.decompose( p, q, s );\n\n\t\tconst tr = manager.allocTransform();\n\t\tmanager.setOriginFromThreeVector3( tr, p );\n\t\tmanager.setBasisFromThreeQuaternion( tr, q );\n\n\t\tconst form = manager.multiplyTransforms( tr, this.boneOffsetForm );\n\n\t\tmanager.freeTransform( tr );\n\t\tmanager.freeThreeVector3( s );\n\t\tmanager.freeThreeQuaternion( q );\n\t\tmanager.freeThreeVector3( p );\n\n\t\treturn form;\n\n\t}\n\n\t_getWorldTransformForBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst tr = this.body.getCenterOfMassTransform();\n\t\treturn manager.multiplyTransforms( tr, this.boneOffsetFormInverse );\n\n\t}\n\n\t_setTransformFromBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst form = this._getBoneTransform();\n\n\t\t// TODO: check the most appropriate way to set\n\t\t//this.body.setWorldTransform( form );\n\t\tthis.body.setCenterOfMassTransform( form );\n\t\tthis.body.getMotionState().setWorldTransform( form );\n\n\t\tmanager.freeTransform( form );\n\n\t}\n\n\t_setPositionFromBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst form = this._getBoneTransform();\n\n\t\tconst tr = manager.allocTransform();\n\t\tthis.body.getMotionState().getWorldTransform( tr );\n\t\tmanager.copyOrigin( tr, form );\n\n\t\t// TODO: check the most appropriate way to set\n\t\t//this.body.setWorldTransform( tr );\n\t\tthis.body.setCenterOfMassTransform( tr );\n\t\tthis.body.getMotionState().setWorldTransform( tr );\n\n\t\tmanager.freeTransform( tr );\n\t\tmanager.freeTransform( form );\n\n\t}\n\n\t_updateBoneRotation() {\n\n\t\tconst manager = this.manager;\n\n\t\tconst tr = this._getWorldTransformForBone();\n\t\tconst q = manager.getBasis( tr );\n\n\t\tconst thQ = manager.allocThreeQuaternion();\n\t\tconst thQ2 = manager.allocThreeQuaternion();\n\t\tconst thQ3 = manager.allocThreeQuaternion();\n\n\t\tthQ.set( q.x(), q.y(), q.z(), q.w() );\n\t\tthQ2.setFromRotationMatrix( this.bone.matrixWorld );\n\t\tthQ2.conjugate();\n\t\tthQ2.multiply( thQ );\n\n\t\t//this.bone.quaternion.multiply( thQ2 );\n\n\t\tthQ3.setFromRotationMatrix( this.bone.matrix );\n\n\t\t// Renormalizing quaternion here because repeatedly transforming\n\t\t// quaternion continuously accumulates floating point error and\n\t\t// can end up being overflow. See #15335\n\t\tthis.bone.quaternion.copy( thQ2.multiply( thQ3 ).normalize() );\n\n\t\tmanager.freeThreeQuaternion( thQ );\n\t\tmanager.freeThreeQuaternion( thQ2 );\n\t\tmanager.freeThreeQuaternion( thQ3 );\n\n\t\tmanager.freeQuaternion( q );\n\t\tmanager.freeTransform( tr );\n\n\t}\n\n\t_updateBonePosition() {\n\n\t\tconst manager = this.manager;\n\n\t\tconst tr = this._getWorldTransformForBone();\n\n\t\tconst thV = manager.allocThreeVector3();\n\n\t\tconst o = manager.getOrigin( tr );\n\t\tthV.set( o.x(), o.y(), o.z() );\n\n\t\tif ( this.bone.parent ) {\n\n\t\t\tthis.bone.parent.worldToLocal( thV );\n\n\t\t}\n\n\t\tthis.bone.position.copy( thV );\n\n\t\tmanager.freeThreeVector3( thV );\n\n\t\tmanager.freeTransform( tr );\n\n\t}\n\n}\n\n//\n\nclass Constraint {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Ammo.btDiscreteDynamicsWorld} world\n\t * @param {RigidBody} bodyA\n\t * @param {RigidBody} bodyB\n\t * @param {Object} params\n\t * @param {ResourceManager} manager\n\t */\n\tconstructor( mesh, world, bodyA, bodyB, params, manager ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.world = world;\n\t\tthis.bodyA = bodyA;\n\t\tthis.bodyB = bodyB;\n\t\tthis.params = params;\n\t\tthis.manager = manager;\n\n\t\tthis.constraint = null;\n\n\t\tthis._init();\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tconst manager = this.manager;\n\t\tconst params = this.params;\n\t\tconst bodyA = this.bodyA;\n\t\tconst bodyB = this.bodyB;\n\n\t\tconst form = manager.allocTransform();\n\t\tmanager.setIdentity( form );\n\t\tmanager.setOriginFromArray3( form, params.position );\n\t\tmanager.setBasisFromArray3( form, params.rotation );\n\n\t\tconst formA = manager.allocTransform();\n\t\tconst formB = manager.allocTransform();\n\n\t\tbodyA.body.getMotionState().getWorldTransform( formA );\n\t\tbodyB.body.getMotionState().getWorldTransform( formB );\n\n\t\tconst formInverseA = manager.inverseTransform( formA );\n\t\tconst formInverseB = manager.inverseTransform( formB );\n\n\t\tconst formA2 = manager.multiplyTransforms( formInverseA, form );\n\t\tconst formB2 = manager.multiplyTransforms( formInverseB, form );\n\n\t\tconst constraint = new Ammo.btGeneric6DofSpringConstraint( bodyA.body, bodyB.body, formA2, formB2, true );\n\n\t\tconst lll = manager.allocVector3();\n\t\tconst lul = manager.allocVector3();\n\t\tconst all = manager.allocVector3();\n\t\tconst aul = manager.allocVector3();\n\n\t\tlll.setValue( params.translationLimitation1[ 0 ],\n\t\t              params.translationLimitation1[ 1 ],\n\t\t              params.translationLimitation1[ 2 ] );\n\t\tlul.setValue( params.translationLimitation2[ 0 ],\n\t\t              params.translationLimitation2[ 1 ],\n\t\t              params.translationLimitation2[ 2 ] );\n\t\tall.setValue( params.rotationLimitation1[ 0 ],\n\t\t              params.rotationLimitation1[ 1 ],\n\t\t              params.rotationLimitation1[ 2 ] );\n\t\taul.setValue( params.rotationLimitation2[ 0 ],\n\t\t              params.rotationLimitation2[ 1 ],\n\t\t              params.rotationLimitation2[ 2 ] );\n\n\t\tconstraint.setLinearLowerLimit( lll );\n\t\tconstraint.setLinearUpperLimit( lul );\n\t\tconstraint.setAngularLowerLimit( all );\n\t\tconstraint.setAngularUpperLimit( aul );\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tif ( params.springPosition[ i ] !== 0 ) {\n\n\t\t\t\tconstraint.enableSpring( i, true );\n\t\t\t\tconstraint.setStiffness( i, params.springPosition[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tif ( params.springRotation[ i ] !== 0 ) {\n\n\t\t\t\tconstraint.enableSpring( i + 3, true );\n\t\t\t\tconstraint.setStiffness( i + 3, params.springRotation[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/*\n\t\t * Currently(10/31/2016) official ammo.js doesn't support\n\t\t * btGeneric6DofSpringConstraint.setParam method.\n\t\t * You need custom ammo.js (add the method into idl) if you wanna use.\n\t\t * By setting this parameter, physics will be more like MMD's\n\t\t */\n\t\tif ( constraint.setParam !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconstraint.setParam( 2, 0.475, i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.world.addConstraint( constraint, true );\n\t\tthis.constraint = constraint;\n\n\t\tmanager.freeTransform( form );\n\t\tmanager.freeTransform( formA );\n\t\tmanager.freeTransform( formB );\n\t\tmanager.freeTransform( formInverseA );\n\t\tmanager.freeTransform( formInverseB );\n\t\tmanager.freeTransform( formA2 );\n\t\tmanager.freeTransform( formB2 );\n\t\tmanager.freeVector3( lll );\n\t\tmanager.freeVector3( lul );\n\t\tmanager.freeVector3( all );\n\t\tmanager.freeVector3( aul );\n\n\t}\n\n}\n\n//\n\nconst _position = new Vector3();\nconst _quaternion = new Quaternion();\nconst _scale = new Vector3();\nconst _matrixWorldInv = new Matrix4();\n\nclass MMDPhysicsHelper extends Object3D {\n\n\t/**\n\t * Visualize Rigid bodies\n\t *\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Physics} physics\n\t */\n\tconstructor( mesh, physics ) {\n\n\t\tsuper();\n\n\t\tthis.root = mesh;\n\t\tthis.physics = physics;\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.materials = [];\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0xff8888 ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0x88ff88 ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0x8888ff ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis._init();\n\n\t}\n\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tconst materials = this.materials;\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0; i < materials.length; i ++ ) {\n\n\t\t\tmaterials[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.isMesh ) child.geometry.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates Rigid Bodies visualization.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tvar mesh = this.root;\n\n\t\tif ( this.visible ) {\n\n\t\t\tvar bodies = this.physics.bodies;\n\n\t\t\t_matrixWorldInv\n\t\t\t\t.copy( mesh.matrixWorld )\n\t\t\t\t.decompose( _position, _quaternion, _scale )\n\t\t\t\t.compose( _position, _quaternion, _scale.set( 1, 1, 1 ) )\n\t\t\t\t.invert();\n\n\t\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\t\tvar body = bodies[ i ].body;\n\t\t\t\tvar child = this.children[ i ];\n\n\t\t\t\tvar tr = body.getCenterOfMassTransform();\n\t\t\t\tvar origin = tr.getOrigin();\n\t\t\t\tvar rotation = tr.getRotation();\n\n\t\t\t\tchild.position\n\t\t\t\t\t.set( origin.x(), origin.y(), origin.z() )\n\t\t\t\t\t.applyMatrix4( _matrixWorldInv );\n\n\t\t\t\tchild.quaternion\n\t\t\t\t\t.setFromRotationMatrix( _matrixWorldInv )\n\t\t\t\t\t.multiply(\n\t\t\t\t\t\t_quaternion.set( rotation.x(), rotation.y(), rotation.z(), rotation.w() )\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.matrix\n\t\t\t.copy( mesh.matrixWorld )\n\t\t\t.decompose( _position, _quaternion, _scale )\n\t\t\t.compose( _position, _quaternion, _scale.set( 1, 1, 1 ) );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tvar bodies = this.physics.bodies;\n\n\t\tfunction createGeometry( param ) {\n\n\t\t\tswitch ( param.shapeType ) {\n\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new SphereGeometry( param.width, 16, 8 );\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new BoxGeometry( param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8 );\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn new CapsuleGeometry( param.width, param.height, 8, 16 );\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\tvar param = bodies[ i ].params;\n\t\t\tthis.add( new Mesh( createGeometry( param ), this.materials[ param.type ] ) );\n\n\t\t}\n\n\t}\n\n}\n\nexport { MMDPhysics };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}