{"ast":null,"code":"import { jsxs, jsx, Fragment } from \"react/jsx-runtime\";\nimport { memo, useRef, Suspense } from \"react\";\nimport { matriceCount, matriceWorldCount } from \"./PerfHeadless.mjs\";\nimport { useThree } from \"@react-three/fiber\";\nimport { Text } from \"@react-three/drei\";\nimport \"../index.mjs\";\nimport { colorsGraph } from \"./Perf.mjs\";\nimport * as THREE from \"three\";\nimport { useEvent } from \"@utsubo/events\";\nimport { getPerf } from \"../store.mjs\";\nconst TextHighHZ = memo(({\n  isPerf,\n  color,\n  colorBlind,\n  customData: customData2,\n  isMemory,\n  isShadersInfo,\n  metric,\n  fontSize,\n  offsetY = 0,\n  offsetX,\n  round,\n  hasInstance\n}) => {\n  const {\n    width: w,\n    height: h\n  } = useThree(s => s.viewport);\n  const fpsRef = useRef(null);\n  const fpsInstanceRef = useRef(null);\n  useEvent(\"log\", function updateR3FPerfText([log, gl]) {\n    var _a;\n    if (!log || !fpsRef.current) return;\n    if (customData2) {\n      fpsRef.current.text = (Math.round(getPerf().customData * Math.pow(10, round)) / Math.pow(10, round)).toFixed(round);\n    }\n    if (!metric) return;\n    let info = log[metric];\n    if (isShadersInfo) {\n      info = (_a = gl.info.programs) == null ? void 0 : _a.length;\n    } else if (metric === \"matriceCount\") {\n      info = matriceCount.value;\n    } else if (!isPerf && gl.info.render) {\n      const infos = isMemory ? gl.info.memory : gl.info.render;\n      info = infos[metric];\n    }\n    if (metric === \"fps\") {\n      fpsRef.current.color = getPerf().overclockingFps ? colorsGraph(colorBlind).overClock.toString() : `rgb(${colorsGraph(colorBlind).fps.toString()})`;\n    }\n    fpsRef.current.text = (Math.round(info * Math.pow(10, round)) / Math.pow(10, round)).toFixed(round);\n    if (hasInstance) {\n      const infosInstance = gl.info.instance;\n      if (typeof infosInstance === \"undefined\" && metric !== \"matriceCount\") {\n        return;\n      }\n      let infoInstance;\n      if (metric === \"matriceCount\") {\n        infoInstance = matriceWorldCount.value;\n      } else {\n        infoInstance = infosInstance[metric];\n      }\n      if (infoInstance > 0) {\n        fpsRef.current.fontSize = fontSize / 1.15;\n        fpsInstanceRef.current.fontSize = info > 0 ? fontSize / 1.4 : fontSize;\n        fpsRef.current.position.y = h / 2 - offsetY - fontSize / 1.9;\n        fpsInstanceRef.current.text = \" Â±\t\" + (Math.round(infoInstance * Math.pow(10, round)) / Math.pow(10, round)).toFixed(round);\n      } else {\n        if (fpsInstanceRef.current.text) fpsInstanceRef.current.text = \"\";\n        fpsRef.current.position.y = h / 2 - offsetY - fontSize;\n        fpsRef.current.fontSize = fontSize;\n      }\n    }\n    matriceCount.value -= 1;\n    fpsRef.current.updateMatrix();\n    fpsRef.current.matrixWorld.copy(fpsRef.current.matrix);\n  });\n  return /* @__PURE__ */jsxs(Suspense, {\n    fallback: null,\n    children: [/* @__PURE__ */jsxs(Text, {\n      textAlign: \"justify\",\n      matrixAutoUpdate: false,\n      ref: fpsRef,\n      fontSize,\n      position: [-w / 2 + offsetX + fontSize, h / 2 - offsetY - fontSize, 0],\n      color,\n      characters: \"0123456789\",\n      onUpdate: self => {\n        self.updateMatrix();\n        matriceCount.value -= 1;\n        self.matrixWorld.copy(self.matrix);\n      },\n      children: [/* @__PURE__ */jsx(\"meshBasicMaterial\", {\n        blending: THREE.NormalBlending\n      }), \"0\"]\n    }), hasInstance && /* @__PURE__ */jsx(Text, {\n      textAlign: \"justify\",\n      matrixAutoUpdate: false,\n      ref: fpsInstanceRef,\n      fontSize: 8,\n      position: [-w / 2 + offsetX + fontSize, h / 2 - offsetY - fontSize * 1.15, 0],\n      color: \"lightgrey\",\n      characters: \"0123456789\",\n      onUpdate: self => {\n        self.updateMatrix();\n        matriceCount.value -= 1;\n        self.matrixWorld.copy(self.matrix);\n      },\n      children: /* @__PURE__ */jsx(\"meshBasicMaterial\", {\n        blending: THREE.NormalBlending\n      })\n    })]\n  });\n});\nconst TextsHighHZ = ({\n  colorBlind,\n  customData: customData2,\n  minimal,\n  matrixUpdate\n}) => {\n  const fontSize = 14;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(TextHighHZ, {\n      colorBlind,\n      color: `rgb(${colorsGraph(colorBlind).fps.toString()})`,\n      isPerf: true,\n      metric: \"fps\",\n      fontSize,\n      offsetX: 140,\n      round: 0\n    }), /* @__PURE__ */jsx(TextHighHZ, {\n      color: `rgb(${colorsGraph(colorBlind).cpu.toString()})`,\n      isPerf: true,\n      metric: \"cpu\",\n      fontSize,\n      offsetX: 72,\n      round: 3\n    }), /* @__PURE__ */jsx(TextHighHZ, {\n      color: `rgb(${colorsGraph(colorBlind).gpu.toString()})`,\n      isPerf: true,\n      metric: \"gpu\",\n      fontSize,\n      offsetX: 10,\n      round: 3\n    }), !minimal ? /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(TextHighHZ, {\n        metric: \"calls\",\n        fontSize,\n        offsetX: 200,\n        round: 0,\n        hasInstance: true\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        metric: \"triangles\",\n        fontSize,\n        offsetX: 260,\n        round: 0,\n        hasInstance: true\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        isMemory: true,\n        metric: \"geometries\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 0,\n        round: 0\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        isMemory: true,\n        metric: \"textures\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 80,\n        round: 0\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        isShadersInfo: true,\n        metric: \"programs\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 140,\n        round: 0\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        metric: \"lines\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 200,\n        round: 0,\n        hasInstance: true\n      }), /* @__PURE__ */jsx(TextHighHZ, {\n        metric: \"points\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 260,\n        round: 0,\n        hasInstance: true\n      }), matrixUpdate && /* @__PURE__ */jsx(TextHighHZ, {\n        isPerf: true,\n        metric: \"matriceCount\",\n        fontSize,\n        offsetY: 30,\n        offsetX: 320,\n        round: 0,\n        hasInstance: true\n      })]\n    }) : null, customData2 && /* @__PURE__ */jsx(TextHighHZ, {\n      color: `rgb(${colorsGraph(colorBlind).custom.toString()})`,\n      customData: customData2,\n      fontSize,\n      offsetY: 0,\n      offsetX: minimal ? 200 : 320,\n      round: customData2.round || 2\n    })]\n  });\n};\nexport { TextsHighHZ };","map":{"version":3,"names":["TextHighHZ","memo","isPerf","color","colorBlind","customData","customData2","isMemory","isShadersInfo","metric","fontSize","offsetY","offsetX","round","hasInstance","width","w","height","h","useThree","s","viewport","fpsRef","useRef","fpsInstanceRef","useEvent","updateR3FPerfText","log","gl","current","text","Math","getPerf","pow","toFixed","info","_a","programs","length","matriceCount","value","render","infos","memory","overclockingFps","colorsGraph","overClock","toString","fps","infosInstance","instance","infoInstance","matriceWorldCount","position","y","updateMatrix","matrixWorld","copy","matrix","jsxs","Suspense","fallback","children","Text","textAlign","matrixAutoUpdate","ref","characters","onUpdate","self","jsx","blending","THREE","NormalBlending","TextsHighHZ","minimal","matrixUpdate","Fragment","cpu","gpu","custom"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/r3f-perf/src/components/TextsHighHZ.tsx"],"sourcesContent":["import { FC, memo, Suspense, useRef } from 'react'\nimport { matriceCount, matriceWorldCount } from './PerfHeadless'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { Text } from '@react-three/drei'\nimport { getPerf } from '..'\nimport { colorsGraph } from './Perf'\nimport * as THREE from 'three'\nimport { customData, PerfUIProps } from '../typings'\nimport { useEvent } from '@utsubo/events'\n\ninterface TextHighHZProps {\n  metric?: string\n  colorBlind?: boolean\n  isPerf?: boolean\n  hasInstance?: boolean\n  isMemory?: boolean\n  isShadersInfo?: boolean\n  fontSize: number\n  round: number\n  color?: string\n  offsetX: number\n  offsetY?: number\n  customData?: customData\n  minimal?: boolean\n}\n\nconst TextHighHZ: FC<TextHighHZProps> = memo(\n  ({\n    isPerf,\n    color,\n    colorBlind,\n    customData,\n    isMemory,\n    isShadersInfo,\n    metric,\n    fontSize,\n    offsetY = 0,\n    offsetX,\n    round,\n    hasInstance,\n  }) => {\n    const { width: w, height: h } = useThree((s) => s.viewport)\n    const fpsRef = useRef<any>(null)\n    const fpsInstanceRef = useRef<any>(null)\n\n    useEvent('log', function updateR3FPerfText([log, gl]) {\n      if (!log || !fpsRef.current) return\n\n      if (customData) {\n        fpsRef.current.text = (Math.round(getPerf().customData * Math.pow(10, round)) / Math.pow(10, round)).toFixed(\n          round\n        )\n      }\n\n      if (!metric) return\n\n      let info = log[metric]\n      if (isShadersInfo) {\n        info = gl.info.programs?.length\n      } else if (metric === 'matriceCount') {\n        info = matriceCount.value\n      } else if (!isPerf && gl.info.render) {\n        const infos: any = isMemory ? gl.info.memory : gl.info.render\n        info = infos[metric]\n      }\n\n      if (metric === 'fps') {\n        fpsRef.current.color = getPerf().overclockingFps\n          ? colorsGraph(colorBlind).overClock.toString()\n          : `rgb(${colorsGraph(colorBlind).fps.toString()})`\n      }\n      fpsRef.current.text = (Math.round(info * Math.pow(10, round)) / Math.pow(10, round)).toFixed(round)\n\n      if (hasInstance) {\n        const infosInstance: any = gl.info.instance\n\n        if (typeof infosInstance === 'undefined' && metric !== 'matriceCount') {\n          return\n        }\n\n        let infoInstance\n        if (metric === 'matriceCount') {\n          infoInstance = matriceWorldCount.value\n        } else {\n          infoInstance = infosInstance[metric]\n        }\n\n        if (infoInstance > 0) {\n          fpsRef.current.fontSize = fontSize / 1.15\n          fpsInstanceRef.current.fontSize = info > 0 ? fontSize / 1.4 : fontSize\n\n          fpsRef.current.position.y = h / 2 - offsetY - fontSize / 1.9\n          fpsInstanceRef.current.text =\n            ' Â±\t' + (Math.round(infoInstance * Math.pow(10, round)) / Math.pow(10, round)).toFixed(round)\n        } else {\n          if (fpsInstanceRef.current.text) fpsInstanceRef.current.text = ''\n\n          fpsRef.current.position.y = h / 2 - offsetY - fontSize\n          fpsRef.current.fontSize = fontSize\n        }\n      }\n      matriceCount.value -= 1\n      fpsRef.current.updateMatrix()\n      fpsRef.current.matrixWorld.copy(fpsRef.current.matrix)\n    })\n    return (\n      <Suspense fallback={null}>\n        <Text\n          textAlign=\"justify\"\n          matrixAutoUpdate={false}\n          ref={fpsRef}\n          fontSize={fontSize}\n          position={[-w / 2 + offsetX + fontSize, h / 2 - offsetY - fontSize, 0]}\n          color={color}\n          characters=\"0123456789\"\n          onUpdate={(self) => {\n            self.updateMatrix()\n            matriceCount.value -= 1\n            self.matrixWorld.copy(self.matrix)\n          }}>\n          <meshBasicMaterial blending={THREE.NormalBlending} />0\n        </Text>\n        {hasInstance && (\n          <Text\n            textAlign=\"justify\"\n            matrixAutoUpdate={false}\n            ref={fpsInstanceRef}\n            fontSize={8}\n            position={[-w / 2 + offsetX + fontSize, h / 2 - offsetY - fontSize * 1.15, 0]}\n            color={'lightgrey'}\n            characters=\"0123456789\"\n            onUpdate={(self) => {\n              self.updateMatrix()\n              matriceCount.value -= 1\n              self.matrixWorld.copy(self.matrix)\n            }}>\n            <meshBasicMaterial blending={THREE.NormalBlending} />\n          </Text>\n        )}\n      </Suspense>\n    )\n  }\n)\n\nexport const TextsHighHZ: FC<PerfUIProps> = ({ colorBlind, customData, minimal, matrixUpdate }) => {\n  // const [supportMemory] = useState(window.performance.memory)\n  // const supportMemory = false\n\n  const fontSize: number = 14\n  return (\n    <>\n      <TextHighHZ\n        colorBlind={colorBlind}\n        color={`rgb(${colorsGraph(colorBlind).fps.toString()})`}\n        isPerf\n        metric=\"fps\"\n        fontSize={fontSize}\n        offsetX={140}\n        round={0}\n      />\n      <TextHighHZ\n        color={`rgb(${colorsGraph(colorBlind).cpu.toString()})`}\n        isPerf\n        metric=\"cpu\"\n        fontSize={fontSize}\n        offsetX={72}\n        round={3}\n      />\n      {/* <TextHighHZ color={supportMemory ? `rgb(${colorsGraph(colorBlind).cpu.toString()})` : ''} isPerf metric='maxMemory' fontSize={8} offsetX={112} offsetY={10} round={0} /> */}\n      <TextHighHZ\n        color={`rgb(${colorsGraph(colorBlind).gpu.toString()})`}\n        isPerf\n        metric=\"gpu\"\n        fontSize={fontSize}\n        offsetX={10}\n        round={3}\n      />\n      {!minimal ? (\n        <>\n          <TextHighHZ metric=\"calls\" fontSize={fontSize} offsetX={200} round={0} hasInstance />\n          <TextHighHZ metric=\"triangles\" fontSize={fontSize} offsetX={260} round={0} hasInstance />\n          <TextHighHZ isMemory metric=\"geometries\" fontSize={fontSize} offsetY={30} offsetX={0} round={0} />\n          <TextHighHZ isMemory metric=\"textures\" fontSize={fontSize} offsetY={30} offsetX={80} round={0} />\n          <TextHighHZ isShadersInfo metric=\"programs\" fontSize={fontSize} offsetY={30} offsetX={140} round={0} />\n          <TextHighHZ metric=\"lines\" fontSize={fontSize} offsetY={30} offsetX={200} round={0} hasInstance />\n          <TextHighHZ metric=\"points\" fontSize={fontSize} offsetY={30} offsetX={260} round={0} hasInstance />\n          {matrixUpdate && (\n            <TextHighHZ\n              isPerf\n              metric=\"matriceCount\"\n              fontSize={fontSize}\n              offsetY={30}\n              offsetX={320}\n              round={0}\n              hasInstance\n            />\n          )}\n        </>\n      ) : null}\n\n      {customData && (\n        <TextHighHZ\n          color={`rgb(${colorsGraph(colorBlind).custom.toString()})`}\n          customData={customData}\n          fontSize={fontSize}\n          offsetY={0}\n          offsetX={minimal ? 200 : 320}\n          round={customData.round || 2}\n        />\n      )}\n    </>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}