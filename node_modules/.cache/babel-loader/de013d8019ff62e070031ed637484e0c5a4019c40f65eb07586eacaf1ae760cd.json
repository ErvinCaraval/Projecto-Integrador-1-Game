{"ast":null,"code":"import { HalfFloatType, MeshBasicMaterial, NearestFilter, ShaderMaterial, UniformsUtils, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\nclass AfterimagePass extends Pass {\n  constructor(damp = 0.96) {\n    super();\n    this.shader = AfterimageShader;\n    this.uniforms = UniformsUtils.clone(this.shader.uniforms);\n    this.uniforms['damp'].value = damp;\n    this.textureComp = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.textureOld = new WebGLRenderTarget(window.innerWidth, window.innerHeight, {\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n    this.compFsMaterial = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: this.shader.vertexShader,\n      fragmentShader: this.shader.fragmentShader\n    });\n    this.compFsQuad = new FullScreenQuad(this.compFsMaterial);\n    this.copyFsMaterial = new MeshBasicMaterial();\n    this.copyFsQuad = new FullScreenQuad(this.copyFsMaterial);\n  }\n  render(renderer, writeBuffer, readBuffer /*, deltaTime, maskActive*/) {\n    this.uniforms['tOld'].value = this.textureOld.texture;\n    this.uniforms['tNew'].value = readBuffer.texture;\n    renderer.setRenderTarget(this.textureComp);\n    this.compFsQuad.render(renderer);\n    this.copyFsQuad.material.map = this.textureComp.texture;\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.copyFsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.copyFsQuad.render(renderer);\n    }\n\n    // Swap buffers.\n    const temp = this.textureOld;\n    this.textureOld = this.textureComp;\n    this.textureComp = temp;\n    // Now textureOld contains the latest image, ready for the next frame.\n  }\n  setSize(width, height) {\n    this.textureComp.setSize(width, height);\n    this.textureOld.setSize(width, height);\n  }\n  dispose() {\n    this.textureComp.dispose();\n    this.textureOld.dispose();\n    this.compFsMaterial.dispose();\n    this.copyFsMaterial.dispose();\n    this.compFsQuad.dispose();\n    this.copyFsQuad.dispose();\n  }\n}\nexport { AfterimagePass };","map":{"version":3,"names":["HalfFloatType","MeshBasicMaterial","NearestFilter","ShaderMaterial","UniformsUtils","WebGLRenderTarget","Pass","FullScreenQuad","AfterimageShader","AfterimagePass","constructor","damp","shader","uniforms","clone","value","textureComp","window","innerWidth","innerHeight","magFilter","type","textureOld","compFsMaterial","vertexShader","fragmentShader","compFsQuad","copyFsMaterial","copyFsQuad","render","renderer","writeBuffer","readBuffer","texture","setRenderTarget","material","map","renderToScreen","clear","temp","setSize","width","height","dispose"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/postprocessing/AfterimagePass.js"],"sourcesContent":["import {\n\tHalfFloatType,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tShaderMaterial,\n\tUniformsUtils,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { AfterimageShader } from '../shaders/AfterimageShader.js';\n\nclass AfterimagePass extends Pass {\n\n\tconstructor( damp = 0.96 ) {\n\n\t\tsuper();\n\n\t\tthis.shader = AfterimageShader;\n\n\t\tthis.uniforms = UniformsUtils.clone( this.shader.uniforms );\n\n\t\tthis.uniforms[ 'damp' ].value = damp;\n\n\t\tthis.textureComp = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis.textureOld = new WebGLRenderTarget( window.innerWidth, window.innerHeight, {\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType\n\t\t} );\n\n\t\tthis.compFsMaterial = new ShaderMaterial( {\n\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: this.shader.vertexShader,\n\t\t\tfragmentShader: this.shader.fragmentShader\n\n\t\t} );\n\n\t\tthis.compFsQuad = new FullScreenQuad( this.compFsMaterial );\n\n\t\tthis.copyFsMaterial = new MeshBasicMaterial();\n\t\tthis.copyFsQuad = new FullScreenQuad( this.copyFsMaterial );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer/*, deltaTime, maskActive*/ ) {\n\n\t\tthis.uniforms[ 'tOld' ].value = this.textureOld.texture;\n\t\tthis.uniforms[ 'tNew' ].value = readBuffer.texture;\n\n\t\trenderer.setRenderTarget( this.textureComp );\n\t\tthis.compFsQuad.render( renderer );\n\n\t\tthis.copyFsQuad.material.map = this.textureComp.texture;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\n\t\t\tif ( this.clear ) renderer.clear();\n\n\t\t\tthis.copyFsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Swap buffers.\n\t\tconst temp = this.textureOld;\n\t\tthis.textureOld = this.textureComp;\n\t\tthis.textureComp = temp;\n\t\t// Now textureOld contains the latest image, ready for the next frame.\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.textureComp.setSize( width, height );\n\t\tthis.textureOld.setSize( width, height );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.textureComp.dispose();\n\t\tthis.textureOld.dispose();\n\n\t\tthis.compFsMaterial.dispose();\n\t\tthis.copyFsMaterial.dispose();\n\n\t\tthis.compFsQuad.dispose();\n\t\tthis.copyFsQuad.dispose();\n\n\t}\n\n}\n\nexport { AfterimagePass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}