{"ast":null,"code":"import { AddEquation, Color, NormalBlending, DepthTexture, SrcAlphaFactor, OneMinusSrcAlphaFactor, MeshNormalMaterial, MeshBasicMaterial, NearestFilter, NoBlending, ShaderMaterial, UniformsUtils, UnsignedShortType, WebGLRenderTarget, HalfFloatType } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SSRShader } from '../shaders/SSRShader.js';\nimport { SSRBlurShader } from '../shaders/SSRShader.js';\nimport { SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nclass SSRPass extends Pass {\n  constructor({\n    renderer,\n    scene,\n    camera,\n    width,\n    height,\n    selects,\n    bouncing = false,\n    groundReflector\n  }) {\n    super();\n    this.width = width !== undefined ? width : 512;\n    this.height = height !== undefined ? height : 512;\n    this.clear = true;\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    this.groundReflector = groundReflector;\n    this.opacity = SSRShader.uniforms.opacity.value;\n    this.output = 0;\n    this.maxDistance = SSRShader.uniforms.maxDistance.value;\n    this.thickness = SSRShader.uniforms.thickness.value;\n    this.tempColor = new Color();\n    this._selects = selects;\n    this.selective = Array.isArray(this._selects);\n    Object.defineProperty(this, 'selects', {\n      get() {\n        return this._selects;\n      },\n      set(val) {\n        if (this._selects === val) return;\n        this._selects = val;\n        if (Array.isArray(val)) {\n          this.selective = true;\n          this.ssrMaterial.defines.SELECTIVE = true;\n          this.ssrMaterial.needsUpdate = true;\n        } else {\n          this.selective = false;\n          this.ssrMaterial.defines.SELECTIVE = false;\n          this.ssrMaterial.needsUpdate = true;\n        }\n      }\n    });\n    this._bouncing = bouncing;\n    Object.defineProperty(this, 'bouncing', {\n      get() {\n        return this._bouncing;\n      },\n      set(val) {\n        if (this._bouncing === val) return;\n        this._bouncing = val;\n        if (val) {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n        } else {\n          this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        }\n      }\n    });\n    this.blur = true;\n    this._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(this, 'distanceAttenuation', {\n      get() {\n        return this._distanceAttenuation;\n      },\n      set(val) {\n        if (this._distanceAttenuation === val) return;\n        this._distanceAttenuation = val;\n        this.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._fresnel = SSRShader.defines.FRESNEL;\n    Object.defineProperty(this, 'fresnel', {\n      get() {\n        return this._fresnel;\n      },\n      set(val) {\n        if (this._fresnel === val) return;\n        this._fresnel = val;\n        this.ssrMaterial.defines.FRESNEL = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n    this._infiniteThick = SSRShader.defines.INFINITE_THICK;\n    Object.defineProperty(this, 'infiniteThick', {\n      get() {\n        return this._infiniteThick;\n      },\n      set(val) {\n        if (this._infiniteThick === val) return;\n        this._infiniteThick = val;\n        this.ssrMaterial.defines.INFINITE_THICK = val;\n        this.ssrMaterial.needsUpdate = true;\n      }\n    });\n\n    // beauty render target with depth buffer\n\n    const depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    depthTexture.minFilter = NearestFilter;\n    depthTexture.magFilter = NearestFilter;\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType,\n      depthTexture: depthTexture,\n      depthBuffer: true\n    });\n\n    //for bouncing\n    this.prevRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n\n    // normal render target\n\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n\n    // metalness render target\n\n    this.metalnessRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      type: HalfFloatType\n    });\n\n    // ssr render target\n\n    this.ssrRenderTarget = new WebGLRenderTarget(this.width, this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter\n    });\n    this.blurRenderTarget = this.ssrRenderTarget.clone();\n    this.blurRenderTarget2 = this.ssrRenderTarget.clone();\n    // this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n    // ssr material\n\n    this.ssrMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRShader.defines, {\n        MAX_STEP: Math.sqrt(this.width * this.width + this.height * this.height)\n      }),\n      uniforms: UniformsUtils.clone(SSRShader.uniforms),\n      vertexShader: SSRShader.vertexShader,\n      fragmentShader: SSRShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.ssrMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n    this.ssrMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n    this.ssrMaterial.defines.SELECTIVE = this.selective;\n    this.ssrMaterial.needsUpdate = true;\n    this.ssrMaterial.uniforms['tMetalness'].value = this.metalnessRenderTarget.texture;\n    this.ssrMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n    this.ssrMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.ssrMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness;\n    this.ssrMaterial.uniforms['resolution'].value.set(this.width, this.height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n\n    // normal material\n\n    this.normalMaterial = new MeshNormalMaterial();\n    this.normalMaterial.blending = NoBlending;\n\n    // metalnessOn material\n\n    this.metalnessOnMaterial = new MeshBasicMaterial({\n      color: 'white'\n    });\n\n    // metalnessOff material\n\n    this.metalnessOffMaterial = new MeshBasicMaterial({\n      color: 'black'\n    });\n\n    // blur material\n\n    this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height);\n\n    // blur material 2\n\n    this.blurMaterial2 = new ShaderMaterial({\n      defines: Object.assign({}, SSRBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n      vertexShader: SSRBlurShader.vertexShader,\n      fragmentShader: SSRBlurShader.fragmentShader\n    });\n    this.blurMaterial2.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n    this.blurMaterial2.uniforms['resolution'].value.set(this.width, this.height);\n\n    // // blur material 3\n\n    // this.blurMaterial3 = new ShaderMaterial({\n    //   defines: Object.assign({}, SSRBlurShader.defines),\n    //   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n    //   vertexShader: SSRBlurShader.vertexShader,\n    //   fragmentShader: SSRBlurShader.fragmentShader\n    // });\n    // this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n    // this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n    // material for rendering the depth\n\n    this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSRDepthShader.defines),\n      uniforms: UniformsUtils.clone(SSRDepthShader.uniforms),\n      vertexShader: SSRDepthShader.vertexShader,\n      fragmentShader: SSRDepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.beautyRenderTarget.depthTexture;\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far;\n\n    // material for rendering the content of a render target\n\n    this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: SrcAlphaFactor,\n      blendDst: OneMinusSrcAlphaFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: SrcAlphaFactor,\n      blendDstAlpha: OneMinusSrcAlphaFactor,\n      blendEquationAlpha: AddEquation\n      // premultipliedAlpha:true,\n    });\n    this.fsQuad = new FullScreenQuad(null);\n    this.originalClearColor = new Color();\n  }\n  dispose() {\n    // dispose render targets\n\n    this.beautyRenderTarget.dispose();\n    this.prevRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.metalnessRenderTarget.dispose();\n    this.ssrRenderTarget.dispose();\n    this.blurRenderTarget.dispose();\n    this.blurRenderTarget2.dispose();\n    // this.blurRenderTarget3.dispose();\n\n    // dispose materials\n\n    this.normalMaterial.dispose();\n    this.metalnessOnMaterial.dispose();\n    this.metalnessOffMaterial.dispose();\n    this.blurMaterial.dispose();\n    this.blurMaterial2.dispose();\n    this.copyMaterial.dispose();\n    this.depthRenderMaterial.dispose();\n\n    // dipsose full screen quad\n\n    this.fsQuad.dispose();\n  }\n  render(renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */) {\n    // render beauty and depth\n\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    if (this.groundReflector) {\n      this.groundReflector.visible = false;\n      this.groundReflector.doRender(this.renderer, this.scene, this.camera);\n      this.groundReflector.visible = true;\n    }\n    renderer.render(this.scene, this.camera);\n    if (this.groundReflector) this.groundReflector.visible = false;\n\n    // render normals\n\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0, 0);\n\n    // render metalnesses\n\n    if (this.selective) {\n      this.renderMetalness(renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0);\n    }\n\n    // render SSR\n\n    this.ssrMaterial.uniforms['opacity'].value = this.opacity;\n    this.ssrMaterial.uniforms['maxDistance'].value = this.maxDistance;\n    this.ssrMaterial.uniforms['thickness'].value = this.thickness;\n    this.renderPass(renderer, this.ssrMaterial, this.ssrRenderTarget);\n\n    // render blur\n\n    if (this.blur) {\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget);\n      this.renderPass(renderer, this.blurMaterial2, this.blurRenderTarget2);\n      // this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n    }\n\n    // output result to screen\n\n    switch (this.output) {\n      case SSRPass.OUTPUT.Default:\n        if (this.bouncing) {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.prevRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        } else {\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        }\n        break;\n      case SSRPass.OUTPUT.SSR:\n        if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        if (this.bouncing) {\n          if (this.blur) this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;else this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssrRenderTarget.texture;\n          this.copyMaterial.blending = NormalBlending;\n          this.renderPass(renderer, this.copyMaterial, this.prevRenderTarget);\n        }\n        break;\n      case SSRPass.OUTPUT.Beauty:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Depth:\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Normal:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      case SSRPass.OUTPUT.Metalness:\n        this.copyMaterial.uniforms['tDiffuse'].value = this.metalnessRenderTarget.texture;\n        this.copyMaterial.blending = NoBlending;\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n        break;\n      default:\n        console.warn('THREE.SSRPass: Unknown output type.');\n    }\n  }\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n\n    // setup pass state\n    renderer.autoClear = false;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer);\n\n    // restore original state\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null;\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  renderMetalness(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    this.originalClearColor.copy(renderer.getClearColor(this.tempColor));\n    const originalClearAlpha = renderer.getClearAlpha(this.tempColor);\n    const originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n    this.scene.traverseVisible(child => {\n      child._SSRPassBackupMaterial = child.material;\n      if (this._selects.includes(child)) {\n        child.material = this.metalnessOnMaterial;\n      } else {\n        child.material = this.metalnessOffMaterial;\n      }\n    });\n    renderer.render(this.scene, this.camera);\n    this.scene.traverseVisible(child => {\n      child.material = child._SSRPassBackupMaterial;\n    });\n\n    // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    this.ssrMaterial.defines.MAX_STEP = Math.sqrt(width * width + height * height);\n    this.ssrMaterial.needsUpdate = true;\n    this.beautyRenderTarget.setSize(width, height);\n    this.prevRenderTarget.setSize(width, height);\n    this.ssrRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.metalnessRenderTarget.setSize(width, height);\n    this.blurRenderTarget.setSize(width, height);\n    this.blurRenderTarget2.setSize(width, height);\n    // this.blurRenderTarget3.setSize(width, height);\n\n    this.ssrMaterial.uniforms['resolution'].value.set(width, height);\n    this.ssrMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n    this.ssrMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    this.blurMaterial2.uniforms['resolution'].value.set(width, height);\n  }\n}\nSSRPass.OUTPUT = {\n  'Default': 0,\n  'SSR': 1,\n  'Beauty': 3,\n  'Depth': 4,\n  'Normal': 5,\n  'Metalness': 7\n};\nexport { SSRPass };","map":{"version":3,"names":["AddEquation","Color","NormalBlending","DepthTexture","SrcAlphaFactor","OneMinusSrcAlphaFactor","MeshNormalMaterial","MeshBasicMaterial","NearestFilter","NoBlending","ShaderMaterial","UniformsUtils","UnsignedShortType","WebGLRenderTarget","HalfFloatType","Pass","FullScreenQuad","SSRShader","SSRBlurShader","SSRDepthShader","CopyShader","SSRPass","constructor","renderer","scene","camera","width","height","selects","bouncing","groundReflector","undefined","clear","opacity","uniforms","value","output","maxDistance","thickness","tempColor","_selects","selective","Array","isArray","Object","defineProperty","get","set","val","ssrMaterial","defines","SELECTIVE","needsUpdate","_bouncing","prevRenderTarget","texture","beautyRenderTarget","blur","_distanceAttenuation","DISTANCE_ATTENUATION","_fresnel","FRESNEL","_infiniteThick","INFINITE_THICK","depthTexture","type","minFilter","magFilter","depthBuffer","normalRenderTarget","metalnessRenderTarget","ssrRenderTarget","blurRenderTarget","clone","blurRenderTarget2","assign","MAX_STEP","Math","sqrt","vertexShader","fragmentShader","blending","near","far","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","metalnessOnMaterial","color","metalnessOffMaterial","blurMaterial","blurMaterial2","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","render","writeBuffer","setRenderTarget","visible","doRender","renderOverride","renderMetalness","renderPass","OUTPUT","Default","renderToScreen","SSR","Beauty","Depth","Normal","Metalness","console","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","traverseVisible","child","_SSRPassBackupMaterial","includes","setSize"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/postprocessing/SSRPass.js"],"sourcesContent":["import {\n\tAddEquation,\n\tColor,\n\tNormalBlending,\n\tDepthTexture,\n\tSrcAlphaFactor,\n\tOneMinusSrcAlphaFactor,\n\tMeshNormalMaterial,\n\tMeshBasicMaterial,\n\tNearestFilter,\n\tNoBlending,\n\tShaderMaterial,\n\tUniformsUtils,\n\tUnsignedShortType,\n\tWebGLRenderTarget,\n\tHalfFloatType,\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SSRShader } from '../shaders/SSRShader.js';\nimport { SSRBlurShader } from '../shaders/SSRShader.js';\nimport { SSRDepthShader } from '../shaders/SSRShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SSRPass extends Pass {\n\n\tconstructor( { renderer, scene, camera, width, height, selects, bouncing = false, groundReflector } ) {\n\n\t\tsuper();\n\n\t\tthis.width = ( width !== undefined ) ? width : 512;\n\t\tthis.height = ( height !== undefined ) ? height : 512;\n\n\t\tthis.clear = true;\n\n\t\tthis.renderer = renderer;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\t\tthis.groundReflector = groundReflector;\n\n\t\tthis.opacity = SSRShader.uniforms.opacity.value;\n\t\tthis.output = 0;\n\n\t\tthis.maxDistance = SSRShader.uniforms.maxDistance.value;\n\t\tthis.thickness = SSRShader.uniforms.thickness.value;\n\n\t\tthis.tempColor = new Color();\n\n\t\tthis._selects = selects;\n\t\tthis.selective = Array.isArray( this._selects );\n\t\tObject.defineProperty( this, 'selects', {\n\t\t\tget() {\n\n\t\t\t\treturn this._selects;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._selects === val ) return;\n\t\t\t\tthis._selects = val;\n\t\t\t\tif ( Array.isArray( val ) ) {\n\n\t\t\t\t\tthis.selective = true;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = true;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.selective = false;\n\t\t\t\t\tthis.ssrMaterial.defines.SELECTIVE = false;\n\t\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._bouncing = bouncing;\n\t\tObject.defineProperty( this, 'bouncing', {\n\t\t\tget() {\n\n\t\t\t\treturn this._bouncing;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._bouncing === val ) return;\n\t\t\t\tthis._bouncing = val;\n\t\t\t\tif ( val ) {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.blur = true;\n\n\t\tthis._distanceAttenuation = SSRShader.defines.DISTANCE_ATTENUATION;\n\t\tObject.defineProperty( this, 'distanceAttenuation', {\n\t\t\tget() {\n\n\t\t\t\treturn this._distanceAttenuation;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._distanceAttenuation === val ) return;\n\t\t\t\tthis._distanceAttenuation = val;\n\t\t\t\tthis.ssrMaterial.defines.DISTANCE_ATTENUATION = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\n\t\tthis._fresnel = SSRShader.defines.FRESNEL;\n\t\tObject.defineProperty( this, 'fresnel', {\n\t\t\tget() {\n\n\t\t\t\treturn this._fresnel;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._fresnel === val ) return;\n\t\t\t\tthis._fresnel = val;\n\t\t\t\tthis.ssrMaterial.defines.FRESNEL = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\tthis._infiniteThick = SSRShader.defines.INFINITE_THICK;\n\t\tObject.defineProperty( this, 'infiniteThick', {\n\t\t\tget() {\n\n\t\t\t\treturn this._infiniteThick;\n\n\t\t\t},\n\t\t\tset( val ) {\n\n\t\t\t\tif ( this._infiniteThick === val ) return;\n\t\t\t\tthis._infiniteThick = val;\n\t\t\t\tthis.ssrMaterial.defines.INFINITE_THICK = val;\n\t\t\t\tthis.ssrMaterial.needsUpdate = true;\n\n\t\t\t}\n\t\t} );\n\n\t\t// beauty render target with depth buffer\n\n\t\tconst depthTexture = new DepthTexture();\n\t\tdepthTexture.type = UnsignedShortType;\n\t\tdepthTexture.minFilter = NearestFilter;\n\t\tdepthTexture.magFilter = NearestFilter;\n\n\t\tthis.beautyRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t\tdepthTexture: depthTexture,\n\t\t\tdepthBuffer: true\n\t\t} );\n\n\t\t//for bouncing\n\t\tthis.prevRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\t// normal render target\n\n\t\tthis.normalRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t} );\n\n\t\t// metalness render target\n\n\t\tthis.metalnessRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter,\n\t\t\ttype: HalfFloatType,\n\t\t} );\n\n\n\n\t\t// ssr render target\n\n\t\tthis.ssrRenderTarget = new WebGLRenderTarget( this.width, this.height, {\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t} );\n\n\t\tthis.blurRenderTarget = this.ssrRenderTarget.clone();\n\t\tthis.blurRenderTarget2 = this.ssrRenderTarget.clone();\n\t\t// this.blurRenderTarget3 = this.ssrRenderTarget.clone();\n\n\t\t// ssr material\n\n\t\tthis.ssrMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRShader.defines, {\n\t\t\t\tMAX_STEP: Math.sqrt( this.width * this.width + this.height * this.height )\n\t\t\t} ),\n\t\t\tuniforms: UniformsUtils.clone( SSRShader.uniforms ),\n\t\t\tvertexShader: SSRShader.vertexShader,\n\t\t\tfragmentShader: SSRShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\n\t\tthis.ssrMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\tthis.ssrMaterial.defines.SELECTIVE = this.selective;\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.ssrMaterial.uniforms[ 'tMetalness' ].value = this.metalnessRenderTarget.texture;\n\t\tthis.ssrMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.ssrMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.ssrMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\t// normal material\n\n\t\tthis.normalMaterial = new MeshNormalMaterial();\n\t\tthis.normalMaterial.blending = NoBlending;\n\n\t\t// metalnessOn material\n\n\t\tthis.metalnessOnMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'white'\n\t\t} );\n\n\t\t// metalnessOff material\n\n\t\tthis.metalnessOffMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 'black'\n\t\t} );\n\n\t\t// blur material\n\n\t\tthis.blurMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// blur material 2\n\n\t\tthis.blurMaterial2 = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRBlurShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRBlurShader.uniforms ),\n\t\t\tvertexShader: SSRBlurShader.vertexShader,\n\t\t\tfragmentShader: SSRBlurShader.fragmentShader\n\t\t} );\n\t\tthis.blurMaterial2.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\n\t\t// // blur material 3\n\n\t\t// this.blurMaterial3 = new ShaderMaterial({\n\t\t//   defines: Object.assign({}, SSRBlurShader.defines),\n\t\t//   uniforms: UniformsUtils.clone(SSRBlurShader.uniforms),\n\t\t//   vertexShader: SSRBlurShader.vertexShader,\n\t\t//   fragmentShader: SSRBlurShader.fragmentShader\n\t\t// });\n\t\t// this.blurMaterial3.uniforms['tDiffuse'].value = this.blurRenderTarget2.texture;\n\t\t// this.blurMaterial3.uniforms['resolution'].value.set(this.width, this.height);\n\n\t\t// material for rendering the depth\n\n\t\tthis.depthRenderMaterial = new ShaderMaterial( {\n\t\t\tdefines: Object.assign( {}, SSRDepthShader.defines ),\n\t\t\tuniforms: UniformsUtils.clone( SSRDepthShader.uniforms ),\n\t\t\tvertexShader: SSRDepthShader.vertexShader,\n\t\t\tfragmentShader: SSRDepthShader.fragmentShader,\n\t\t\tblending: NoBlending\n\t\t} );\n\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.beautyRenderTarget.depthTexture;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\n\t\t// material for rendering the content of a render target\n\n\t\tthis.copyMaterial = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( CopyShader.uniforms ),\n\t\t\tvertexShader: CopyShader.vertexShader,\n\t\t\tfragmentShader: CopyShader.fragmentShader,\n\t\t\ttransparent: true,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tblendSrc: SrcAlphaFactor,\n\t\t\tblendDst: OneMinusSrcAlphaFactor,\n\t\t\tblendEquation: AddEquation,\n\t\t\tblendSrcAlpha: SrcAlphaFactor,\n\t\t\tblendDstAlpha: OneMinusSrcAlphaFactor,\n\t\t\tblendEquationAlpha: AddEquation,\n\t\t\t// premultipliedAlpha:true,\n\t\t} );\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.originalClearColor = new Color();\n\n\t}\n\n\tdispose() {\n\n\t\t// dispose render targets\n\n\t\tthis.beautyRenderTarget.dispose();\n\t\tthis.prevRenderTarget.dispose();\n\t\tthis.normalRenderTarget.dispose();\n\t\tthis.metalnessRenderTarget.dispose();\n\t\tthis.ssrRenderTarget.dispose();\n\t\tthis.blurRenderTarget.dispose();\n\t\tthis.blurRenderTarget2.dispose();\n\t\t// this.blurRenderTarget3.dispose();\n\n\t\t// dispose materials\n\n\t\tthis.normalMaterial.dispose();\n\t\tthis.metalnessOnMaterial.dispose();\n\t\tthis.metalnessOffMaterial.dispose();\n\t\tthis.blurMaterial.dispose();\n\t\tthis.blurMaterial2.dispose();\n\t\tthis.copyMaterial.dispose();\n\t\tthis.depthRenderMaterial.dispose();\n\n\t\t// dipsose full screen quad\n\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n\trender( renderer, writeBuffer /*, readBuffer, deltaTime, maskActive */ ) {\n\n\t\t// render beauty and depth\n\n\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\trenderer.clear();\n\t\tif ( this.groundReflector ) {\n\n\t\t\tthis.groundReflector.visible = false;\n\t\t\tthis.groundReflector.doRender( this.renderer, this.scene, this.camera );\n\t\t\tthis.groundReflector.visible = true;\n\n\t\t}\n\n\t\trenderer.render( this.scene, this.camera );\n\t\tif ( this.groundReflector ) this.groundReflector.visible = false;\n\n\t\t// render normals\n\n\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0, 0 );\n\n\t\t// render metalnesses\n\n\t\tif ( this.selective ) {\n\n\t\t\tthis.renderMetalness( renderer, this.metalnessOnMaterial, this.metalnessRenderTarget, 0, 0 );\n\n\t\t}\n\n\t\t// render SSR\n\n\t\tthis.ssrMaterial.uniforms[ 'opacity' ].value = this.opacity;\n\t\tthis.ssrMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\tthis.ssrMaterial.uniforms[ 'thickness' ].value = this.thickness;\n\t\tthis.renderPass( renderer, this.ssrMaterial, this.ssrRenderTarget );\n\n\n\t\t// render blur\n\n\t\tif ( this.blur ) {\n\n\t\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget );\n\t\t\tthis.renderPass( renderer, this.blurMaterial2, this.blurRenderTarget2 );\n\t\t\t// this.renderPass(renderer, this.blurMaterial3, this.blurRenderTarget3);\n\n\t\t}\n\n\t\t// output result to screen\n\n\t\tswitch ( this.output ) {\n\n\t\t\tcase SSRPass.OUTPUT.Default:\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.prevRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase SSRPass.OUTPUT.SSR:\n\n\t\t\t\tif ( this.blur )\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\telse\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tif ( this.bouncing ) {\n\n\t\t\t\t\tif ( this.blur )\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget2.texture;\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssrRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = NormalBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.prevRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Beauty:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Depth:\n\n\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Normal:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tcase SSRPass.OUTPUT.Metalness:\n\n\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.metalnessRenderTarget.texture;\n\t\t\t\tthis.copyMaterial.blending = NoBlending;\n\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.SSRPass: Unknown output type.' );\n\n\t\t}\n\n\t}\n\n\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t// save original state\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t// setup pass state\n\t\trenderer.autoClear = false;\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.fsQuad.material = passMaterial;\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// restore original state\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.overrideMaterial = null;\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\trenderMetalness( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\tthis.originalClearColor.copy( renderer.getClearColor( this.tempColor ) );\n\t\tconst originalClearAlpha = renderer.getClearAlpha( this.tempColor );\n\t\tconst originalAutoClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = false;\n\n\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\tif ( ( clearColor !== undefined ) && ( clearColor !== null ) ) {\n\n\t\t\trenderer.setClearColor( clearColor );\n\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\trenderer.clear();\n\n\t\t}\n\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild._SSRPassBackupMaterial = child.material;\n\t\t\tif ( this._selects.includes( child ) ) {\n\n\t\t\t\tchild.material = this.metalnessOnMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tchild.material = this.metalnessOffMaterial;\n\n\t\t\t}\n\n\t\t} );\n\t\trenderer.render( this.scene, this.camera );\n\t\tthis.scene.traverseVisible( child => {\n\n\t\t\tchild.material = child._SSRPassBackupMaterial;\n\n\t\t} );\n\n\t\t// restore original state\n\n\t\trenderer.autoClear = originalAutoClear;\n\t\trenderer.setClearColor( this.originalClearColor );\n\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.ssrMaterial.defines.MAX_STEP = Math.sqrt( width * width + height * height );\n\t\tthis.ssrMaterial.needsUpdate = true;\n\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\tthis.prevRenderTarget.setSize( width, height );\n\t\tthis.ssrRenderTarget.setSize( width, height );\n\t\tthis.normalRenderTarget.setSize( width, height );\n\t\tthis.metalnessRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget.setSize( width, height );\n\t\tthis.blurRenderTarget2.setSize( width, height );\n\t\t// this.blurRenderTarget3.setSize(width, height);\n\n\t\tthis.ssrMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.ssrMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\tthis.ssrMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\n\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\tthis.blurMaterial2.uniforms[ 'resolution' ].value.set( width, height );\n\n\t}\n\n}\n\nSSRPass.OUTPUT = {\n\t'Default': 0,\n\t'SSR': 1,\n\t'Beauty': 3,\n\t'Depth': 4,\n\t'Normal': 5,\n\t'Metalness': 7,\n};\n\nexport { SSRPass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}