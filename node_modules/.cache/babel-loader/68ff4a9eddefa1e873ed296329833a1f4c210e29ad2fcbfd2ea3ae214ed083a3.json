{"ast":null,"code":"import { LinearFilter, Matrix3, Mesh, NearestFilter, OrthographicCamera, PlaneGeometry, RGBAFormat, Scene, ShaderMaterial, StereoCamera, WebGLRenderTarget } from 'three';\nclass AnaglyphEffect {\n  constructor(renderer, width = 512, height = 512) {\n    // Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\n\n    this.colorMatrixLeft = new Matrix3().fromArray([0.456100, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -0.00546856]);\n    this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -0.00155529, -0.0184503, 1.2264]);\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    };\n    const _renderTargetL = new WebGLRenderTarget(width, height, _params);\n    const _renderTargetR = new WebGLRenderTarget(width, height, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        'mapLeft': {\n          value: _renderTargetL.texture\n        },\n        'mapRight': {\n          value: _renderTargetR.texture\n        },\n        'colorMatrixLeft': {\n          value: this.colorMatrixLeft\n        },\n        'colorMatrixRight': {\n          value: this.colorMatrixRight\n        }\n      },\n      vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'uniform mat3 colorMatrixLeft;', 'uniform mat3 colorMatrixRight;', 'void main() {', '\tvec2 uv = vUv;', '\tvec4 colorL = texture2D( mapLeft, uv );', '\tvec4 colorR = texture2D( mapRight, uv );', '\tvec3 color = clamp(', '\t\t\tcolorMatrixLeft * colorL.rgb +', '\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );', '\tgl_FragColor = vec4(', '\t\t\tcolor.r, color.g, color.b,', '\t\t\tmax( colorL.a, colorR.a ) );', '\t#include <tonemapping_fragment>', '\t#include <colorspace_fragment>', '}'].join('\\n')\n    });\n    const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(_mesh);\n    this.setSize = function (width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n    this.render = function (scene, camera) {\n      const currentRenderTarget = renderer.getRenderTarget();\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n      renderer.setRenderTarget(currentRenderTarget);\n    };\n    this.dispose = function () {\n      _renderTargetL.dispose();\n      _renderTargetR.dispose();\n      _mesh.geometry.dispose();\n      _mesh.material.dispose();\n    };\n  }\n}\nexport { AnaglyphEffect };","map":{"version":3,"names":["LinearFilter","Matrix3","Mesh","NearestFilter","OrthographicCamera","PlaneGeometry","RGBAFormat","Scene","ShaderMaterial","StereoCamera","WebGLRenderTarget","AnaglyphEffect","constructor","renderer","width","height","colorMatrixLeft","fromArray","colorMatrixRight","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","value","texture","vertexShader","join","fragmentShader","_mesh","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry","material"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/effects/AnaglyphEffect.js"],"sourcesContent":["import {\n\tLinearFilter,\n\tMatrix3,\n\tMesh,\n\tNearestFilter,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tRGBAFormat,\n\tScene,\n\tShaderMaterial,\n\tStereoCamera,\n\tWebGLRenderTarget\n} from 'three';\n\nclass AnaglyphEffect {\n\n\tconstructor( renderer, width = 512, height = 512 ) {\n\n\t\t// Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\n\n\t\tthis.colorMatrixLeft = new Matrix3().fromArray( [\n\t\t\t0.456100, - 0.0400822, - 0.0152161,\n\t\t\t0.500484, - 0.0378246, - 0.0205971,\n\t\t\t0.176381, - 0.0157589, - 0.00546856\n\t\t] );\n\n\t\tthis.colorMatrixRight = new Matrix3().fromArray( [\n\t\t\t- 0.0434706, 0.378476, - 0.0721527,\n\t\t\t- 0.0879388, 0.73364, - 0.112961,\n\t\t\t- 0.00155529, - 0.0184503, 1.2264\n\t\t] );\n\n\t\tconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\tconst _scene = new Scene();\n\n\t\tconst _stereo = new StereoCamera();\n\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\tconst _renderTargetL = new WebGLRenderTarget( width, height, _params );\n\t\tconst _renderTargetR = new WebGLRenderTarget( width, height, _params );\n\n\t\tconst _material = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t'mapLeft': { value: _renderTargetL.texture },\n\t\t\t\t'mapRight': { value: _renderTargetR.texture },\n\n\t\t\t\t'colorMatrixLeft': { value: this.colorMatrixLeft },\n\t\t\t\t'colorMatrixRight': { value: this.colorMatrixRight }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUv = vec2( uv.x, uv.y );',\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'uniform sampler2D mapLeft;',\n\t\t\t\t'uniform sampler2D mapRight;',\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'uniform mat3 colorMatrixLeft;',\n\t\t\t\t'uniform mat3 colorMatrixRight;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec2 uv = vUv;',\n\n\t\t\t\t'\tvec4 colorL = texture2D( mapLeft, uv );',\n\t\t\t\t'\tvec4 colorR = texture2D( mapRight, uv );',\n\n\t\t\t\t'\tvec3 color = clamp(',\n\t\t\t\t'\t\t\tcolorMatrixLeft * colorL.rgb +',\n\t\t\t\t'\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );',\n\n\t\t\t\t'\tgl_FragColor = vec4(',\n\t\t\t\t'\t\t\tcolor.r, color.g, color.b,',\n\t\t\t\t'\t\t\tmax( colorL.a, colorR.a ) );',\n\n\t\t\t\t'\t#include <tonemapping_fragment>',\n\t\t\t\t'\t#include <colorspace_fragment>',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tconst _mesh = new Mesh( new PlaneGeometry( 2, 2 ), _material );\n\t\t_scene.add( _mesh );\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tconst pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( _scene, _camera );\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\t_renderTargetL.dispose();\n\t\t\t_renderTargetR.dispose();\n\t\t\t_mesh.geometry.dispose();\n\t\t\t_mesh.material.dispose();\n\n\t\t};\n\n\t}\n\n}\n\nexport { AnaglyphEffect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}