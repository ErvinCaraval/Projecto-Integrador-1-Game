{"ast":null,"code":"import { Mesh, MeshBasicMaterial, Object3D, SphereGeometry } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { Constants as MotionControllerConstants, fetchProfile, MotionController } from '../libs/motion-controllers.module.js';\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return;\n\n    // Cause the MotionController to poll the Gamepad for data\n    this.motionController.updateFromGamepad();\n\n    // Update the 3D model to reflect the button, thumbstick, and touchpad state\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse;\n\n        // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n        if (!valueNode) return;\n\n        // Calculate the new properties based on the weight supplied\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000FF\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    }\n\n    // Loop through all the visual responses to be applied to this component\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse;\n\n      // If animating a transform, find the two nodes to be interpolated between.\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName);\n\n        // If the extents cannot be found, skip this animation\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      }\n\n      // If the target node cannot be found, skip this animation\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene);\n\n  // Apply any environment map that the mesh already has set.\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  }\n\n  // Add the glTF scene to the controllerModel.\n  controllerModel.add(scene);\n}\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null, onLoad = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {};\n    this.onLoad = onLoad;\n\n    // If a GLTFLoader wasn't supplied to the constructor create a new one.\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n          if (this.onLoad) this.onLoad(scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n            if (this.onLoad) this.onLoad(scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n}\nexport { XRControllerModelFactory };","map":{"version":3,"names":["Mesh","MeshBasicMaterial","Object3D","SphereGeometry","GLTFLoader","Constants","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","constructor","motionController","envMap","setEnvironmentMap","traverse","child","isMesh","material","needsUpdate","updateMatrixWorld","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","onLoad","path","_assetCache","setPath","createControllerModel","controller","addEventListener","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","cachedAsset","assetUrl","clone","Error","load","asset","catch","err","remove"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/webxr/XRControllerModelFactory.js"],"sourcesContent":["import {\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tSphereGeometry,\n} from 'three';\n\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\n\nimport {\n\tConstants as MotionControllerConstants,\n\tfetchProfile,\n\tMotionController\n} from '../libs/motion-controllers.module.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t}\n\n\tsetEnvironmentMap( envMap ) {\n\n\t\tif ( this.envMap == envMap ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.envMap = envMap;\n\t\tthis.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = this.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Polls data from the XRInputSource and updates the model's components to match\n\t * the real world data\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( ! this.motionController ) return;\n\n\t\t// Cause the MotionController to poll the Gamepad for data\n\t\tthis.motionController.updateFromGamepad();\n\n\t\t// Update the 3D model to reflect the button, thumbstick, and touchpad state\n\t\tObject.values( this.motionController.components ).forEach( ( component ) => {\n\n\t\t\t// Update node data based on the visual responses' current states\n\t\t\tObject.values( component.visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\t\tconst { valueNode, minNode, maxNode, value, valueNodeProperty } = visualResponse;\n\n\t\t\t\t// Skip if the visual response node is not found. No error is needed,\n\t\t\t\t// because it will have been reported at load time.\n\t\t\t\tif ( ! valueNode ) return;\n\n\t\t\t\t// Calculate the new properties based on the weight supplied\n\t\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY ) {\n\n\t\t\t\t\tvalueNode.visible = value;\n\n\t\t\t\t} else if ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\t\tvalueNode.quaternion.slerpQuaternions(\n\t\t\t\t\t\tminNode.quaternion,\n\t\t\t\t\t\tmaxNode.quaternion,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t\tvalueNode.position.lerpVectors(\n\t\t\t\t\t\tminNode.position,\n\t\t\t\t\t\tmaxNode.position,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n}\n\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\nfunction findNodes( motionController, scene ) {\n\n\t// Loop through the components and find the nodes needed for each components' visual responses\n\tObject.values( motionController.components ).forEach( ( component ) => {\n\n\t\tconst { type, touchPointNodeName, visualResponses } = component;\n\n\t\tif ( type === MotionControllerConstants.ComponentType.TOUCHPAD ) {\n\n\t\t\tcomponent.touchPointNode = scene.getObjectByName( touchPointNodeName );\n\t\t\tif ( component.touchPointNode ) {\n\n\t\t\t\t// Attach a touch dot to the touchpad.\n\t\t\t\tconst sphereGeometry = new SphereGeometry( 0.001 );\n\t\t\t\tconst material = new MeshBasicMaterial( { color: 0x0000FF } );\n\t\t\t\tconst sphere = new Mesh( sphereGeometry, material );\n\t\t\t\tcomponent.touchPointNode.add( sphere );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( `Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}` );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Loop through all the visual responses to be applied to this component\n\t\tObject.values( visualResponses ).forEach( ( visualResponse ) => {\n\n\t\t\tconst { valueNodeName, minNodeName, maxNodeName, valueNodeProperty } = visualResponse;\n\n\t\t\t// If animating a transform, find the two nodes to be interpolated between.\n\t\t\tif ( valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM ) {\n\n\t\t\t\tvisualResponse.minNode = scene.getObjectByName( minNodeName );\n\t\t\t\tvisualResponse.maxNode = scene.getObjectByName( maxNodeName );\n\n\t\t\t\t// If the extents cannot be found, skip this animation\n\t\t\t\tif ( ! visualResponse.minNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${minNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! visualResponse.maxNode ) {\n\n\t\t\t\t\tconsole.warn( `Could not find ${maxNodeName} in the model` );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// If the target node cannot be found, skip this animation\n\t\t\tvisualResponse.valueNode = scene.getObjectByName( valueNodeName );\n\t\t\tif ( ! visualResponse.valueNode ) {\n\n\t\t\t\tconsole.warn( `Could not find ${valueNodeName} in the model` );\n\n\t\t\t}\n\n\t\t} );\n\n\t} );\n\n}\n\nfunction addAssetSceneToControllerModel( controllerModel, scene ) {\n\n\t// Find the nodes needed for animation and cache them on the motionController.\n\tfindNodes( controllerModel.motionController, scene );\n\n\t// Apply any environment map that the mesh already has set.\n\tif ( controllerModel.envMap ) {\n\n\t\tscene.traverse( ( child ) => {\n\n\t\t\tif ( child.isMesh ) {\n\n\t\t\t\tchild.material.envMap = controllerModel.envMap;\n\t\t\t\tchild.material.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// Add the glTF scene to the controllerModel.\n\tcontrollerModel.add( scene );\n\n}\n\nclass XRControllerModelFactory {\n\n\tconstructor( gltfLoader = null, onLoad = null ) {\n\n\t\tthis.gltfLoader = gltfLoader;\n\t\tthis.path = DEFAULT_PROFILES_PATH;\n\t\tthis._assetCache = {};\n\t\tthis.onLoad = onLoad;\n\n\t\t// If a GLTFLoader wasn't supplied to the constructor create a new one.\n\t\tif ( ! this.gltfLoader ) {\n\n\t\t\tthis.gltfLoader = new GLTFLoader();\n\n\t\t}\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\n\t\treturn this;\n\n\t}\n\n\tcreateControllerModel( controller ) {\n\n\t\tconst controllerModel = new XRControllerModel();\n\t\tlet scene = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.targetRayMode !== 'tracked-pointer' || ! xrInputSource.gamepad ) return;\n\n\t\t\tfetchProfile( xrInputSource, this.path, DEFAULT_PROFILE ).then( ( { profile, assetPath } ) => {\n\n\t\t\t\tcontrollerModel.motionController = new MotionController(\n\t\t\t\t\txrInputSource,\n\t\t\t\t\tprofile,\n\t\t\t\t\tassetPath\n\t\t\t\t);\n\n\t\t\t\tconst cachedAsset = this._assetCache[ controllerModel.motionController.assetUrl ];\n\t\t\t\tif ( cachedAsset ) {\n\n\t\t\t\t\tscene = cachedAsset.scene.clone();\n\n\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\tif ( this.onLoad ) this.onLoad( scene );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( ! this.gltfLoader ) {\n\n\t\t\t\t\t\tthrow new Error( 'GLTFLoader not set.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.gltfLoader.setPath( '' );\n\t\t\t\t\tthis.gltfLoader.load( controllerModel.motionController.assetUrl, ( asset ) => {\n\n\t\t\t\t\t\tthis._assetCache[ controllerModel.motionController.assetUrl ] = asset;\n\n\t\t\t\t\t\tscene = asset.scene.clone();\n\n\t\t\t\t\t\taddAssetSceneToControllerModel( controllerModel, scene );\n\n\t\t\t\t\t\tif ( this.onLoad ) this.onLoad( scene );\n\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t() => {\n\n\t\t\t\t\t\tthrow new Error( `Asset ${controllerModel.motionController.assetUrl} missing or malformed.` );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} ).catch( ( err ) => {\n\n\t\t\t\tconsole.warn( err );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontrollerModel.motionController = null;\n\t\t\tcontrollerModel.remove( scene );\n\t\t\tscene = null;\n\n\t\t} );\n\n\t\treturn controllerModel;\n\n\t}\n\n}\n\nexport { XRControllerModelFactory };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}