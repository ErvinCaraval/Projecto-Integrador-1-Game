{"ast":null,"code":"import { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\nclass OculusHandModel extends Object3D {\n  constructor(controller, loader = null) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.loader = loader;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness, this.loader);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.clear();\n      this.motionController = null;\n    });\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n}\nexport { OculusHandModel };","map":{"version":3,"names":["Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","constructor","controller","loader","motionController","envMap","mesh","addEventListener","event","xrInputSource","data","hand","path","handedness","clear","updateMatrixWorld","force","updateMesh","getPointerPosition","indexFingerTip","joints","position","intersectBoxObject","boxObject","pointerPosition","indexSphere","box","setFromObject","intersectsBox","checkButton","button","onPress","onClear","isPressed","whilePressed"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/webxr/OculusHandModel.js"],"sourcesContent":["import { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n\n\tconstructor( controller, loader = null ) {\n\n\t\tsuper();\n\n\t\tthis.controller = controller;\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\t\tthis.loader = loader;\n\n\t\tthis.mesh = null;\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.hand && ! this.motionController ) {\n\n\t\t\t\tthis.xrInputSource = xrInputSource;\n\n\t\t\t\tthis.motionController = new XRHandMeshModel( this, controller, this.path, xrInputSource.handedness, this.loader );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tthis.clear();\n\t\t\tthis.motionController = null;\n\n\t\t} );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.motionController ) {\n\n\t\t\tthis.motionController.updateMesh();\n\n\t\t}\n\n\t}\n\n\tgetPointerPosition() {\n\n\t\tconst indexFingerTip = this.controller.joints[ POINTING_JOINT ];\n\t\tif ( indexFingerTip ) {\n\n\t\t\treturn indexFingerTip.position;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t}\n\n\tintersectBoxObject( boxObject ) {\n\n\t\tconst pointerPosition = this.getPointerPosition();\n\t\tif ( pointerPosition ) {\n\n\t\t\tconst indexSphere = new Sphere( pointerPosition, TOUCH_RADIUS );\n\t\t\tconst box = new Box3().setFromObject( boxObject );\n\t\t\treturn indexSphere.intersectsBox( box );\n\n\t\t} else {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\tcheckButton( button ) {\n\n\t\tif ( this.intersectBoxObject( button ) ) {\n\n\t\t\tbutton.onPress();\n\n\t\t} else {\n\n\t\t\tbutton.onClear();\n\n\t\t}\n\n\t\tif ( button.isPressed() ) {\n\n\t\t\tbutton.whilePressed();\n\n\t\t}\n\n\t}\n\n}\n\nexport { OculusHandModel };\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,IAAI,QAAQ,OAAO;AAC9C,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,MAAMC,YAAY,GAAG,IAAI;AACzB,MAAMC,cAAc,GAAG,kBAAkB;AAEzC,MAAMC,eAAe,SAASN,QAAQ,CAAC;EAEtCO,WAAWA,CAAEC,UAAU,EAAEC,MAAM,GAAG,IAAI,EAAG;IAExC,KAAK,CAAC,CAAC;IAEP,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACF,MAAM,GAAGA,MAAM;IAEpB,IAAI,CAACG,IAAI,GAAG,IAAI;IAEhBJ,UAAU,CAACK,gBAAgB,CAAE,WAAW,EAAIC,KAAK,IAAM;MAEtD,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;MAEhC,IAAKD,aAAa,CAACE,IAAI,IAAI,CAAE,IAAI,CAACP,gBAAgB,EAAG;QAEpD,IAAI,CAACK,aAAa,GAAGA,aAAa;QAElC,IAAI,CAACL,gBAAgB,GAAG,IAAIP,eAAe,CAAE,IAAI,EAAEK,UAAU,EAAE,IAAI,CAACU,IAAI,EAAEH,aAAa,CAACI,UAAU,EAAE,IAAI,CAACV,MAAO,CAAC;MAElH;IAED,CAAE,CAAC;IAEHD,UAAU,CAACK,gBAAgB,CAAE,cAAc,EAAE,MAAM;MAElD,IAAI,CAACO,KAAK,CAAC,CAAC;MACZ,IAAI,CAACV,gBAAgB,GAAG,IAAI;IAE7B,CAAE,CAAC;EAEJ;EAEAW,iBAAiBA,CAAEC,KAAK,EAAG;IAE1B,KAAK,CAACD,iBAAiB,CAAEC,KAAM,CAAC;IAEhC,IAAK,IAAI,CAACZ,gBAAgB,EAAG;MAE5B,IAAI,CAACA,gBAAgB,CAACa,UAAU,CAAC,CAAC;IAEnC;EAED;EAEAC,kBAAkBA,CAAA,EAAG;IAEpB,MAAMC,cAAc,GAAG,IAAI,CAACjB,UAAU,CAACkB,MAAM,CAAErB,cAAc,CAAE;IAC/D,IAAKoB,cAAc,EAAG;MAErB,OAAOA,cAAc,CAACE,QAAQ;IAE/B,CAAC,MAAM;MAEN,OAAO,IAAI;IAEZ;EAED;EAEAC,kBAAkBA,CAAEC,SAAS,EAAG;IAE/B,MAAMC,eAAe,GAAG,IAAI,CAACN,kBAAkB,CAAC,CAAC;IACjD,IAAKM,eAAe,EAAG;MAEtB,MAAMC,WAAW,GAAG,IAAI9B,MAAM,CAAE6B,eAAe,EAAE1B,YAAa,CAAC;MAC/D,MAAM4B,GAAG,GAAG,IAAI9B,IAAI,CAAC,CAAC,CAAC+B,aAAa,CAAEJ,SAAU,CAAC;MACjD,OAAOE,WAAW,CAACG,aAAa,CAAEF,GAAI,CAAC;IAExC,CAAC,MAAM;MAEN,OAAO,KAAK;IAEb;EAED;EAEAG,WAAWA,CAAEC,MAAM,EAAG;IAErB,IAAK,IAAI,CAACR,kBAAkB,CAAEQ,MAAO,CAAC,EAAG;MAExCA,MAAM,CAACC,OAAO,CAAC,CAAC;IAEjB,CAAC,MAAM;MAEND,MAAM,CAACE,OAAO,CAAC,CAAC;IAEjB;IAEA,IAAKF,MAAM,CAACG,SAAS,CAAC,CAAC,EAAG;MAEzBH,MAAM,CAACI,YAAY,CAAC,CAAC;IAEtB;EAED;AAED;AAEA,SAASlC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}