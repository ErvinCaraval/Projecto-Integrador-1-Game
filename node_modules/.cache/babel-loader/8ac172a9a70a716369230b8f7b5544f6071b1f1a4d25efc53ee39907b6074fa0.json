{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n}\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource;\n\n        // @todo Detect profile if not provided\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n      controller.visible = true;\n    });\n    controller.addEventListener('disconnected', () => {\n      controller.visible = false;\n      // handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n}\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","constructor","controller","motionController","envMap","mesh","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","handModel","addEventListener","event","xrInputSource","data","hand","undefined","handedness","primitive","visible"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/webxr/XRHandModelFactory.js"],"sourcesContent":["import {\n\tObject3D\n} from 'three';\n\nimport {\n\tXRHandPrimitiveModel\n} from './XRHandPrimitiveModel.js';\n\nimport {\n\tXRHandMeshModel\n} from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n\n\tconstructor( controller ) {\n\n\t\tsuper();\n\n\t\tthis.controller = controller;\n\t\tthis.motionController = null;\n\t\tthis.envMap = null;\n\n\t\tthis.mesh = null;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.motionController ) {\n\n\t\t\tthis.motionController.updateMesh();\n\n\t\t}\n\n\t}\n\n}\n\nclass XRHandModelFactory {\n\n\tconstructor() {\n\n\t\tthis.path = null;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\n\t\treturn this;\n\n\t}\n\n\tcreateHandModel( controller, profile ) {\n\n\t\tconst handModel = new XRHandModel( controller );\n\n\t\tcontroller.addEventListener( 'connected', ( event ) => {\n\n\t\t\tconst xrInputSource = event.data;\n\n\t\t\tif ( xrInputSource.hand && ! handModel.motionController ) {\n\n\t\t\t\thandModel.xrInputSource = xrInputSource;\n\n\t\t\t\t// @todo Detect profile if not provided\n\t\t\t\tif ( profile === undefined || profile === 'spheres' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'sphere' } );\n\n\t\t\t\t} else if ( profile === 'boxes' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandPrimitiveModel( handModel, controller, this.path, xrInputSource.handedness, { primitive: 'box' } );\n\n\t\t\t\t} else if ( profile === 'mesh' ) {\n\n\t\t\t\t\thandModel.motionController = new XRHandMeshModel( handModel, controller, this.path, xrInputSource.handedness );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcontroller.visible = true;\n\n\t\t} );\n\n\t\tcontroller.addEventListener( 'disconnected', () => {\n\n\t\t\tcontroller.visible = false;\n\t\t\t// handModel.motionController = null;\n\t\t\t// handModel.remove( scene );\n\t\t\t// scene = null;\n\n\t\t} );\n\n\t\treturn handModel;\n\n\t}\n\n}\n\nexport { XRHandModelFactory };\n"],"mappings":"AAAA,SACCA,QAAQ,QACF,OAAO;AAEd,SACCC,oBAAoB,QACd,2BAA2B;AAElC,SACCC,eAAe,QACT,sBAAsB;AAE7B,MAAMC,WAAW,SAASH,QAAQ,CAAC;EAElCI,WAAWA,CAAEC,UAAU,EAAG;IAEzB,KAAK,CAAC,CAAC;IAEP,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAG,IAAI;IAElB,IAAI,CAACC,IAAI,GAAG,IAAI;EAEjB;EAEAC,iBAAiBA,CAAEC,KAAK,EAAG;IAE1B,KAAK,CAACD,iBAAiB,CAAEC,KAAM,CAAC;IAEhC,IAAK,IAAI,CAACJ,gBAAgB,EAAG;MAE5B,IAAI,CAACA,gBAAgB,CAACK,UAAU,CAAC,CAAC;IAEnC;EAED;AAED;AAEA,MAAMC,kBAAkB,CAAC;EAExBR,WAAWA,CAAA,EAAG;IAEb,IAAI,CAACS,IAAI,GAAG,IAAI;EAEjB;EAEAC,OAAOA,CAAED,IAAI,EAAG;IAEf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAEhB,OAAO,IAAI;EAEZ;EAEAE,eAAeA,CAAEV,UAAU,EAAEW,OAAO,EAAG;IAEtC,MAAMC,SAAS,GAAG,IAAId,WAAW,CAAEE,UAAW,CAAC;IAE/CA,UAAU,CAACa,gBAAgB,CAAE,WAAW,EAAIC,KAAK,IAAM;MAEtD,MAAMC,aAAa,GAAGD,KAAK,CAACE,IAAI;MAEhC,IAAKD,aAAa,CAACE,IAAI,IAAI,CAAEL,SAAS,CAACX,gBAAgB,EAAG;QAEzDW,SAAS,CAACG,aAAa,GAAGA,aAAa;;QAEvC;QACA,IAAKJ,OAAO,KAAKO,SAAS,IAAIP,OAAO,KAAK,SAAS,EAAG;UAErDC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CAAEgB,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAU,EAAE;YAAEC,SAAS,EAAE;UAAS,CAAE,CAAC;QAE7I,CAAC,MAAM,IAAKT,OAAO,KAAK,OAAO,EAAG;UAEjCC,SAAS,CAACX,gBAAgB,GAAG,IAAIL,oBAAoB,CAAEgB,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAU,EAAE;YAAEC,SAAS,EAAE;UAAM,CAAE,CAAC;QAE1I,CAAC,MAAM,IAAKT,OAAO,KAAK,MAAM,EAAG;UAEhCC,SAAS,CAACX,gBAAgB,GAAG,IAAIJ,eAAe,CAAEe,SAAS,EAAEZ,UAAU,EAAE,IAAI,CAACQ,IAAI,EAAEO,aAAa,CAACI,UAAW,CAAC;QAE/G;MAED;MAEAnB,UAAU,CAACqB,OAAO,GAAG,IAAI;IAE1B,CAAE,CAAC;IAEHrB,UAAU,CAACa,gBAAgB,CAAE,cAAc,EAAE,MAAM;MAElDb,UAAU,CAACqB,OAAO,GAAG,KAAK;MAC1B;MACA;MACA;IAED,CAAE,CAAC;IAEH,OAAOT,SAAS;EAEjB;AAED;AAEA,SAASL,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}