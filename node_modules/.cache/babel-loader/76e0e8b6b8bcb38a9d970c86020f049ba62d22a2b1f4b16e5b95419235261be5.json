{"ast":null,"code":"import { LinearFilter, Mesh, NearestFilter, OrthographicCamera, PlaneGeometry, RGBAFormat, Scene, ShaderMaterial, StereoCamera, WebGLRenderTarget } from 'three';\nclass ParallaxBarrierEffect {\n  constructor(renderer) {\n    const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    const _scene = new Scene();\n    const _stereo = new StereoCamera();\n    const _params = {\n      minFilter: LinearFilter,\n      magFilter: NearestFilter,\n      format: RGBAFormat\n    };\n    const _renderTargetL = new WebGLRenderTarget(512, 512, _params);\n    const _renderTargetR = new WebGLRenderTarget(512, 512, _params);\n    const _material = new ShaderMaterial({\n      uniforms: {\n        'mapLeft': {\n          value: _renderTargetL.texture\n        },\n        'mapRight': {\n          value: _renderTargetR.texture\n        }\n      },\n      vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n      fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'void main() {', '\tvec2 uv = vUv;', '\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {', '\t\tgl_FragColor = texture2D( mapLeft, uv );', '\t} else {', '\t\tgl_FragColor = texture2D( mapRight, uv );', '\t}', '\t#include <tonemapping_fragment>', '\t#include <colorspace_fragment>', '}'].join('\\n')\n    });\n    const mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n    _scene.add(mesh);\n    this.setSize = function (width, height) {\n      renderer.setSize(width, height);\n      const pixelRatio = renderer.getPixelRatio();\n      _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n      _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n    };\n    this.render = function (scene, camera) {\n      if (scene.matrixWorldAutoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null && camera.matrixWorldAutoUpdate === true) camera.updateMatrixWorld();\n      _stereo.update(camera);\n      renderer.setRenderTarget(_renderTargetL);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraL);\n      renderer.setRenderTarget(_renderTargetR);\n      renderer.clear();\n      renderer.render(scene, _stereo.cameraR);\n      renderer.setRenderTarget(null);\n      renderer.render(_scene, _camera);\n    };\n  }\n}\nexport { ParallaxBarrierEffect };","map":{"version":3,"names":["LinearFilter","Mesh","NearestFilter","OrthographicCamera","PlaneGeometry","RGBAFormat","Scene","ShaderMaterial","StereoCamera","WebGLRenderTarget","ParallaxBarrierEffect","constructor","renderer","_camera","_scene","_stereo","_params","minFilter","magFilter","format","_renderTargetL","_renderTargetR","_material","uniforms","value","texture","vertexShader","join","fragmentShader","mesh","add","setSize","width","height","pixelRatio","getPixelRatio","render","scene","camera","matrixWorldAutoUpdate","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR"],"sources":["/home/ervin/Escritorio/integrador/Projecto-Integrador-1-Game/node_modules/three/examples/jsm/effects/ParallaxBarrierEffect.js"],"sourcesContent":["import {\n\tLinearFilter,\n\tMesh,\n\tNearestFilter,\n\tOrthographicCamera,\n\tPlaneGeometry,\n\tRGBAFormat,\n\tScene,\n\tShaderMaterial,\n\tStereoCamera,\n\tWebGLRenderTarget\n} from 'three';\n\nclass ParallaxBarrierEffect {\n\n\tconstructor( renderer ) {\n\n\t\tconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n\t\tconst _scene = new Scene();\n\n\t\tconst _stereo = new StereoCamera();\n\n\t\tconst _params = { minFilter: LinearFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\tconst _renderTargetL = new WebGLRenderTarget( 512, 512, _params );\n\t\tconst _renderTargetR = new WebGLRenderTarget( 512, 512, _params );\n\n\t\tconst _material = new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\n\t\t\t\t'mapLeft': { value: _renderTargetL.texture },\n\t\t\t\t'mapRight': { value: _renderTargetR.texture }\n\n\t\t\t},\n\n\t\t\tvertexShader: [\n\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvUv = vec2( uv.x, uv.y );',\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' ),\n\n\t\t\tfragmentShader: [\n\n\t\t\t\t'uniform sampler2D mapLeft;',\n\t\t\t\t'uniform sampler2D mapRight;',\n\t\t\t\t'varying vec2 vUv;',\n\n\t\t\t\t'void main() {',\n\n\t\t\t\t'\tvec2 uv = vUv;',\n\n\t\t\t\t'\tif ( ( mod( gl_FragCoord.y, 2.0 ) ) > 1.00 ) {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapLeft, uv );',\n\n\t\t\t\t'\t} else {',\n\n\t\t\t\t'\t\tgl_FragColor = texture2D( mapRight, uv );',\n\n\t\t\t\t'\t}',\n\n\t\t\t\t'\t#include <tonemapping_fragment>',\n\t\t\t\t'\t#include <colorspace_fragment>',\n\n\t\t\t\t'}'\n\n\t\t\t].join( '\\n' )\n\n\t\t} );\n\n\t\tconst mesh = new Mesh( new PlaneGeometry( 2, 2 ), _material );\n\t\t_scene.add( mesh );\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\trenderer.setSize( width, height );\n\n\t\t\tconst pixelRatio = renderer.getPixelRatio();\n\n\t\t\t_renderTargetL.setSize( width * pixelRatio, height * pixelRatio );\n\t\t\t_renderTargetR.setSize( width * pixelRatio, height * pixelRatio );\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_stereo.update( camera );\n\n\t\t\trenderer.setRenderTarget( _renderTargetL );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraL );\n\n\t\t\trenderer.setRenderTarget( _renderTargetR );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( scene, _stereo.cameraR );\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.render( _scene, _camera );\n\n\t\t};\n\n\t}\n\n}\n\nexport { ParallaxBarrierEffect };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}